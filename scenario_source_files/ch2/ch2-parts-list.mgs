include "header.mgs";

/* ---------- GENERICS ---------- */

// NOTE: These must be written generically enough to be seen in isolation

// ROUND ONE: normal

serial_dialog ch2_describe_monitor {
	"<m>LAMBDA</>: You'll need a computer <m>MONITOR</> if you want to see anything the computer is doing. I'm pretty sure there's a <m>monitor in the next room of the castle</> that no one is using. Be sure to take its video cable and power cable, too."
}
serial_dialog ch2_describe_heatsink {
	"<m>LAMBDA</>: The mainframe generates so much heat we'll need a <m>HEAT SINK</> -- or any means of drawing heat away from the CPU. The <m>power plant guys</> can probably help you out on that front."
}
serial_dialog ch2_describe_powersupply {
	"<m>LAMBDA</>: The mainframe will need a <m>POWER SUPPLY</> to turn AC power from the wall into DC power. We'll need the kind that goes on the inside of a computer enclosure. According to the castle's inventory sheets, the <m>server room</> has a bunch extra. I'm sure they'd let you take one."
}

// ROUND TWO: abstract

serial_dialog ch2_describe_keyboard {
	"<m>LAMBDA</>: You're definitely going to need a <m>KEYBOARD</>. Fortunately the <m>band in the Great Hall</> has one they're not exactly using. Okay, it's not QWERTY or DVORAK so much as it is a twelve-tone scale, but I think it'll work as an input device. Better than nothing, anyway."
}
serial_dialog ch2_describe_mouse {
	"<m>LAMBDA</>: To be honest, you don't need a <m>MOUSE</> to use a computer, but a lot of people prefer not to use the keyboard alone. I think it might be nice for you to have if you're not used to a terminal."
	"\tMice might be hard to come by, though, so if I were you, I'd <m>ask a cat to fetch one</> for you."
}
serial_dialog ch2_describe_harddrive {
	"<m>LAMBDA</>: As I said before, to make a <m>HARD DRIVE</> we'll need two things:"
	"\tFirst, a <m>PLATE</>. But not just any plate -- we need a plate with high iron content in its glaze. <m>Ask the kitchen staff</> if they have a plate like that."
	"\tNext, a <m>NEEDLE</>, like a record player needle. There's a <m>phonograph player somewhere in the central wing</> of the castle. That might be your best bet."
	// see aftermath of each usage for an additional line
}
serial_dialog ch2_describe_plate { // some duplicate text; see above
	"<m>LAMBDA</>: To build a <m>hard drive</>, we'll need a <m>PLATE</>. But not just any plate -- we need a plate with high iron content in its glaze. <m>Ask the kitchen staff</> if they have a plate like that."
}
serial_dialog ch2_describe_needle { // some duplicate text; see above
	"<m>LAMBDA</>: To build a <m>hard drive</>, we'll need a <m>NEEDLE</>, like a record player needle. There's a <m>phonograph player somewhere in the central wing</> of the castle. That might be your best bet."
}

// ROUND THREE: desperate

serial_dialog ch2_describe_clock {
	"<m>LAMBDA</>: We'll need a <m>CLOCK</> to keep all the computer parts coordinated. Normally CPU clocks are very tiny quartz crystals, which are shaped to oscillate at a specific rate...."
	"\tIn our case... well, I know <m>King Gibson has a nice grandfather clock in his bedroom</>. Maybe ask him if you can use it."
}
serial_dialog ch2_describe_cpu { // slightly redundant with original intro; be sure to change both if changing anything
	"<m>LAMBDA</>: The <m>CPU</> is like the brain of the computer. There aren't any spare lying around, but we can approximate one."
	"\tWe'll need something to act as the <bold>register file</> -- that is, the place the CPU keeps the very small set values that a program modifies with each instruction. An <m>ABACUS</> should work well for this. Looks like <m>Frankie in the <m>workshop</> has one."
	"\tFor the rest, we'll need a volunteer who is very small and will make decisions very consistently. The best candidate is <m>Aurelius</>, the <m>GOLDFISH</> in the <m>throne room</>. Just make sure he understands what he's getting into."
	"\tOnce you have both, <m>solder them together</> in the workshop."
	// todo: make it so you could use Mr. Tickles instead! (You must choose!)
	// "\tThat is, unless you know any other goldfish you might want to use instead...."
}
serial_dialog ch2_describe_goldfish { // slightly redundant with original intro; be sure to change both questions
	"<m>LAMBDA</>: To make a CPU, we'll need a volunteer to act as the interpretor and executor of program data. We'll need someone we can trust will make decisions very consistently, as well as someone very small. The only one around here that fits the bill is the <m>King's regent, Aurelius</>. He's the <m>GOLDFISH</> in the <m>throne room</>."
}
serial_dialog ch2_describe_abacus { // slightly redundant with original intro; be sure to change both questions
	"<m>LAMBDA</>: To make a CPU, we'll need something to act as the <bold>register file</> -- that is, the place the CPU keeps the very small set of values that a program modifies with each instruction. An <m>ABACUS</> should work well for this. Looks like <m>Frankie in the <m>workshop</> has one."
}
serial_dialog ch2_describe_ramchips {
	"<m>LAMBDA</>: For <m>RAM</>... I'll admit I'm at a complete loss. I'm finding nothing in the inventory sheets that might work. But <m>ask the hardware guys in the <m>workshop</>. Those guys know their stuff, and I trust them to come up with something."
}

/* ---------- PARTS LIST: ROUND 1 ---------- */

ch2_toot_step5a {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Really? Around here? Parts like what?"
		" "
	};
	show serial_dialog ch2_describe_monitor;
	show serial_dialog {
		" "
		# "What else?" = ch2_toot_step5b
	};
}
ch2_toot_step5b {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: What else?"
		" "
	};
	show serial_dialog ch2_describe_heatsink;
	show serial_dialog {
		" "
		# "Then what?" = ch2_toot_step5c
	};
}
ch2_toot_step5c {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Then what?"
		" "
	};
	show serial_dialog ch2_describe_powersupply;
	show serial_dialog {
		" "
		# "Anything else?" = ch2_toot_step5e
	};
}

ch2_toot_step5e {
	// state must be set first because the serial_dialog branches
	copy!(ch2_toot_step99_cleanstate)
	// actual convo
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Anything else?"
		" "
		"<m>LAMBDA</>: And... the rest might be a little tricky. I'll keep looking for options, but for now just start with those three. Let me rig up a command real quick... and...."
		"\tThere we go. Now you can type <c>PARTS</> to call me about the parts list specifically."
	};
	goto ch2_toot_step99;
}

ch2_toot_step99_cleanstate {
	ch2_toot_level = 99;
	ch2_toot_done = true;
}

ch2_toot_step99 {
	ch2_storyflag_round = 1;
	copy!(register_parts)
	copy!(ch2_put_on_map_round1)
	show serial_dialog {
		"\tYou know, I'm actually getting a little excited about building this thing! We can actually do this!"
		" "
		# "Let's do it!" = ch2_toot_step99_end
		# "Actually, I had a different question." = ch2_toot_step99_continue
	};
}

ch2_toot_step99_end {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Yeah, let's do it!"
		" "
		"<m>LAMBDA</>: Great! And don't forget to type <c>HELP</> to see all the commands you can use. You'll probably need to use all of them."
		"\tGood luck!"
		" "
	};
	show serial_dialog lambda_over;
}

ch2_toot_step99_continue {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Actually, I had a different question."
		" "
		"<m>LAMBDA</>: Sure. What did you want to know?"
	};
	goto ch2_lambda_topic_q;
}

/* ---------- PARTS LIST: ROUND 2 ---------- */


ch2_lambda_round_2_parts1 {
	if (ch2_lambdabert_skip_spacer) {
		ch2_lambdabert_skip_spacer = false;
		show serial_dialog { " " };
	} else {
		show serial_dialog spacer;
	}
	show serial_dialog {
		"<m>LAMBDA</>: Sorry, um, that was a bit of a tangent. But I actually wanted you to know that I have another round of parts for the parts list."
		"\tJust as a heads up, these parts are going to be a little... abstract."
		" "
		# "Abstract?" = ch2_lambda_round_2_parts2
	};
}

ch2_lambda_round_2_parts2 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Abstract? What is that supposed to mean?"
		" "
		"<m>LAMBDA</>: Yeah, so, like the hard drive, for example. I can't find one in storage anywhere, and no one I've contacted have any to spare, so we're going to have to <m>make one</>."
		"\tOld-style hard drives are made of spinning plates of metal, and they have a little read head in there that can magnetically interact with the plate... I mean, it needs electricity, but it can read a 1 and a 0, or change a 1 to a 0... that is, magnetic fields and electric fields are sort of the same thing, in the sense that --"
		" "
		# "...What?" = ch2_lambda_round_2_parts3
	};
}

ch2_lambda_round_2_parts3 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: ...What?"
		" "
		"<m>LAMBDA</>: <dim>*ahem*</> Well, it's all pretty cool, but the point is... we'll need a <m>plate</> and we'll need a <m>needle</>, and together they can approximate a hard drive."
		" "
		"<c>YOU</>: Plate? Like a dinner plate?"
		" "
		"<m>LAMBDA</>: Like I said..."
		"\t...<bold>abstract</>."
		" "
		# "Is this really going to work?" = ch2_lambda_round_2_parts4
	};
}

ch2_lambda_round_2_parts4 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Is this really going to work?"
		" "
		"<m>LAMBDA</>: ...<bold>Sure</>."
		" "
		# "Okay, so what's the new parts list?" = ch2_lambda_round_2_parts5a
	};
}

ch2_lambda_round_2_parts5a {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Okay, so what's the new parts list?"
		" "
	};
	show serial_dialog ch2_describe_keyboard;
	show serial_dialog {
		" "
		# "Then what?" = ch2_lambda_round_2_parts5b
	};

}

ch2_lambda_round_2_parts5b {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Then what?"
		" "
	};
	show serial_dialog ch2_describe_mouse;
	show serial_dialog {
		" "
		# "Okay, and then?" = ch2_lambda_round_2_parts5c
	};

}
ch2_lambda_round_2_parts5c {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Okay, and then?"
		" "
	};
	show serial_dialog ch2_describe_harddrive;
	show serial_dialog {
		"\tOnce you have both items, go to the workshop and solder them together into a <m>HARD DRIVE</>."
	};
	show serial_dialog {
		" "
		# "Anything else?" = ch2_lambda_round_2_parts5d
	};

}

ch2_lambda_round_2_parts5d {
	ch2_lambda_paging = false;
	ch2_parts_round_2_backstory = true;
	copy!(ch2_put_on_map_round2)
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Anything else?"
		" "
		"<m>LAMBDA</>: That's all for the moment. The last few parts are going to be really esoteric compared to these, so I'll need more time to come up with ideas."
		"\tI'll leave you to it. Good luck."
		" "
	};
	show serial_dialog lambda_over;
}

/* ---------- PARTS LIST: ROUND 3 ---------- */

ch2_bert_message_lambda_intro {
	copy!(ch2_put_on_map_round3)
	show serial_dialog spacer;
	show serial_dialog {
		"<m>LAMBDA</>: Hey, there! I saw that you finished the last list, and had just worked out the last few parts we need...."
		" "
		# "Does that mean we're almost done?" = ch2_bert_message_lambda_intro1a
		# "Wait! What about Bert?" = ch2_bert_message_lambda_intro1b
	};
}
ch2_bert_message_lambda_intro1a {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Oh yeah? Does that mean we're almost done?"
	};
	goto ch2_bert_message_lambda_intro3;
}
ch2_bert_message_lambda_intro1b {
	// todo: if you've asked around the village about Bert, you could like say "I've asked around but..."
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Wait! What about Bert? Have you heard anything?"
		" "
		"<m>LAMBDA</>: Heard anything from Bert? No, nothing. I'm sorry. We'll just have to keep being patient."
		" "
		# "Okay...." = ch2_bert_message_lambda_intro2
	};
}
ch2_bert_message_lambda_intro2 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Okay.... I don't like it, but I guess I don't have much choice."
		"\tYou said you had the last few parts. Does that mean we're almost done?"
	};
	goto ch2_bert_message_lambda_intro3;
}
ch2_bert_message_lambda_intro3 {
	ch2_parts_round_3_backstory = true;
	show serial_dialog {
		" "
		"<m>LAMBDA</>: Yeah, we're getting pretty close to the end here. Only a few parts left, but one is a bit of a doozy."
		" "
		# "In what way?" = ch2_lambda_round_3_parts2
	};
}

ch2_lambda_round_3_parts2 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: In what way?"
		" "
		"<m>LAMBDA</>: Well, we'll have to make a CPU from scratch, but I've worked it out so we only need two things."
		"\tWe'll need something to act as the <bold>register file</> -- that is, the place the CPU keeps the very small set of values that a program modifies with each instruction. An <m>ABACUS</> should work well for this. Looks like <m>Frankie in the workshop</> has one."
		"\tFor the rest of the CPU, including the interpretation of program instructions and changing the values on the abacus itself, we'll need a... volunteer."
		" "
		# "Volunteer?" = ch2_lambda_round_3_parts2b
	};
}
ch2_lambda_round_3_parts2b {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Volunteer?"
		" "
		"<m>LAMBDA</>: Yes. We'll need a living, sentient being to agree to be... \"combined\"... with the abacus. It'll have to be someone we can trust will make decisions very consistently, as well as someone very small. The only one around here that fits the bill is the <m>King's regent, Aurelius</>. He's the <m>GOLDFISH</> in the <m>throne room</>."
		"\tIt'll be a temporary thing -- just until I can have a CPU delivered by mail order. Given that, I think he'll agree."
		" "
		# "Will he be okay in the meantime?" = ch2_lambda_round_3_parts2c
	};
}
ch2_lambda_round_3_parts2c {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Will he be okay in the meantime?"
		" "
		"<m>LAMBDA</>: Actually, yes. Due to the nature of what we're doing and where we're doing it, the volunteer's mind will remain intact. And their body can be completely restored at a later time -- whatever can be soldered can be unsoldered, after all."
		"\tIt's still an uncomfortable prospect to ask someone to do this, which is why I want you to make sure he understands what he's getting into, and that he's doing it willingly. I'm counting on you."
		" "
		# "He's a goldfish. Won't soldering him cook him?" = ch2_lambda_round_3_parts2d
	};
}
ch2_lambda_round_3_parts2d {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: He's a goldfish. Won't soldering him cook him?"
		" "
		"<m>LAMBDA</>: It'll be fine. I've quadruple checked."
		" "
		# "All right. What else?" = ch2_lambda_round_3_parts3
	};
}
ch2_lambda_round_3_parts3 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: All right. What else?"
		" "
	};
	show serial_dialog ch2_describe_ramchips;
	show serial_dialog {
		" "
		# "Anything else?" = ch2_lambda_round_3_parts4
	};
}

ch2_lambda_round_3_parts4 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: And then?"
		" "
	};
	show serial_dialog ch2_describe_clock;
	show serial_dialog {
		" "
		# "And then?" = ch2_lambda_round_3_parts5
	};
}

ch2_lambda_round_3_parts5 {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: And then?"
		" "
		"<m>LAMBDA</>: Then we're done."
		"\tAfter that, you'll have to install the OS, and I'm still tweaking that. I should be done right about when you finish up there."
		"\tRemember you can type <c>PARTS</> To see the parts list again. Good luck."
		" "
	};
	ch2_lambda_paging = false;
	show serial_dialog lambda_over;
}

/* ---------- PARTS LIST: ROUND 4 ---------- */

ch2_lambda_round_4 {
	show serial_dialog spacer;
	show serial_dialog {
		"<m>LAMBDA</>: Hiya, %PLAYER%! I see that you're finished building the mainframe. As it happens, I'm finished with the OS, too. All that's left is for you to come pick it up."
		" "
		# "Pick it up? Can't you drop it off?" = ch2_lambda_round_4b
	};
}
ch2_lambda_round_4b {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: Pick it up? Can't you drop it off?"
		"\tSay, where are you, anyway?"
		" "
		"<m>LAMBDA</>: I'm somewhere split off, isolated from the rest of the castle. All conventional exits and entrances have been destroyed, but you should still be able to reach me. I'll explain more after you arrive."
		" "
		# "No entrances? How am I supposed to get there?" = ch2_lambda_round_4c
	};
}
ch2_lambda_round_4c {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: No entrances? How am I supposed to get there?"
		" "
		"<m>LAMBDA</>: I've granted you access to the <c>WARP</> command. You can use it to go to any place you've ever been, even if it's not an adjacent space to your current room. Oh, and I've also set the \"visit\" flag to my lab, which will make the system think you've been here before."
		"\tAll you'd have to do then is enter <c>WARP SECRET LAB</> into the console, and you'll zip right to where I am now."
		" "
		# "But can't you warp out here? Why do I need to come to you?" = ch2_lambda_round_4d
	};
}
ch2_lambda_round_4d {
	show serial_dialog spacer;
	show serial_dialog {
		"<c>YOU</>: But can't you warp out here? Why do I need to come to you?"
		" "
		"<m>LAMBDA</>: It's... well, it's all very complicated, %PLAYER%. Like I said, I'll explain once you get here."
		"\tI'll... uh, I guess I'll see you soon. Good luck."
		" "
	};
	copy!(ch2_put_on_map_round4)
	ch2_lambda_paging = false;
	ch2_warp_granted = true;
	ch2_parts_round_4_backstory = true;
	if (!debug_mode) {
		copy!(register_warp)
	}
	show serial_dialog lambda_over;
}


/* ---------- ITEM ON_LOOK ---------- */

look_monitor {
	show serial_dialog spacer;
	if (!ch2_carrying_monitor) {
		show serial_dialog {
			"You look at the <m>monitor</>: a modestly large flat screen monitor or television. The colors are crispy enough, though there's a dead pixel in the lower-right corner."
		};
	} else {
		show serial_dialog {
			"You look at the <m>monitor</>: a modestly large flat screen monitor or television. The casing feels flimsy in your hands, but since the screen is unpowered, you can't judge its image quality at the moment."
		};
	}
}
look_heatsink {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>heat sink</>: a bizarre bank of metal prongs, like a tuning fork crossed with a head of broccoli."
	};
}
look_cactuscooler {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the can of <m>Cactus Cooler</>: a mundane aluminum can of soda -- apparently some kind of pineapple-orange concoction, vaguely desert themed. It's still cold."
	};
}
look_powersupply {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>power supply</>: an enigmatic box with a grill and a fan right underneath. A beefy cable sticks out of the side."
	};
}
look_keyboard {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>keyboard</> -- that is, the <m>keytar</>: there's the normal piano-type keys, but there's assorted buttons scattered around the frame, too -- though these are not entirely labeled."
	};
}
look_mouse {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>mouse</>: black, round, with two buttons and a scroll wheel. It lacks a wire, but comes with a dongle sidekick."
	};
}
look_harddrive {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>hard drive</>: a magical fusion of a dinner plate and a phonograph needle, the sight of which is somehow impossible to put into words."
	};
}
look_plate {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>plate</>: a fancy orange dinner plate, with inlaid gold around the rim."
	};
}
look_needle {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>needle</>: an ordinary phonograph needle, meant for being drawn across a vinyl record."
	};
}
look_ramchips {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>RAM chips</>: a super beefy, super spicy, super poofy bag of silicon chips. You wonder if they make Cool Ranch RAM."
	};
}
look_clock {
	show serial_dialog spacer;
	if (!ch2_carrying_clock) {
		show serial_dialog {
			"You look at the <m>clock</>: a giant grandfather clock that's definitely larger than you. Never mind how it could fit in your pocket."
		};
	} else {
		show serial_dialog {
			"You look at the <m>clock</>: a giant grandfather clock that's definitely larger than you. Never mind how it fits in your pocket."
		};
	}
}
look_cpu {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>CPU</> -- and are amazed at how classy the goldfish looks after having been soldered with the abacus. It defies description. Aurelius is really taking this seriously."
	};
}
look_goldfish {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>goldfish</>: a small orange koi inside a standard goldfish bowl, complete with plastic decorations. Aurelius has a patient eye fixed upon you."
	};
}
look_manual {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>manual</>: a modest-sized book depicting a sophisticated calculator. Overall, you're left with confusion as to why a calculator would require a whole book to use it properly."
	};
}
look_abacus {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the <m>abacus</>: a few dozen black beads set into rods on a wooden frame."
	};
}
look_mainframeos {
	show serial_dialog spacer;
	show serial_dialog {
		"You look at the CD containing the <m>mainframe OS</>: the label is completely white, with no markings or writing on the top. The reverse side is very clean, and it makes patterns of reflected light when you angle it against the light."
	};
}
