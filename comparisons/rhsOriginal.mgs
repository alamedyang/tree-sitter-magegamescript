"bling-goto-branches" {
	"bling-rotate-state-calc-done" = false;
	// can't zigzag // (why though?)
	if ("bling-rotate-state" == 0) {
		goto "start_bling-dc801-2";
	}
	if ("bling-rotate-state" == 1) {
		goto "start_bling-dc801";
	}
	if ("bling-rotate-state" == 2) {
		goto "start_bling-digi-mage2";
	}
	if ("bling-rotate-state" == 3) {
		goto "start_bling-digi-mage";
	}
	if ("bling-rotate-state" == 4) {
		goto "start_bling-zero";
	}
	if ("bling-rotate-state" == 5) {
		goto "start_bling-serial";
	}
	goto "bling-goto-menu";
}

"bling-detect-mode" {
	// delay listening for button presses
	// otherwise buttons just immediately trigger
	wait 150ms;
	// detect rotation modes
	if (warp_state == "bling-rotate-manual") {
		goto "loop-bling-listen-manualrotate";
	} else if (warp_state == "bling-rotate-auto") {
		// start the timer
		entity "Timer" on_tick = "loop-bling_timer";
		goto "loop-bling-listen-any";
	}
	// not a rotating mode
	if ("bling-hax-button-only") {
		goto "loop-bling-listen-hax";
	} else {
		goto "loop-bling-listen-any";
	}
}

"loop-bling-listen-any" {
	if (button ANY pressed) {
		goto "bling-goto-menu";
	}
}

"loop-bling-listen-hax" {
	if (button HAX pressed) {
		goto "bling-goto-menu";
	}
}

"bling-rotate-state-increment" {
	"bling-rotate-state" += 1;
	"temp" = 5;
	"temp" += 1;
	if ("bling-rotate-state" == "temp") {
		"bling-rotate-state" = 0;
	}
	"bling-rotate-state-calc-done" = true;
	self on_tick = "null_script";
}

"bling-rotate-state-decrement" {
	"bling-rotate-state" -= 1;
	if ("bling-rotate-state" == 65535) { // aka -1
		"bling-rotate-state" = $maxBling;
	}
	"bling-rotate-state-calc-done" = true;
	self on_tick = "null_script";
}

"loop-bling_timer-wait" {
	// Waits for entity "Math" to finish
	if ("bling-rotate-state-calc-done") {
		goto "bling-goto-branches";
	}
}

"loop-bling-listen-manualrotate" {
	if (button LJOY_LEFT pressed) {
		goto "bling-manual-rotate-left";
	}
	if (button RJOY_LEFT pressed) {
		goto "bling-manual-rotate-left";
	}
	if (button LJOY_RIGHT pressed) {
		goto "bling-manual-rotate-right";
	}
	if (button RJOY_RIGHT pressed) {
		goto "bling-manual-rotate-right";
	}
	if (button HAX pressed) {
		goto "bling-goto-menu";
	}
}

"show_dialog-bender-start" {
	if (self glitched) {// glitched Bender
		show dialog {
			SELF emote 1
			"I speak binary fluently, kid! A little trick like this won't slow me down!"
		};
	} else { // unglitched Bender
		// normal dialog; turn off bender's handler and make him face the player
		copy!("set-bender-handler-off")
		copy!("face-player")
		/* ----- puzzle was solved(?) ----- */
		if ("storyflag-bender") { // SOLVED
			if (entity "Bender" type == "bender") { // and he's still bender
				copy!("bite-my-shiny-metal-ass")
				show dialog {
					SELF emote 1 "Ooh, yeah!"
					PLAYER "It's shiny. I'll give you that."
				};
			} else { // but he's not bender
				show dialog { SELF "Yeah, yeah, you're a real comedian, kid. Now turn me back!" };
			}
			// bender handler set (loiter)
			copy!("set-bender-handler-none")
		} else { // NOT SOLVED
			if (entity "Bender" type == "bender") { // but he's bender now
				if (!"bender-backstory") {
					copy!("bender-success-no-backstory")
				} else {
					copy!("bender-success-backstory")
				}
				// You solved the puzzle though! Setting puzzle state:
				"bender-backstory" = true;
				"storyflag-bender" = true;
				copy!("calculate-hint-tracking-series")
				if ("hint-tracking-check" == 5) { // if the hint series is the same, reset hint
					copy!("set-hint-none")
				}
				copy!("set-bender-handler-none")
			} else { // but he's not bender now
				if ("bender-backstory") { // you've heard the backstory
					if (entity "Bender" type == "bender_sadbutt") { // he is sadbutt
						copy!("bite-my-shiny-metal-ass-sad")
						show dialog {
							SELF "...Oh, right. My ass. Someone bit it off."
							"So what's the holdup? I know you can fix it!"
							"I'll reward you! Just hurry it up!"
						};
					} else { // he's not bender OR sadbutt
						show dialog {
							SELF "Come on! That doesn't look anything like me, half-assed or full-assed."
						};
					}
				} else { // you haven't heard the backstory
					if (entity "Bender" type == "bender_sadbutt") { // if bender is sadbutt
						show dialog {
							PLAYER "Oh! You look friendly!"
							SELF "Well, I'm not!"
						};
						copy!("bite-my-shiny-metal-ass-sad")
						show dialog {
							SELF "Aww, man... I forgot! Someone bit my shiny metal ass!"
							"Why would someone do such a horrible thing to an innocent robot?!"
							"Life's not the same without my ass! How else am I supposed to taunt everyone stupid-looking?"
						};
						// branch briefly depending on whether the player looks like bender...
						if (player type == "bender_sadbutt" || player type == "bender") {
							show dialog {
								SELF "Hey, you, strangely-handsome-looking kid! You're the one with the magic whatsit!"
							};
						} else {
							show dialog {
								SELF "Hey, you, kid! You're the one with the magic whatsit!"
							};
						}
						// ...and continue
						show dialog {
							SELF "Can't you fix this with your whatever powers?"
							"I'll give you a great reward! Just get my ass back!"
						};
					} else { // bender is NOT sadbutt
						show dialog {
							SELF "Hey, you! Bite my --\nAhhh!"
							"Aaaargh, this is terrible! My ass is even more missing than before!"
							"First someone bit it off, and now it's an entirely different kind of ass!"
							"I feel like this is your fault somehow!"
							"Hurry up and fix it, kid!"
						};
					}
				}
				// You've now heard his backstory; set hinteger to Bender
				"bender-backstory" = true;
				copy!("set-hint-bender")
				// Turn on bender's look handler again
				copy!("set-bender-handler-on")
				// Reset interact_script
			}
		}
	}
}

"on_load-bobsclub1" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if (!"storyflag-bobmoss") {
		entity "Bob Moss" position = geometry "bobsclub-hidingplace";
		entity "Bob Moss" name = " ";
		entity "Bob Moss" on_interact = "null_script";
		entity "Bob Moss" type = "exa";
	}
	if (!"bobsclub-entered") {
		goto "show_dialog-bobsclub"; // JUMP: Bob's club entrance cutscene
	}
}

"show_dialog-bobsclub" {
	player_control = off;
	player position -> geometry "bob_path" origin over 500ms;
	wait 800ms;
	show dialog {
		name "????"
		"Oh, hello. You must be here for the annual Bobs-Only Party, right?"
	};
	player position -> geometry "bob_path" length over 3500ms;
	player direction = entity "Guardian Bob";
	entity "Guardian Bob" direction = player;
	wait 100ms;
	show dialog {
		entity "Guardian Bob"
		"Well, I hate to tell you this, but it's canceled this year."

		PLAYER "What? Canceled?"

		entity "Guardian Bob"
		"Yeah. This time, for real."
		"I mean, every year they SAY its canceled, but this time it's actually genuinely canceled."

		entity "Strong Bad"
		"Wait, canceled?!"
	};
	wait 300ms;
	camera -> geometry "strongbad_camera" origin over 1200ms;
	wait 150ms;
	player direction = entity "Strong Bad";
	wait 200ms;
	entity "Guardian Bob" direction = entity "Strong Bad";
	wait 100ms;
	show dialog {
		entity "Strong Bad" alignment TL
		"But what about all the ladies?!"

		PLAYER alignment TR
		"Ladies? I'm pretty sure Bob is a masculine name, traditionally."

		entity "Strong Bad" alignment TL
		"Nuh-uh!"
		"What about Bob... rietta? Bob... velyn?"
		"Barbara? I mean, Bob-ara?"
		"They're still gonna come to the party, aren't they?"

		PLAYER alignment TR
		"Sorry, dude! Not if the party's canceled."
		"...Also not if none of them are named Bob."

		entity "Strong Bad" alignment TL
		"Sure, they'll come! I just gotta wait a little more!"

		PLAYER alignment TR
		"I think you came to the wrong party."
	};
	wait 200ms;
	camera -> player position over 700ms;
	wait 200ms;
	entity "Guardian Bob" direction = south;
	show dialog {
		entity "Guardian Bob"
		"Well, this place should be full of Bobs... next year."
	};
	copy!("begin-flail")
	show dialog {
		entity "Strong Bad"
		"Bob-alina!\nBob-cine!\nBob-quelyn!\nCome baaaack!"
	};
	copy!("end-flail")
	player_control = on;
	"bobsclub-entered" = true;
	if (!"baker-backstory") {
		goto "null_script"; // end it here
	}
	player direction = entity "Guardian Bob";
	entity "Guardian Bob" direction = player;
	show dialog {
		PLAYER
		"So I guess I can tell the baker to cancel the donut order then, huh?"

		entity "Guardian Bob"
		"Guess so. Sorry about this."
	};
}

"on_tick-bakery" {
	if (player intersects geometry "door-bakery-exit") {
		goto "leave-bakery";
	}
}

"on_tick-bobsclub" {
	if (player intersects geometry "door-bobsclub-exit") {
		goto "leave-bobsclub";
	}
}

"show_dialog-baker-start" {
	player on_tick = "watch-baker";
	if (self glitched) { // glitched
		show dialog { SELF "Qacwk, A kmvvwfdq usf'l kww kljsayzl. A ymwkk A kzgmdv uml tsuc gf lzw usxxawfw." };
	} else if ("bobsclub-entered") { // !glitched && BobsClub
		if (!"storyflag-baker") { // ...but you haven't brought him the news yet
			// bring him the news
			show dialog {
				SELF "Canceled? The party at the Bobs-Only Club was canceled? For real?"
				PLAYER "That's what Bob said."
				SELF "Bob? Stone Cold Bob Austin?"
				PLAYER "Uh... well, it was someone named Bob."
				SELF "Great. Just great. Just as I was putting everything in the oven. Not gonna pay me either, are they?"
				"Well, thanks for finding out for me. Now I need to find a way to move four dozen B-shaped donuts."
			};
			"storyflag-baker" = true;
			copy!("calculate-hint-tracking-series")
			if ("hint-tracking-check" == 2) {
				copy!("set-hint-none")
			}
		} else { // ...but you HAVE brought him the news already
			// final dialog:
			show dialog { SELF "Say, you wouldn't want a B-shaped donut, would you? On the house." };
		}
	} else  {
		if (!"baker-backstory") { // !glitched && !BobsClub && !backstory
			// hear backstory
			show dialog {
				SELF "Hey, I'm pretty swamped. Can you run an errand for me?"
				PLAYER "What do you need?"
				SELF "The Bobs-Only Club placed a huge order for B-shaped donuts, due tonight, but I can't get anyone to confirm the order."
				"They haven't paid yet, either."
				"I went over there this morning, but they wouldn't let me in! And Bob wouldn't tell me anything!"
				"I just want to know whether or not they still want these donuts. I'm running out of time to get everything ready by tonight."
				"Can you find out for me? Get some answers from Bob? Any Bob?"
				PLAYER "Sure, I can swing past that way. See what I can find out."
				SELF "Thanks."
				"Oh, and happy birthday."
			};
		} else { // !glitched && !BobsClub && backstory
			// hear summary
			show dialog {
				SELF "Hear anything from the Bobs-Only Club yet?"
			};
		}
		copy!("set-hint-baker")
	}
	player on_tick = "null_script";
	self on_interact = "show_dialog-baker-start";
}

"show_dialog-bobrock-start" {
	copy!("face-player")
	if (self glitched) { // glitched
		show dialog { SELF "Sqd'j meha byau jxyi." };
	} else if (!entity "Bob Austin" intersects geometry "bobzone") { // !glitched && !bobzone
		// teleport him back into bounds
		player_control = off;
		copy!("face-player")
		show dialog { SELF "Goin' back to work."};
		camera fade out -> #000000 over 500ms;
		entity "Bob Austin" position = geometry "bob_point";
		entity "Bob Austin" direction = south
		camera fade in -> #000000 over 500ms;
		player_control = on;
	} else if (!"bobrock-backstory") { // !glitched && bobzone && !backstory
		show dialog {
			SELF "Name's Bob."
			"Stone Cold %Bob Austin%."
			"...."
			"Right, what's yours, then?"
			PLAYER "You don't know who I am? We've both lived here for years!"
			SELF "Don't know nobody. All I know is, gotta keep everyone out."
			"You know, unless their name is Bob."
			PLAYER "Bob?"
			SELF "Bob. Camel case.
Nice and plain.
Traditional."
			"'Cause this club is Bobs-only. You know, the Bobs-Only Club."
			PLAYER "Why is it Bobs only?"
			SELF "Why?
Why is it Bobs only?"
			"Why, it wouldn't be the Bobs-Only Club if I just let anyone in!"
		};
		if ("baker-backstory") { // optional dialog
			show dialog {
				PLAYER "Well, the baker needs to know whether the club still needs a bunch of B-shaped donuts for tonight."
				"Do you know if the Bobs still want them? There's gonna be a party tonight, right?"
				SELF "That's for Bobs to know."
				"Only Bobs."
				"Bobs only."
				PLAYER "I think the baker needs to know, too!"
				SELF "Well, if his name was Bob, I would've let him in!"
			};
		}
		"bobrock-backstory" = true;
		copy!("set-hint-baker")
	} else { // !glitched && bobzone && backstory
		show dialog { SELF "So, what's your name then?" };
		if (player name != "Bob") { // you are NOT Bob
			if (!"bobsclub-entered") { // !Bob && !BobsClub
				show dialog {
					PLAYER "Um....\nit's %PLAYER%."
					SELF "Sorry, can't unlock the door for ya.\nBobs only."
				};
				copy!("set-hint-baker")
			} else { // !Bob && BobsClub
				show dialog "show_dialog-bobrock-start-AGAIN" { // (reused)
					PLAYER "We've been through all this before, you know."
					SELF "Doesn't matter. It's just the rules.\nBobs only."
				}
				show dialog {
					PLAYER "...." "Fine. I guess I'm not getting in, then."
					SELF "Damn straight."
				};
			}
		} else { // you ARE Bob
			if (!"bobsclub-entered") { // Bob && !BobsClub
				show dialog {
					PLAYER "Why, what luck! My name happens to be Bob!"
					SELF "Nice. Great name. I'll open it on up."
				};
			} else { // Bob && BobsClub
				show dialog "show_dialog-bobrock-start-AGAIN"; // from above
				show dialog {
					PLAYER "Well, my name is Bob! Happy?"
					SELF "Cool. Great name."
				};
			}
			// Bob Austin unlocks the door:
			player_control = off;
			entity "Bob Austin" position -> geometry "%ENTITY_PATH%" origin over 400ms;
			entity "Bob Austin" direction = geometry "door-bobsclub-entrance"
			wait 1000ms;
			entity "Bob Austin" direction = south
			show dialog {
				SELF "Head inside quick, now."
			};
			player position -> geometry "predoor-bobsclub" origin over 500ms;
			player position -> geometry "door-bobsclub-entrance" origin over 500ms;
			player_control = on;
			load map "bobsclub"; // JUMP
		}
	}
}

"show_dialog-bobsclub-bob" {
	copy!("face-player")
	if (self glitched) {
		show dialog { SELF "Gung'f n onq fvta." };
	} else {
		show dialog {
			SELF "They could've told me the party was actually canceled before I made the trip out here."
			"And it was a long trip, too. I came all the way from the net!"
			"*sigh*\nOh, well."
		};
		if (!"storyflag-bobmoss") {
			player_control = off;
			wait 120ms;
			player_control = on;
			entity "Guardian Bob" on_tick = "look-left-and-right-fast";
			show dialog {
				SELF "Wait. Weren't there two Bob golems last year?"
			};
			copy!("set-hint-bobmoss-from-guardian")
			entity "Guardian Bob" on_tick = "null_script";
			entity "Guardian Bob" direction = south;
		}
	}
}

"show_dialog-bobsclub-strongbob" {
	if (self glitched) {
		show dialog { SELF "fhqwhgadshgnsdhjsdbkhsdabkfabkveybvf" };
	} else {
		copy!("face-player")
		if (!"strong_bad-backstory") {
			// hear his "backstory"
			show dialog {
				SELF "Why, hello there, fellow Bob!"
				PLAYER "Your name is Bob?"
				SELF "Why, it sure is!"
				PLAYER "You look an awful lot like Strong Bad to me."
				SELF "Wha-what? STRONG BAD? Never heard of him. Though he sounds like quite the rugged and handsome gentleman."
				"The name's Strong BOB! Just lookee here at my fake -- I mean real -- ID!"
				PLAYER "(This ID clearly belongs to \"Bob Newhart,\" but the word Newhart is crossed out.)"
				"(I guess Bob out front doesn't have very good eyes.)"
			};
			"strong_bad-backstory" = true;
		} else {
			// hear a "summary"
			show dialog { SELF "Yessirree! Strong Bob's the name, and partyin's the game!" };
		}
	}
}

"show_dialog-bobmoss-start" {
	copy!("face-player")
	if (self glitched) {
		copy!("show_dialog-bobmoss-deglitch")
		self on_interact = "show_dialog-bobmoss-start";
	}
	if ("storyflag-bobmoss") {
		goto "show_dialog-bobmoss-start-s";
	}
	show dialog {
		SELF "Oh, hello, there."
	};
	entity "Bob Moss" on_tick = "spin_self_clockwise";
	show dialog {
		SELF "I was just admiring the forest, with its happy little trees...."
		"I've made so many squirrel friends, and...."
	};
	entity "Bob Moss" on_tick = "null_script";
	copy!("face-player")
	show dialog {
		SELF "Oh!"
		"I didn't realize how late it was getting. I think I might be late for work."
		"I'd better head out. Hope to see you again."
	};
	player_control = off;
	camera fade out -> #000000 over 500ms;
	entity "Bob Moss" position = geometry "catwalk-hide";
	"storyflag-bobmoss" = true;
	copy!("calculate-hint-tracking-series")
	if ("hint-tracking-check" == 3) {
		// if the hint series is the same, reset hint
		copy!("set-hint-none")
	}
	camera fade in -> #000000 over 500ms;
	player_control = on;
}

"show_dialog-bobmoss-start-s" {
	// can't zigzag this without editing the Tiled map... todo later
	// (What the crap does this mean?? ^^)
	copy!("face-player")
	if (self glitched) {
		copy!("show_dialog-bobmoss-deglitch")
		self on_interact = "show_dialog-bobmoss-start-s";
	}
	show dialog {
		SELF "Sorry, I can't serve anyone until the party starts."
		"Help yourself to a Cactus Cooler, though. Plenty in the fridge."
	};
	self direction = south;
}

"show_dialog-bert-start" {
	if (self glitched) {
		show dialog { SELF "...." "Bczv um jiks." };
		return;
	}
	copy!("face-player")
	show dialog { SELF "Who needs help?" };
	copy!("calculate-hint-tracking-series") // sets `hint-tracking-check`
	if (!"storyflag-shepherd") {
		show dialog {
			SELF "The shepherd."
			"He had one job."
		};
		if ("hint-tracking-check" != 1) {
			// (NOTE: these are inverted from orig)
			copy!("set-hint-shepherd-from-bert")
		}
	} else if (!"storyflag-baker") {
		show dialog {
			SELF "Baker."
			"Baker is busy. He has trouble with customer."
		};
		if ("hint-tracking-check" != 2) {
			copy!("set-hint-baker-from-bert")
		}
	} else if (!"storyflag-bobmoss") {
		show dialog {
			SELF "Cousin of Stone Cold Bob Austin."
			"He is lost. Or is he hiding?"
		};
		copy!("set-hint-bobmoss-from-bert")
		// no need to check for hint series, because this is the advanced hint, not the basic one; always set this
	} else if (!"storyflag-bea1") {
		show dialog {
			SELF "Old woman, Beatrice."
			"She has been sad a long time."
		};
		if ("hint-tracking-check" != 4) {
			copy!("set-hint-bea1-from-bert")
		}
	} else if (!"storyflag-bender") {
		show dialog {
			SELF "Robot?"
			"Some kind of robot."
			"I do not know this robot."
			"...I think he took my watch."
		};
		if ("hint-tracking-check" != 5) {
			copy!("set-hint-bender-from-bert")
		}
	} else if (!"storyflag-catwork") {
		show dialog {
			SELF "Max. Purple man."
			"Max wants his house to be built."
		};
		if ("hint-tracking-check" != 6) {
			copy!("set-hint-max-from-bert")
		}
	} else if (!"storyflag-trekkie") {
		show dialog {
			SELF "Trekkie."
			"Trekkie works on plants in the glass house."
		};
		if ("hint-tracking-check" != 7) {
			copy!("set-hint-trekkie-from-bert")
		}
	} else if (!"storyflag-sportskid") {
		show dialog {
			SELF "Small child with big dream."
			"Child lives with father."
		};
		if ("hint-tracking-check" != 8) {
			copy!("set-hint-sportskid-from-bert")
		}
	} else if (!"storyflag-bea2") {
		show dialog {
			SELF "Old woman, Beatrice."
			"Does she know what she wants?"
		};
		if ("hint-tracking-check" != 9) {
			copy!("set-hint-bea2-from-bert")
		}
	} else if (!"storyflag-rake") {
		show dialog {
			SELF "Goose is mad?"
			"Goose is always mad."
			"What angers the goose this time?"
		};
		if ("hint-tracking-check" != 10) {
			copy!("set-hint-goose-from-bert")
		}
	} else if (!"storyflag-verthandi") {
		show dialog {
			SELF"A goddess, mourning for lost souls."
			"She watches the goats."
		};
		if ("hint-tracking-check" != 11) {
			copy!("set-hint-glitch-from-bert")
		}
	} else {
		show dialog { SELF "Perhaps the world." };
	}
}

"show_dialog-jackob-start" {
	if (self glitched) {
		show dialog {
			SELF "Vg'f tbbq gung lbh'er cenpgvpvat, ohg creuncf lbh fubhyq sbphf ba erfgbevat gur gbja?"
		};
	} else {
		copy!("face-player")
		show dialog {
			SELF "Did you have a question about something?"
		};
		if ("hint-tracking" == 10) {
			show dialog {
				PLAYER "How do I put the sheep back inside their pen?"
			};
			show dialog "dialog-jackob-hint-shepherd2" { // reused below
				SELF "That seems simple enough. All you must do is change their X and Y position until they are inside the sheep pen."
				"The hard part will be learning their names."
				PLAYER "Names?"
				SELF "All sheep have names, but they don't share them except in the direst of emergencies."
				"But their names are still inherent in the data of our world. Their names are not hidden from you."
				"You can find their names -- and their data -- if you look long enough."
				"...."
				"I wonder if there was another way of identifying the entity you were facing.... I feel like I might have once read something about that, but...."
				"Ah, well. These days my mind is like... some kind of... thing you strain rice with."
			};
		} else if ("hint-tracking" == 11 || "hint-tracking" == 12) {
			show dialog {
				PLAYER "I guess the shepherd wants me to put the sheep back inside their pen."
			};
			show dialog "dialog-jackob-hint-shepherd2"; // defined above
		} else if ("hint-tracking" == 20) {
			show dialog {
				PLAYER "The baker's having trouble with a customer, apparently. But I don't know what I'm supposed to do about that."
				SELF "Hmmm. I think in this particular case -- if what has happened is what I suspect has happened --"
				"You might be the only one capable of getting to the bottom of it."
				"Sometimes blindly following a rule can cause problems for others, you see. Better to be flexible, not rigid and stone- stubborn."
				"Better to understand that sometimes rules must be broken."
				Alfonso alignment BR "The piranha affair was an accident! How many times do I need to apologize, %Jackob%?"
				SELF "I wasn't talking to you."
			};	
		} else if ("hint-tracking" == 21) {
			show dialog {
				PLAYER "How do I get into the Bob's Club?"
				SELF "The bouncer, Stone Cold Bob Austin, is very strict. If your name is not 'Bob' exactly, he will not budge."
				"And just so you know, there are multiple values which will APPEAR to be a blank space, but will not satisfy him."
				"Fortunately, the correct value will terminate the string his logic is evaluating, so only the first byte after 'Bob' will matter."
			};
		} else if ("hint-tracking" == 30) {
			show dialog {
				PLAYER "I heard that Bob Austin's cousin has gotten lost."
				SELF "Oh, you mean Bob Moss. Yes, he disappears once in a while."
				"He's never far. But if you can't find him in town, you might have to look in places one cannot ordinarily walk."
			};
		} else if ("hint-tracking" == 32) {
			show dialog {
				PLAYER "I heard there might be a second rockgolem. Do you know anything about that?"
				SELF "If you're referring to Bob Moss, then I'm not surprised he's absent. He disappears once in a while."
				"He's never far. But if you can't find him in town, you might have to look in places one cannot ordinarily walk."
			};
		} else if ("hint-tracking" == 40) {
			show dialog {
				PLAYER "Is Beatrice sad about something?"
				SELF "She misses her husband. The Big Bad hacked him, don't you know."
				"But I imagine you can fix him with Ring Zero."
			};
		} else if ("hint-tracking" == 41) {
			show dialog {
				PLAYER "Beatrice wants her husband to become a managain."
				SELF "A simple entity type change."
				"You'll know you have the right entity type when you get to an old man, balding, hunched over, and in overalls."
			};
		} else if ("hint-tracking" == 50) {
			show dialog {
				PLAYER "I gotta help this robot, apparently."
				SELF "What does this robot need?"
				PLAYER "Not sure."
				SELF "Then you'd better talk to it and find out."
			};
		} else if ("hint-tracking" == 51) {
			show dialog {
				PLAYER "This robot named Bender wants his ass back, I guess."
				SELF "Back? Has it gone somewhere?"
				PLAYER "Someone bit it off or something."
				SELF "Well, our every state of being can be defined by data."
				"In his case, he once existed with a whole ass, and therefore, there exists an entity type where his ass is whole."
				"Though unless you are looking directly at his ass, it might be difficult to see if you have succeeded."
			};
		} else if ("hint-tracking" == 60) {
			show dialog {
				PLAYER "Bert says the \"purple man\" wants his house to be built. What purple man?"
				SELF "Oh, Bert must mean the night elf tailor. He's new. You might not have met him yet."
				"Hmm. What was his name? Top Confidence? High Bluster?"
				"He'll be just outside his shop, I should think. The interior is still unfinished, you see."
			};
		} else if ("hint-tracking" == 61 || "hint-tracking" == 62) {
			show dialog {
				PLAYER "The cat crew needs their cat boss."
				SELF "Well, if you can't give them their cat boss, you might try the next best thing:"
				"An impersonator!"
			};
		} else if ("hint-tracking" == 70) {
			show dialog {
				PLAYER "Does Trekkie need help with something?"
				SELF "Trekkie tends the Ether Nettle in the greenhouse. I imagine it's the Ether Nettle, not Trekkie, that actually needs help."
				"But you had better see in person. I don't know much about why the internet is broken."
			};
		} else if ("hint-tracking" == 71) {
			show dialog {
				PLAYER "Trekkie needs me to change the color of the Ether Nettle flowers."
				SELF "I see. That one might be tricky."
				"If I understand plant genetics correctly, then hypothetically.... Ether Nettle colors are simply variations of a single entity type."
				"You won't be able to change the flower color by changing the entity type, I'm afraid."
				"All those flowers should have almost identical values, I imagine. Try to change a value they don't have in common."
			};
		} else if ("hint-tracking" == 80) {
			show dialog {
				PLAYER "According to Bert, a small child needs help."
				SELF "Not many kids around here -- apart from the kids, of course, by which I mean the goats."
				"But Bert probably means the smith's son. Or... was Smith the man's name? Oh, dear. Was it his name AND his occupation?"
				PLAYER "I've always called him Mr. Smith."
				SELF "Oh, that's right. He's your next-door neighbor, isn't he?"
			};
		} else if ("hint-tracking" == 81) {
			show dialog {
				PLAYER "This kid...."
				"He's just running around in circles, saying he wants to grow up to be some kind of sports ball."
				SELF "If that's what he wants, that's what he wants."
				PLAYER "Yeah, but... that's not really fixing something that's broken, though, is it?"
				"He's a living person, but if I change him into an inanimate object...."
				"Does he cease to be alive? Or a human being? What if he can't breathe anymore?"
				"What happens to his mind? His memories? If the ball doesn't have a brain, does it all go away if I change what he is?"
				"Even if he WANTS to become a ball...."
				"I mean, do I have that right? Does this stray too much into me playing God?"
				"Don't I have a moral responsibility to avoid causing harm to those around me?"
				SELF "If you turn him into a ball, will that harm him?"
				PLAYER "I don't know. Will it?"
				SELF "Everything you see around you is pixels and data. All ones and zeroes."
				"Are any of us really alive? If you change something, does that change what fundamentally lies underneath, or only how it appears?"
				"If life is a game, and you do something immoral you can immediately revert if you wish, with no one the wiser, is it truly an immoral act?"
				"Wouldn't that simply be considered part of the game you are playing? Why would such an act speak ill of your character?"
				PLAYER "Wouldn't it?"
				"The way we behave when no one is looking... doesn't that say more about our character than anything else?"
				SELF "These are questions for philosophers and gamers. All we mortals can do is fulfill a child's wish to become sports equipment."
			};
		} else if ("hint-tracking" == 90) {
			show dialog {
				PLAYER "Bert says I have to help Beatrice. But I already solved her problem!"
				SELF "Did you? Or did you only give her the opportunity to rememeber something she had forgotten about her husband?"
			};
		} else if ("hint-tracking" == 91) {
			show dialog {
				PLAYER "Now Beatrice wants her husband to turn back into a sheep."
				SELF "She must have gotten sick of his yammering again."
				"Ah, well. You know what to do by now."
			};
		} else if ("hint-tracking" == 100) {
			show dialog {
				PLAYER "Apparently the goose is mad."
				SELF "Is this news?"
				"In all seriousness, you might want to check whether the goose is mad at something specific or the world at large."
			};
		} else if ("hint-tracking" == 101) {
			show dialog {
				PLAYER "I think the goose wants me to move the rake."
				"Perhaps... into the lake?"
				SELF "Likely. You'll need to change the rake's Y coordinates."
				"But just so you know, each coordinate actually spans two bytes, and if the distance is great enough, you'll have to change both."
			};
		} else if ("hint-tracking" == 110) {
			show dialog {
				PLAYER "I'm looking for a goat-watching goddess."
				SELF "Ah, the winged Belldandy."
				"Or... no, that wasn't it. It was Verd... Verth...."
				"...Um, regardless... it's true that she's fond of animals. She might very well be watching the goats today."
				"Though they might not look like goats at the moment."
			};
		} else if ("hint-tracking" == 111) {
			show dialog {
				PLAYER "How do I unscramble someone's pixels?"
				SELF "I think there was something in the Entity books about that, but I didn't quite understand."
				"Something about changing a bit instead of a byte, I think...."
				"But aren't all bytes made up of bits? How is changing a single bit different from changing a whole byte?"
			};
		} else if ("hint-tracking" == 201) {
			goto "show_dialog-jackob-hint-hackbook "// JUMP
		} else {
			show dialog {
				PLAYER "Not at the moment."
				SELF "Well, then, here's a general hint:"
				"If you've hacked things so badly you're not sure how you could possibly straighten things out again...."
				"Walk through a door. The world will right itself."
			};
		}
	}
}

"show_dialog-jackob-hint-hackbook" {
	if ("hackbook-endstory") {
		show dialog {
			PLAYER "About that glitched-out book...."
			SELF "I'm sorry. I don't think there's anything you can do to fix it."
		};
		if ("hint-tracking" == 201) {
			copy!("set-hint-none")
		}
	} else {
		show dialog {
			PLAYER "Well... I found this book in the inner sanctum, and I had a question about it."
			SELF "Of course. What do you want to know?"
			PLAYER "You see, it's a book about the Big Bad, but the words inside are all scrambled up."
			SELF "I see."
			"Perhaps that's something the Big Bad did. It would be logical for him to hide information about himself."
			PLAYER "But what can I do to get the book back to normal?"
			SELF "The Big Bad had powers beyond what you can do with that ring alone, %PLAYER%."
			"I suspect it's something even Ring Zero cannot fix."
			PLAYER "Do you know what the book used to say, at least?"
			SELF "That book... I must have read it before, but...."
		};
		player_control = off;
		wait 600ms; /**/ self direction += 1;
		wait 1200ms; /**/ self direction -= 2;
		wait 600ms;
		show dialog { SELF "...." };
		wait 400ms; /**/ self direction = player;
		wait 400ms; /**/ player_control = on;
		show dialog {
			SELF "Oh, %PLAYER%, I'm sorry."
			"I can't remember anything about what the book said."
		};
		if ("ch1_finished") {
			show dialog {
				SELF "I doubt there was much in there that would've helped you in a confrontation with him, though."
			};
		} else {
			show dialog {
				SELF "I suppose it doesn't matter, either way. The Big Bad is gone, perhaps for good."
			};
		}
		show dialog {
			PLAYER "But the Big Bad's name used to be in that book!"
			"It made me realize that I've never heard his name before. Not once!"
			"Do you know what his name is?"
	
			SELF "...."
			"I must have known it, once."
			"But...."
			"I can't remember."
			"I'm sorry, %PLAYER%."
		};
		"hackbook-endstory" = true;
	}
	// RESET
	self on_interact = "show_dialog-jackob-start";
}

"show_dialog-alfonso-start" {
	if (self glitched) {
		show dialog { SELF "Cdl iwpi'h fjxit jcctrthhpgn!" };
	} else if ("ch1_finished") {
		show dialog { SELF "Congratulations! You fixed the town!" };
	} else {
		copy!("ch1-count-flags")
		show dialog { SELF "You've completed $ch1-storyflags-tally$ out of 11 tasks." };
		if ("ch1-storyflags-tally" == 0) {
			show dialog { SELF "Uh...." "Nowhere to go now but up!" };
		} else if ("ch1-storyflags-tally" == 1) {
			show dialog { SELF "That's the spirit! What a great start!" };
		} else if ("ch1-storyflags-tally" <= 4) {
			show dialog { SELF "You're getting the hang of this!" };
		} else if ("ch1-storyflags-tally" <= 8) {
			show dialog { SELF "Oh, my! You're getting a lot of work done! Marvelous!" };
		} else if ( "ch1-storyflags-tally" <= 10) {
			show dialog { SELF "Wow! You're nearly done!" };
		} else if ("ch1-storyflags-tally" == 11) {
			show dialog { SELF "Incredible! You've done everything on my list!" };
			goto "demoend-cutscene"; // JUMP
		}
	}
}

"on_tick-credits" {
	hex_control = off;
	player_control = on;
	player direction = south;
	camera = entity "cameraman" position;
	entity "cameraman" position = geometry "credits_camera";
	camera fade in -> #000000 over 400ms;
	wait 1200ms;
	entity "Goat" current_animation = 1;
	entity "cameraman" position -> geometry "credits_camera" length over 60000ms;
	wait 600ms;
	entity "Cat" animation -> 2 once;
	wait 300ms;
	camera fade out -> #000000 over 1200ms;
	warp_state = "exit_from-credits";
	hex_control = on;
	if ("credits-from-menu") {
		load map "main_menu";
	}
	load map "main";
}

"on_tick-family" {
	if (player intersects geometry "door-family") {
		goto "leave-family";
	}
}

"kid-ballwatch" {
	if (entity "Kid" type == "blitzball") {
		goto "kid-now-ball";
	}
}

"kid-now-ball" {
	"storyflag-sportskid" = true;
	copy!("calculate-hint-tracking-series")
	if ("hint-tracking-check" == 8) {
		copy!("set-hint-none")
	}
	goto "null_script";
}

"on_load-family" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if ("storyflag-sportskid") {
		entity "Kid" type = "blitzball";
	}
}

"show_dialog-kid" {
	player on_tick = "watch-kid";
	if (self glitched) {
		show dialog {
			SELF "Stb N'r ns fstymjw inrjsxnts!"
		};
	} else if (entity "Kid" type == "blitzball") {
		show dialog "dialog-kid-ball" {
			SELF "I'm the wind! Whoosh!"
		};
	} else {
		show dialog {
			SELF "I'm gonna be a Blitzball when I grow up!"
		};
		copy!("set-hint-sportskid")
	}
	// RESET
	player on_tick = "null_script";
	self on_interact = "show_dialog-kid";
}

"show_dialog-smith" {
	if (self glitched) {
		show dialog { SELF "Naa, ptl matm lttz itgxxk, hk lxz ytnem itgxxk?" };
	} else {
		entity "Smith" direction = player;
		if ("smith-backstory") {
			show dialog { SELF "Real talk, don't eat memory leek soup. It'll mess with your head." };
		} else {
			show dialog {
				SELF "What's for dinner?"
				"Memory leek soup!"
				"...."
				"...Nah, just kidding. It's saag paneer."
			};
			"smith-backstory" = true;
		}
		entity "Smith" direction = east;
	}
	// RESET
	self on_interact = "show_dialog-smith";
}

"billy-glitchwatch" {
	if (!entity "Billy" glitched) {
		goto "billy_now_unglitched";
	}
}

"kid-glitchwatch" {
	if (!entity "Kid" glitched) {
		goto "kid_now_unglitched";
	}
}

"check_if_player_is_goat_high" {
	if (player intersects geometry "high") {
		goto "move_goats_to_low";
	}
}

"check_if_player_is_goat_low" {
	if (player intersects geometry "low") {
		goto "move_goats_to_high";
	}
}

"show_dialog-verthandi-glitched" {
	if ("glitch-lesson") {
		goto "show_dialog-verthandi-glitched-q";
	}
	show dialog {
		SELF "Oh! It looks like you would like a lesson on glitched entities! Please allow me to explain."
	};
	goto "show_dialog-verthandi-glitched-lesson";
}

"show_dialog-verthandi-start" {
	copy!("face-player")
	if (self glitched) {
		goto "show_dialog-verthandi-glitched"; // JUMP
	}
	if ("storyflag-verthandi") {
		show dialog { SELF "Thank you for everything you've done!" };
	} else {
		// find unglitch count
		"unglitch_count" = 0;
		if ("goldfish-unglitched") { "unglitch_count" += 1; }
		if ("timmy-unglitched") { "unglitch_count" += 1; }
		if ("fountain-unglitched") { "unglitch_count" += 1; }
		if ("lodge_cat-unglitched") { "unglitch_count" += 1; }
		if ("billy-unglitched") { "unglitch_count" += 1; }
		if ("kid-unglitched") { "unglitch_count" += 1; }
		if ("main_hamster-unglitched") { "unglitch_count" += 1; }
		"total_glitches" = 7;
		"total_glitches" -= "unglitch_count";
		// use unglitch count
		if ("total_glitches" == 0) {
			if (!"verthandi-backstory") {
				show dialog {
					SELF "Oh! It appears you've already restored everyone that was glitched!"
					"How wonderful! I can't thank you enough!"
				};
			} else {
				show dialog {
					SELF "You've restored everyone! Oh, how wonderful!"
					"Oh, thank you, %PLAYER%!"
				};
			}
			copy!("calculate-hint-tracking-series")
			if ("hint-tracking-check" == 11) {
				copy!("set-hint-none")
			}
			"storyflag-verthandi" = true;
			"goats-both-unglitched" = true;
		} else if ("verthandi-backstory") {
			if ("goats-both-unglitched") {
				if ("total_glitches" == 1) {
					show dialog { SELF "I hear one more glitched soul that needs help!" };
				} else {
					show dialog { SELF "I can hear the cries of $total_glitches$ glitched souls...." };
				}
				if (!"timmy-unglitched" || !"lodge_cat-unglitched") {
					show dialog { SELF "Perhaps... somewhere in the library?" };
				} else if (!"main_hamster-unglitched" || !"fountain-unglitched") {
					show dialog { SELF "Perhaps... somewhere outdoors?" };
				} else if (!"goldfish-unglitched") {
					show dialog { SELF "Perhaps... somewhere in your home?" };
				}
			} else if (entity "Billy" glitched || entity "Kid" glitched) {
				show dialog { SELF "Oh, won't you help the baby goats?" };
			} else {
				show dialog {
					SELF "You've restored the baby goats! Oh, thank you!"
					"But I still hear cries for help elsewhere in town. Please, can you help?"
				};
				"goats-both-unglitched" = true;
			}
			copy!("set-hint-glitch")
		} else {
			show dialog {
				SELF "Some time ago, the Big Bad brought chaos to this place."
				"To amuse himself, he scrambled the outward appearance of many of the people, animals, and objects around town."
			};
			if (entity "Billy" glitched || entity "Kid" glitched) {
				show dialog {
					SELF "These dear baby goats were among his many victims."
					"They are so young, and so full of life.... yet you cannot even hear their cheerful bleats!"
					"You have been blessed with the power to undo what had been done to them. Would you please help them?"
				};
			} else {
				show dialog {
					SELF "These dear baby goats are back to normal, but I still hear cries for help elsewhere in town."
					"There is more to unglitch! Please, will you set things right?"
				};
				"goats-both-unglitched" = true;
			}
			"verthandi-backstory" = true;
			copy!("set-hint-glitch")
		}
	}
	goto "show_dialog-verthandi-wrapup";
}

"show_dialog-goat" {
	if (self glitched) {
		show dialog { SELF "ba15456`-------++++++gf\n+++++-//==========/*8901ikg" };
	} else {
		show dialog { SELF "Baaahhh!" };
	}
	if (!"goats-both-unglitched") {
		copy!("set-hint-glitch")
	}
	self on_interact = "show_dialog-goat";
}

"on_tick-goose-mission" {
	// on_tick is 'mission' -- if rake not in lake, jump
	if (!entity "Rake" intersects geometry "lake") {
		goto "on_tick-goose-mission-rake-out-of-lake";
	}
	entity "Goose" direction = south;
	entity "Goose" current_animation = 0;
	"storyflag-rake" = true;
	copy!("calculate-hint-tracking-series")
	if ("hint-tracking-check" == 10) {
		// if the hint series is the currently goose, reset hint
		copy!("set-hint-none")
	}
	// you win!
	goto "null_script";
}

"on_tick-goose-mission-rake-out-of-lake" {
	// if rake is approx at start point, jump
	if (entity "Rake" intersects geometry "rake-point") {
		goto "goose-misison-rake-on-rake-point";
	}
	entity "Goose" direction = south;
	copy!("honk")
	entity "Goose" position -> geometry "goose_midpoint" origin over 600ms;
	entity "Goose" position -> geometry "goose_lakepoint" origin over 600ms;
	entity "Goose" direction = south;
	goto "on_tick-goose-mission";
}

"goose-misison-rake-on-rake-point" {
	// if rake has left its start point, jump
	if (!entity "Rake" intersects geometry "rake-point") {
		goto "on_tick-goose-mission-rake-out-of-lake";
	}
	entity "Goose" direction = south;
	copy!("honk")
	entity "Goose" position -> geometry "goose_rakepoint" origin over 1200ms;
	entity "Goose" direction = entity "Rake";
	// if rake has left its start point, jump
	if (!entity "Rake" intersects geometry "rake-point") {
		goto "on_tick-goose-mission-rake-out-of-lake";
	}
	copy!("honk")
	entity "Goose" position -> geometry "goose_lakepoint" origin over 1200ms;
	entity "Goose" direction = south;
	// if rake has left its start point, jump
	if (!entity "Rake" intersects geometry "rake-point") {
		goto "on_tick-goose-mission-rake-out-of-lake";
	}
	goto "on_tick-goose-mission";
}

"goose-bounds-watch" {
	if (!entity "Goose" intersects geometry "bounds") {
		goto "rescue-goose";
	}
}

"show_dialog-goose-mad" {
	show dialog { SELF "Honk!" };
	if (!"storyflag-rake") {
		copy!("set-hint-goose")
	}
	// RESET
	self on_interact = "show_dialog-goose-mad";
}

"on_load-greenhouse" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if ("storyflag-trekkie") {
		copy!("ch1-ethernettle-restore")
	}
}

"on_tick-greenhouse" {
	if (player intersects geometry "door-greenhouse") {
		goto "leave-greenhouse";
	}
	if (!entity "EtherNettle1" intersects geometry "EtherNettle1Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle2" intersects geometry "EtherNettle2Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle3" intersects geometry "EtherNettle3Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle4" intersects geometry "EtherNettle4Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle5" intersects geometry "EtherNettle5Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle6" intersects geometry "EtherNettle6Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle7" intersects geometry "EtherNettle7Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
	if (!entity "EtherNettle8" intersects geometry "EtherNettle8Origin") {
		goto "show_dialog-no_uproot_ethernettle";
	}
}

"show_dialog-trekkie-start" {
	copy!("clear-own-tick")
	copy!("face-player")
	if (self glitched) {
		show dialog { SELF "Hu bu. Qvq zr trg n ivehf?" };
	} else if ("storyflag-trekkie") {
		copy!("ch1-greenhouse-trekkie-aftermath")
	} else if (
		entity "EtherNettle1" secondary_id != 3 // orange-white
		|| entity "EtherNettle2" secondary_id != 2 // orange
		|| entity "EtherNettle3" secondary_id != 7 // green-white
		|| entity "EtherNettle4" secondary_id != 0 // blue
		|| entity "EtherNettle5" secondary_id != 1 // blue-white
		|| entity "EtherNettle6" secondary_id != 6 // green
		|| entity "EtherNettle7" secondary_id != 5 // brown-white
		|| entity "EtherNettle8" secondary_id != 4 // brown
	) {
		if ("trekkie-backstory") {
			copy!("ch1-greenhouse-trekkie-backstory-reminder")
		} else {
			copy!("ch1-greenhouse-trekkie-backstory-cutscene")
		}
	} else {
		copy!("ch1-greenhouse-modem-turning-on-cutscene")
		if ("hint-tracking-check" == 7) {
			copy!("set-hint-none")
			// ^^ if the hint series is the same, reset hint
		}
	}
	self on_interact = "show_dialog-trekkie-start";
}

"show_dialog-ethernettle-start" {
	if (self secondary_id == 3) {
		show dialog { PLAYER "White-orange." };
	} else if (self secondary_id == 2) {
		show dialog { PLAYER "Orange." };
	} else if (self secondary_id == 7) {
		show dialog { PLAYER "White-green." };
	} else if (self secondary_id == 0) {
		show dialog { PLAYER "Blue." };
	} else if (self secondary_id == 1) {
		show dialog { PLAYER "White-blue." };
	} else if (self secondary_id == 6) {
		show dialog { PLAYER "Green." };
	} else if (self secondary_id == 5) {
		show dialog { PLAYER "White-brown." };
	} else if (self secondary_id == 4) {
		show dialog { PLAYER "Brown." };
	}
	self on_interact = "show_dialog-ethernettle-start";
}

"on_load-lodge" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if (!"tuesday-walkedup") {
		entity "Aunt Zippy" animation_frame = 3;
		// JUMP
		goto "cutscene-tuesday";
	}
	// otherwise, set up the room
	if ("hide-lodge-crowd-mini") {
		entity "Bookcase" current_animation = 3; // down animation
		copy!("empty-lodge-mini")
	}
	if ("hide-lodge-crowd") {
		// because there's a tiny window where you might reload map "after elders leave but before crowd does"
		entity "Bookcase" current_animation = 3; // down animation
		copy!("empty-lodge")
	}
	if ("lodge_cat-unglitched") {
		// this is not set to check 'tuesdayd' because you might want the crowd inside and otherwise leave the tuesday cutscene inert
		entity "Cat" glitched = false;
	}
	if ("timmy-unglitched") {
		entity "Timmy" glitched = false;
	}
	if (warp_state == "exit_from-secretroom") {
		player_control = off;
		player position -> geometry "enter_from-secretroom" length over 200ms;
		player_control = on;
	}
	if ("demobonus-timmy-yell" || !"demobonus") {
		goto "null_script";
	}
	player_control = off;
	wait 200ms;
	player_control = on;
	show dialog {
		Timmy "Hey! Hey! My book!"
	};
	"demobonus-timmy-yell" = true;
	goto "null_script";
}

"on_tick-lodge" {
	// if TUESDAY finished, jump to the long-term script
	if ("tuesdayd") {
		goto "on_tick-tuesdayd";
	}
	// otherwise, watch the main door and "bounce"
	if (player intersects geometry "door-lodge") {
		goto "show_dialog-lodge-cantleaveyet";
	}
}

"on_tick-tuesdayd" {
	if (player intersects geometry "door-lodge") {
		goto "leave-lodge";
	}
}

"on_tick-lodge-goose" {
	if ("ring-acquired") {
		goto "on_tick-lodge-goose-ring-acquired";
	}
}

"on_tick-lodge-goose-ring-acquired" {
	if (player intersects geometry "door-secretdoor") {
		goto "enter-secretroom";
	}
}

"lodge_cat-glitchwatch" {
	if (!self glitched) {
		goto "lodge_cat_now_unglitched";
	}
}

"timmy-glitchwatch" {
	if (!self glitched) {
		goto "timmy_now_unglitched";
	}
}

"show_dialog-zippy-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "We always knew you were destined for great things!" };
	} else {
		show dialog { SELF "Go ahead, dear!" };
	}
}

"show_dialog-zappy-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "We're both so proud of you!" };
	} else {
		show dialog { SELF "Take your time!" };
	}
}

"show_dialog-verthandi-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Oh, how exciting!" };
	} else {
		show dialog { SELF "Oh, how exciting!" };
	}
	// yeah, she says the same in both cases
	// accident? or just unimaginative Belldandy?
}

"show_dialog-smith-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Sounds like that ring is a big deal." "Neat." };
	} else {
		show dialog { SELF "Don't look at me! I don't know how any of this stuff works!" };
	}
}

"show_dialog-max-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Hmm. That ring looks a bit too plain to be the real Ring Zero, doesn't it?" };
	} else {
		show dialog { SELF "Hmm. I've seen better artifacts." };
	}
}

"show_dialog-marta-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Wow. Never seen a TUESDAY like this before!" };
	} else if ("artifact-broom-touched") {
		show dialog { SELF alignment BL "I knew I recognized this broom!" };
	} else {
		show dialog { SELF "One of those artifacts seems a little familiar to me...." };
	}
}

"show_dialog-trekkie-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Amazing!" };
	} else {
		show dialog { SELF "Oh, me hope it's a good one!" };
	}
}

"show_dialog-shepherd-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Neat!" };
	} else {
		show dialog { SELF "Is that old junk really magic?" };
	}
}

"show_dialog-cleo-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "It looks so shiny!" };
	} else {
		show dialog { SELF "Ooh! I bet it's gonna be the one on the left! No, the right! No, the second one!" };
	}
}

"show_dialog-beatrice-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Oh! I never thought I'd see this day! Oh, my Delmar...!" };
	} else {
		show dialog { SELF "It's been so long since we've had a new mage!" };
	}
}

"show_dialog-baker-prechoose" {
	copy!("face-player")
	if ("ring-acquired") {
		show dialog { SELF "Congratulations, %PLAYER%!" };
	} else {
		show dialog { SELF "Um, I gotta get back to work, kid. You wanna hurry it up a little?"};
	}
}

"artifacts-eval" {
	if ( // if any of the artifacts are still untouched
		!"artifact-bracelet-touched"
		|| !"artifact-broom-touched"
		|| !"artifact-glasses-touched"
		|| !"artifact-wand-touched"
		|| !"artifact-book-touched"
	) {
		show dialog { PLAYER "Maybe a different artifact?" };
		// "bad" eval artifacts will get stuck here; that's fine
		// (no reset)
	} else {
		// all artifacts have been touched:
		show dialog {
			PLAYER "Maybe a different artifact?"
			"Wait. Was that the last one?"
		};
		player on_tick = "look-left-and-right-fast";
		player_control = off;
		wait 900ms;
		player on_tick = "null_script";
		copy!("lodge-murmur")
		goto "player-ringzero-landing";
	}
	self on_interact = "artifacts-eval";
}

"player-ringzero-landing" {
	wait 200ms;
	if (player intersects geometry "ringzero-walk-6-donut") {
		player position -> geometry "ringzero-landing-6" origin over 200ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-6") {
		player position -> geometry "ringzero-landing-6" origin over 300ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-1159") {
		player position -> geometry "ringzero-landing-10" origin over 600ms;
		copy!("player-ringzero-from-landing-10")
	} else if (player intersects geometry "ringzero-walk-1130") {
		player position -> geometry "ringzero-landing-10" origin over 300ms;
		copy!("player-ringzero-from-landing-10")
	} else if (player intersects geometry "ringzero-walk-11") {
		player position -> geometry "ringzero-landing-10" origin over 100ms;
		copy!("player-ringzero-from-landing-10")
	} else if (player intersects geometry "ringzero-walk-10") {
		player position -> geometry "ringzero-landing-8" origin over 400ms;
		copy!("player-ringzero-from-landing-8")
	} else if (player intersects geometry "ringzero-walk-9") {
		player position -> geometry "ringzero-landing-8" origin over 200ms;
		copy!("player-ringzero-from-landing-8")
	} else if (player intersects geometry "ringzero-walk-8") {
		player position -> geometry "ringzero-landing-6" origin over 500ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-7") {
		player position -> geometry "ringzero-landing-6" origin over 250ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-5") {
		player position -> geometry "ringzero-landing-6" origin over 250ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-4") {
		player position -> geometry "ringzero-landing-6" origin over 500ms;
		goto "cutscene-artifacts-eval-good";
	} else if (player intersects geometry "ringzero-walk-3") {
		player position -> geometry "ringzero-landing-4" origin over 200ms;
		copy!("player-ringzero-from-landing-4")
	} else if (player intersects geometry "ringzero-walk-2") {
		player position -> geometry "ringzero-landing-4" origin over 400ms;
		copy!("player-ringzero-from-landing-4")
	} else if (player intersects geometry "ringzero-walk-1") {
		player position -> geometry "ringzero-landing-1" origin over 100ms;
		copy!("player-ringzero-from-landing-1")
	} else if (player intersects geometry "ringzero-walk-1230") {
		player position -> geometry "ringzero-landing-1" origin over 300ms;
		copy!("player-ringzero-from-landing-1")
	} else if (player intersects geometry "ringzero-walk-1201") {
		player position -> geometry "ringzero-landing-1" origin over 600ms;
		copy!("player-ringzero-from-landing-1")
	}
	goto "cutscene-artifacts-eval-good";
}

"show_dialog-lodge_cat" {
	copy!("face-player")
	if (self glitched) {
		show dialog { SELF "////////" };
		if (!"lodge_cat-unglitched") {
			copy!("set-hint-glitch")
		}
	} else if (
		"storyflag-catwork"
		|| !"white-cat"
	) {
		show dialog { SELF "...." };
	} else { // if storyflag-catwork is TRUE && flag white-cat is TRUE
		player_control = off;
		// thumbs up:
		entity "Cat" animation -> 3 once;
		entity "Cat" current_animation = 4;
		// change player:
		wait 700ms;
		player type = "pipscat";
		wait 400ms;
		// thumbs back down:
		entity "Cat" animation -> 5 once;
		player_control = on;
	}
}

"show_dialog-timmy-start" {
	copy!("face-player")
	if (self glitched) {
		show dialog { SELF alignment TL "Ner ubg qbtf n fnaqjvpu?" };
		self direction = west;
		if (!"timmy-unglitched") {
			copy!("set-hint-glitch")
		}
	} else if (!"demobonus") { // if you haven't won ch1 yet
		if ("timmy-endstory") {
			show dialog {
				SELF alignment TL "I've been trying to find books about the olympics."
				"Gosh, it'd be cool if I could get a gold medal for the high jump!"
				"I can jump, like, SO high!"
			};
		} else {
			show dialog {
				SELF alignment TL "Oh, how lovely! It's much easier to read like this!"
			};
			"timmy-endstory" = true;
		}
	} else if (!"demobonus-sportsbook-read") { // you HAVE won, but you've NOT read the extra page
		show dialog {
			SELF "There's this weird extra page in my book!"
		};
	} else { // you've won AND read the extra page
		show dialog {
			SELF "Oh! I think I've heard of Clippy Bird! My uncle let me play it on his phone this one time, ages ago."
			"He said it was a really rare game."
		};
	}
	self direction = west;
}

"show_dialog-sportsbook" {
	show dialog "dialog-sportsbook" {
		SELF alignment TL portrait journal
		"Sports sports sports. This book is about sports!"
		"Go, home team!"
	};
	if ("demobonus") {
		show dialog {
			name "Hex Edits 2" alignment TL portrait parchment
			"-- allows us to copy and paste bytes using something called a \"Clip Bird.\""
			"Pressing the circle button will copy a single byte into the Clip Bird, but if you hold circle, left and right will change the number of bytes to be copied."
			"Pressing square will paste the contents of the Clip Bird into the selected cell and thereafter."
			"This has dramatically improved our productivity!"
		};
		"demobonus-sportsbook-read" = true;
		hex_clipboard = on;
	}
}

"on_load-magehouse" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	"debug-mode" = true;
	// doc: this is legacy debug mode stuff -- used to hide/show exas with a save flag
	// if this flag isn't set to true, the exas will be whisked away
	if ("goldfish-unglitched") {
		entity "Mr. Tickles" glitched = false;
	}
	if (!"goodmorning") {
		player position = geometry "wakeup_spot";
		player direction = south;
		hex_control = off;
		hex_clipboard = off;
		camera fade in -> #000000 over 500ms;
	}
}

"on_tick-magehouse" {
	if (player intersects geometry "door-magehouse") {
		goto "leave-magehouse";
	}
	if (!"goodmorning") {
		goto "bedroom-door-watch";
	}
}

"bedroom-door-watch" {
	if (player intersects geometry "bedroom-door") {
		goto "goodmorning-cutscene";
	}
}

"goldfish-glitchwatch" {
	if (!self glitched) {
		goto "goldfish_now_unglitched";
	}
}

"show_dialog-zappy-start" {
	if (self glitched) {
		show dialog {
			SELF "Abj V srry rkgen mnccl!"
		};
	} else {
		copy!("face-player")
		show dialog {
			SELF "Did you remember to feed %Mr. Tickles% today?"
		};
	}
}

"show_dialog-zippy-start" {
	if (self glitched) {
		show dialog { SELF "Jbj, guvf srryf ernyyl jrveq! Vg erzvaqf zr bs guvf bar gvzr va pbyyrtr...." };
	} else {
		copy!("face-player")
		show dialog { SELF "How's your day going, %PLAYER%?" };
	}
}

"show_dialog-goldfish" {
	show dialog {
		PLAYER "Good morning, %Mr. Tickles%!"
	};
	if (!entity "Mr. Tickles" glitched) {
		show dialog {
			SELF portrait goldfish "(Glub, glub.)"
			PLAYER "Looking good!"
		};
	} else {
		show dialog {
			SELF portrait goldfish "(srrq zr guerr unzf)"
			PLAYER "Good ol' glitched-out fish."
		};
		if (!"goldfish-unglitched") {
			if ("ring-acquired") {
				copy!("set-hint-glitch")
			}
		}
	}
}

"on_load-map-main" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	// if you haven't started ch1 yet
	if (!"begunthegame") {
		"begunthegame" = true;
		hex_control = off;
		camera fade in -> #000000 over 1ms; 
		load map "magehouse";
	}
	// assuming you have ring zero
	hex_control = on;
	if ("storyflag-bobmoss") {
		entity "Bob Moss" position = geometry "catwalk-hide";
	} 
	if ("storyflag-rake") {
		copy!("rake-in-lake")
		entity "Goose" on_interact = "honk-to-make-rake-float";
	}
	if ("billy-unglitched") {
		entity "Billy" glitched = false;
	}
	if ("kid-unglitched") {
		entity "Kid" glitched = false;
	}
	if ("fountain-unglitched") {
		entity "Fountain" glitched = false;
	}
	if ("main_hamster-unglitched") {
		entity "Hamster" glitched = false;
	}
	if ("storyflag-shepherd") {
		copy!("sheep-in-pen")
	}
	if ("storyflag-bender") {
		copy!("bender-happybutt")
	}
	if (!"walked-to-lodge") {
		goto "walk-to-lodge";
	}
	player_control = off;
	if (!"hintman-explanation") {
		player position -> geometry "enter_from-lodge" length over 400ms; 
		copy!("hintman-cutscene") // see script-elders.json for this
		"hintman-explanation" = true;
	} else if (warp_state == "enter_from-east") {
		player position -> geometry "enter_from-east" length over 1000ms; 
	} else if (warp_state == "enter_from-west") {
		player position -> geometry "enter_from-west" length over 1000ms; 
	} else if (warp_state == "exit_from-bobsclub") {
		player position -> geometry "enter_from-bobsclub" length over 200ms; 
	} else if (warp_state == "exit_from-bakery") {
		player position -> geometry "enter_from-bakery" length over 200ms; 
	} else if (warp_state == "exit_from-lodge") {
		player position -> geometry "enter_from-lodge" length over 200ms; 
	} else if (warp_state == "exit_from-greenhouse") {
		player position -> geometry "enter_from-greenhouse" length over 200ms; 
	} else if (warp_state == "exit_from-magehouse") {
		player position -> geometry "enter_from-magehouse" length over 200ms; 
	} else if (warp_state == "exit_from-oldcouplehouse") {
		player position -> geometry "enter_from-oldcouplehouse" length over 200ms; 
	} else if (warp_state == "exit_from-family") {
		player position -> geometry "enter_from-family" length over 200ms; 
	} else if (warp_state == "exit_from-woprhouse") {
		player position -> geometry "enter_from-woprhouse" length over 200ms; 
	} else if (warp_state == "exit_from-credits") {
		player position = geometry "from-credits-spot";
		camera fade in -> #000000 over 800ms;
		player_control = on;
		if (!"ch1_finished") {
			goto "null_script";
		}
		if (!"storyflag-catwork") {
			goto "null_script";
		}
		if (!"storyflag-shepherd") {
			goto "null_script";
		}
		if (!"storyflag-bender") {
			goto "null_script";
		}
		if (!"storyflag-baker") {
			goto "null_script";
		}
		if (!"storyflag-bobmoss") {
			goto "null_script";
		}
		if (!"storyflag-bea1") {
			goto "null_script";
		}
		if (!"storyflag-trekkie") {
			goto "null_script";
		}
		if (!"storyflag-sportskid") {
			goto "null_script";
		}
		if (!"storyflag-bea2") {
			goto "null_script";
		}
		if (!"storyflag-rake") {
			goto "null_script";
		}
		if (!"storyflag-verthandi") {
			goto "null_script";
		}
		if ("demobonus-jackob-informed") {
			goto "null_script";
		}
		"demobonus" = true;
		// ^^ set now because all story flags and credits confirmed true; use this flag for same check hereafter
		show dialog {
			Jackob "While you were gone, I saw an odd flash of light coming from the library."
			"You might want to investigate."
		};
		"demobonus-jackob-informed" = true;
	}
	player_control = on;
}

"fountain-glitchwatch" {
	if (!self glitched) {
		goto "fountain_now_unglitched";
	}
}

"hamster-glitchwatch" {
	if (!self glitched) {
		goto "hamster_now_unglitched";
	}
}

"cat-watch" {
	if (!entity "Cat" intersects geometry "cat-watch-box") {
		goto "cat-rescue-protocol";
	}
}

"cleo-watch" {
	if (!entity "Cleo" intersects geometry "cleo-watch-box") {
		goto "cleo-rescue-protocol";
	}
	// WARNING!! if you change who is watching, change who to null_script for the walk-to-lodge cutscene!!!
}

"on_tick-main" {
	if (player intersects geometry "door-bakery-entrance") {
		goto "load_map-bakery";
	}
	if (player intersects geometry "door-family-entrance") {
		goto "load_map-family";
	}
	if (player intersects geometry "door-greenhouse-entrance") {
		goto "load_map-greenhouse";
	}
	if (player intersects geometry "door-magehouse-entrance") {
		goto "load_map-magehouse";
	}
	if (player intersects geometry "door-lodge-entrance") {
		goto "load_map-lodge";
	}
	if (player intersects geometry "door-oldcouplehouse-entrance") {
		goto "load_map-oldcouplehouse";
	}
	if (player intersects geometry "door-woprhouse-entrance") {
		goto "load_map-woprhouse";
	}
	if (player intersects geometry "door_to-town-east") {
		goto "wrap_from-west";
	}
	if (player intersects geometry "door_to-town-west") {
		goto "wrap_from-east";
	}
}

"fountain-interact" {
	if (!self glitched) {
		show dialog {
			PLAYER "This is fountain is awesome! I've always wanted to see it un-glitched!"
		};	
	} else {
		show dialog {
			PLAYER "This fountain has been glitched as long as I can remember, but now I have the chance to fix it!"
			"I just need to figure out how...."
		};
	}
	self on_interact = "fountain-interact";
}

"show_dialog-cleo1" {
	if (self glitched) {
		show dialog { Cleo "Uzz, V srry n ovg shaal." };
	} else {
		copy!("cat-and-cleo-convo-turn")
		show dialog {
			Cat "Meowrrow."
			Cleo "Oh, you don't say!"
			Cat "Meow!"
			Cleo "He didn't!"
		};
	}
	entity "Cleo" on_interact = "show_dialog-cleo2";
}

"show_dialog-cleo2" {
	if (self glitched) {
		show dialog { Cleo "Uzz, V srry n ovg shaal." };
	} else {
		copy!("cat-and-cleo-convo-turn")
		show dialog {
			Cat "Meowwowow."
			Cleo "That's what I've been saying this whole time!"
			Cat "Meowwrrrr!"
			Cleo "Oh, I know!"
		};
	}
	entity "Cleo" on_interact = "show_dialog-cleo1";
}

"show_dialog-cat" {
	if (self glitched) {
		show dialog { Cat "...." };
	} else if ("hint-tracking" == 61 || "hint-tracking" == 62) {
		show dialog {
			PLAYER alignment TR
			"Excuse me. I'm looking for the cat boss. Is that you?"
		};
		copy!("turn-padding-start")
		copy!("cat-and-cleo-convo-turn-player")
		show dialog {
			Cat "...."
			Cleo "Cat boss?"
			PLAYER alignment TR "Yeah. The construction crew needs a thumbs up."
			Cleo "Well, the cat boss is very busy right now."
			PLAYER alignment TR "But the crew --"
			Cat "Meowrrow!"
			Cleo "Yeah, get some other white cat to do the thumbs up!"
		};
		if (player type == "pipscat") {
			show dialog {
				PLAYER alignment TR
				"Some other white cat? Seriously?"
				"You mean me?"
			};
		} else {
			show dialog {
				PLAYER alignment TR
				"But... where else am I gonna find a white cat?"
			};
		}
		copy!("cat-and-cleo-convo-turn")
		copy!("turn-padding-end")
		copy!("set-hint-max-from-cleo")
		"white-cat" = true;
	} else { // normal conversation
		show dialog {
			PLAYER alignment TR "Hey there, cat!"
		};
		copy!("turn-padding-start")
		copy!("cat-and-cleo-convo-turn-player")
		show dialog {
			Cat "...."
			Cleo "Excuse me, but we were in the middle of a conversation."
			PLAYER alignment TR "Oh, sorry. Carry on."
		};
		copy!("cat-and-cleo-convo-turn")
		copy!("turn-padding-end")
	}
	self on_interact = "show_dialog-cat";
}

"show_dialog-hamster-start" {
	copy!("face-player")
	if (self glitched) {
		show dialog {
			SELF "Mxqj'i jxyi? Q mehbtmytu iybysed ixehjqwu?!"
		};
		if (!"main_hamster-unglitched") {
			copy!("set-hint-glitch")
		}
	} else if ("hamster-endstory") {
		show dialog {
			SELF "Did you know that all electronics are powered by angry pixies?"
			"The trick is to keep the pixies angry. If the pixies aren't angry, then they start to get complacent, and that's when your battery dies!"
		};
		self animation -> 2 twice;
	} else {
		show dialog {
			SELF "Ah, that's better."
			"It was real rough wrangling angry pixies with discombobulated pixel hands."
		};
		"hamster-endstory" = true;
	}
	self on_interact = "show_dialog-hamster-start";
}

"show_dialog-marta-start" {
	entity "Marta" direction = player;
	if (self glitched) {
		show dialog {
			SELF "Jpd, hp rpe te! Jzf slnv!"
		};
	} else if (entity "Marta" type != "marta_broom") {
		show dialog {
			SELF "...." "That's cheating."
		};
	} else if (!"marta-backstory") {
		show dialog {
			SELF "It's true. I can fly. It's not a trick."
			"I had my TUESDAY a few years ago, and this\nbroom chose me."
			"I'm one of the last mages to gain an\nartifact in a while. It's kind of nice\nthere's finally another."
			"Though your powers seem more useful than\nmine. All I can do is fly!"
			PLAYER "That's still pretty cool!"
			SELF "It helps me deliver newspapers, I guess.\nCan't fix much else around here."
		};
		"marta-backstory" = true;
	} else {
		show dialog {
			SELF "Good luck."
		};
	}
	self on_interact = "show_dialog-marta-start";
}

"felix-loiter" {
	if ("storyflag-catwork") {
		goto "hiding-cat";
	}
	self direction = south;
	wait 2000ms; /**/ self direction = east;
	wait 800ms; /**/ self direction = west;
	wait 1200ms;
}

"deut-loiter" {
	if ("storyflag-catwork") {
		goto "hiding-cat";
	}
	self direction = west;
	wait 900ms; /**/ self direction = east;
	wait 900ms; /**/ self direction = south;
	wait 2400ms;
}

"bmurray-loiter" {
	if ("storyflag-catwork") {
		goto "hiding-cat";
	}
	self direction = south;
	wait 1800ms; /**/ self direction = north;
	wait 900ms; /**/ self direction = east;
	wait 1000ms;
}

"maru-loiter" {
	if ("storyflag-catwork") {
		goto "hiding-cat";
	}
	self direction = west;
	wait 1400ms; /**/ self direction = south;
	wait 1800ms; /**/ self direction = north;
	wait 400ms; /**/ self direction = east;
	wait 400ms;
}

"on_tick-max-neutral" {
	if ("storyflag-catwork") {
		goto "null_script";
	}
	if (player type == "pipscat") {
		goto "on_tick-max-catwatch";
	}
	entity "Felix" on_tick = "felix-loiter";
	entity "Maru" on_tick = "maru-loiter";
	entity "B. Murray" on_tick = "bmurray-loiter";
	entity "Deuteronomy" on_tick = "deut-loiter";
}

"on_tick-max-catwatch" {
	if (player type != "pipscat") {
		goto "on_tick-max-neutral";
	}
	entity "Felix" on_tick = "face-player";
	entity "Maru" on_tick = "face-player";
	entity "B. Murray" on_tick = "face-player";
	entity "Deuteronomy" on_tick = "face-player";
	if (player current_animation == 2) {
		goto "on_tick-max-thumbwatch";
	}
}

"on_tick-max-thumbwatch" {
	if (player intersects geometry "catwatch-zone") {
		goto "send-cats-to-work";
	}
	wait 2000ms;
}

"send-cats-to-work" {
	player_control = off;
	wait 1300ms;
	if (!entity "Felix" intersects geometry "felix-spot") {
		goto "show_dialog-max-crewmissing";
	}
	if (!entity "Deuteronomy" intersects geometry "deut-spot") {
		goto "show_dialog-max-crewmissing";
	}
	if (!entity "Maru" intersects geometry "maru-spot") {
		goto "show_dialog-max-crewmissing";
	}
	if (!entity "B. Murray" intersects geometry "bmurray-spot") {
		goto "show_dialog-max-crewmissing";
	}
	entity "Max Swagger" direction = player;
	entity "Max Swagger" animation -> 3 once;
	entity "Max Swagger" current_animation = 4;
	wait 500ms;
	show dialog {
		entity "Max Swagger"
		"Oh! Approval from the cat boss himself!"
		Felix "Yeah, all right. We're good to go."
		"Let's get started!"
	};
	wait 300ms;
	entity "Felix" on_tick = "cat-walking-to-work";
	wait 400ms;
	entity "Deuteronomy" on_tick = "cat-walking-to-work";
	wait 400ms;
	entity "Maru" on_tick = "cat-walking-to-work";
	wait 400ms;
	entity "B. Murray" on_tick = "cat-walking-to-work";
	wait 400ms;
	show dialog {
		entity "Max Swagger"
		"Brilliant! Now things can finally move forward!"
	};
	player_control = on;
	"storyflag-catwork" = true;
	entity "Max Swagger" animation -> 5 once;
	entity "Max Swagger" current_animation = 0;
	copy!("calculate-hint-tracking-series")
	if ("hint-tracking-check" == 6) {
		copy!("set-hint-none")
	}
	goto "null_script";
}

"show_dialog-felix" {
	if (self glitched) {
		show dialog {
			SELF "Sxas. T'gp mppy hzcvtyr dz slco T'x slwwfntyletyr!"
		};
	} else {
		copy!("set-hint-max")
		if (player type == "pipscat") {
			show dialog { SELF "Okay, boss. We good to go?" };
		} else {
			show dialog { SELF "Can't begin work until the boss approves the plans." };
		}
	}
}

"show_dialog-deut" {
	if (self glitched) {
		show dialog { SELF "Abj gung'f n gevc." };
	} else {
		copy!("set-hint-max")
		if (player type == "pipscat") {
			show dialog { SELF "Oh, good! You're here! Gonna give the thumbs up?" };
		} else {
			show dialog { SELF "The boss is usually pretty busy. Not sure where he is right now." };
		}
	}
}

"show_dialog-maru" {
	if (self glitched) {
		show dialog { SELF "Qisa." };
	} else if (player type == "pipscat") {
		show dialog { SELF "Meow?" };
	} else {
		// copy set-hint-max // absent from original; intentional? (probably not)
		show dialog { SELF "Meow." };
	}
}

"show_dialog-bmurray" {
	if (self glitched) {
		show dialog { SELF "Ib, hi... C ehyq nbun wunhcj qum vux!" };
	} else {
		copy!("set-hint-max")
		if (player type == "pipscat") {
			show dialog { SELF "So is it a yea or a nay? Go ahead, show us what you decided." };
		} else {
			show dialog { SELF "As much as I like to loaf around, I sure hope the boss'll get over here soon so we can start!" };
		}
	}
}

"show_dialog-max-start" {
	if (self glitched) {
		show dialog {
			SELF "Azr. Vm jvbyzl aolyl'k il huvaoly jvtwspjhapvu!"
		};
	} else if ("storyflag-catwork") {
		copy!("face-player")
		show dialog {
			entity "Max Swagger"
			"Finally! Now work on my fashion shop can progress!"
		};
	} else if (player type == "pipscat") {
		copy!("face-player")
		show dialog {
			entity "Max Swagger"
			"Oh! The cat boss, here at last!"
			"Come on, then! Press square to show us you approve of the plans!"
		};
		copy!("set-hint-max")
		"max-backstory" = true;
	} else if ("max-backstory") {
		copy!("face-player")
		show dialog {
			SELF "All the crew needs to begin now is a thumbs up from their boss!"
			"Where is that cat?"
		};
		copy!("set-hint-max")
	} else {
		player_control = off;
		wait 200ms;
		copy!("face-player")
		wait 400ms;
		show dialog {
			SELF "Ah, yes! I know you!"
			"You're the birthday mage!"
			PLAYER "I guess you could say that."
			SELF "Yes, yes!"
			"Well, you're invited to the grand opening of my new fashion shop!"
			PLAYER "Oh, neat!"
			SELF "...Next year!"
			PLAYER "What? Next year? Your shop isn't ready yet?"
			SELF "Oh, good heavens, no! Not yet!"
			"There's much more to do... so much more!"
			"The interior must be wallpapered and painted, and the new carpet cut and layed...."
			"The new furniture must be brought in from Copenhagen, and that could take weeks alone!"
			"But, of course, before any of that...."
		};
		wait 200ms;
		entity "Max Swagger" direction = entity "Felix";
		wait 400ms;
		show dialog {
			SELF "The CONSTRUCTION CREW must finish building the interior!!"
		};
		wait 200ms;
		copy!("face-player")
		wait 400ms;
		show dialog {
			SELF "They have everything they need to begin and yet they won't do any work!"
		};
		wait 200ms;
		camera -> geometry "camera-felix" origin over 800ms;
		wait 200ms;
		show dialog {
			Felix "No, we don't have everything."
			"We need the boss to sign off on the plans, first."
		};
		wait 200ms;
		camera -> player position over 800ms;
		wait 200ms;
		entity "Max Swagger" direction = entity "Felix";
		wait 400ms;
		show dialog {
			SELF "Yes, of course! Of course the boss must approve first!"
		};
		wait 200ms;
		copy!("face-player")
		wait 400ms;
		show dialog {
			SELF "But the boss is nowhere around!"
			"I gave him the plans days ago! What could possibly be taking so long?"
		};
		"max-backstory" = true;
		copy!("set-hint-max")
		player_control = on;
	}
}

"on_tick-oldcouplehouse" {
	if (player intersects geometry "door-oldcouplehouse") {
		goto "leave-oldcouplehouse";
	}
}

"leave-oldcouplehouse" {
	warp_state = "exit_from-oldcouplehouse";
	if ("storyflag-bea1") {
		"bea-sequel-branch" = true;
	}
	load map "main";
}

"on_load-oldcouplehouse" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if ("bea-sequel-branch") {
		if (!"storyflag-bea2") {
			copy!("make-delmar-man")
		}
	}
}

"show_dialog-delmar" {
	if (self glitched) {
		show dialog {
			SELF "Bu, qrne. V zhfg'ir fgbbq hc gbb snfg. Srry n ovg jbbml."
		};
	} else if (entity "Delmar" type != "old_man") {
		show dialog "dialog-dsheep";
	} else if ("bea-sequel-branch") {
		show dialog {
			SELF "...I tied an onion to my belt, which was the style at the time."
			"Now, to take the ferry cost a nickel, and in those days, nickels had pictures of bumblebees on 'em."
			"\"Gimme five bees for a quarter,\" you'd say. Now where were we?"
			"Oh, yeah. The important thing was that I had an onion on my belt, which was the style at the time."
			"They didn't have any white onions, because of the war. The only thing you could get was those big yellow ones...."
		};
	} else if ("storyflag-bea1") {
		show dialog {
			Delmar "Huh? What's goin' on? What'd I miss?"
		};
	} else {
		show dialog {
			SELF "Wha... huh?"
		};
	}
	entity "Delmar" on_interact = "show_dialog-delmar";
}

"show_dialog-bea-start" {
	if (self glitched) {
		show dialog { SELF "Ydy D ymjk ht bgvnnzn? Ocz rjmgy'n bjiz v wdo apuut." };
	} else {
		copy!("clear-own-tick")
		copy!("face-player")
		if (!"bea-sequel-branch") {
			goto "show_dialog-bea-part1";
		} else {
			goto "show_dialog-bea-part2";
		}
	}
	entity "Beatrice" on_interact = "show_dialog-bea-start";
}

"show_dialog-bea-part1" {
	if (!"storyflag-bea1") { // you did NOT beat part1
		if (entity "Delmar" type == "old_man") { // win condition met
			// currently no backstory/!backstory difference
			player_control = off;
			copy!("clear-own-tick")
			copy!("slow-stare-at-delmar")
			player_control = on;
			show dialog {
				SELF "Oh, %Delmar%, it's you! You're a man again! At last!"
				Delmar "Whazzat, %Beatrice%? Something seems different."
				SELF "Oh, it's my %Delmar%! Thank you, %PLAYER%!"
			};
			self direction = entity "Delmar";
			copy!("calculate-hint-tracking-series")
			if ("hint-tracking-check" == 4) {
				copy!("set-hint-none")
			}
			"bea1-backstory" = true;
			"storyflag-bea1" = true;
		} else { // win condition NOT met
			if (!"bea1-backstory") { // you did NOT hear the backstory
				if (entity "Delmar" type == "sheep "|| entity "Delmar" type == "helga") { // is sheep
					show dialog {
						SELF "Forty years ago, things were sure different."
						"I was a lot younger then, and my husband, %Delmar%...."
					};
					copy!("clear-own-tick")
					copy!("slow-stare-at-delmar")
					show dialog { SELF "My husband was a real man! Not a farm animal!" };
					copy!("slow-stare-at-player")
					player_control = on;
				} else { // is rando
					copy!("clear-own-tick")
					copy!("slow-stare-at-delmar")
					show dialog { SELF "Oh, %Delmar%! You're... oh...." };
					copy!("face-player")
					show dialog {
						SELF "Oh, goodness. Well, this isn't my %Delmar%, but I suppose it's nice he's not a sheep anymore, at least."
						"He's been a sheep for so long... well, I suppose it's been forty years."
					};
				}
				show dialog { // is sheep OR rando
					SELF "That ghastly hacker ruffian hacked him into a sheep on a whim!"
					"%Delmar% didn't even do anything to him!"
					"...Other than insult his character, and that of his mother."
					"...And eat his lunch."
					"...And cut his brake line."
					"The point is, child, that %Delmar%'s been stuck as a sheep ever since!"
					"But you, now that you have Ring Zero...."
					"You can make things right again, can't you?"
					"I miss my %Delmar%!"
					PLAYER "Make things right? Well, I can change what he looks like, anyway."
					SELF "That works for me!"
				};
				"bea1-backstory" = true;
			} else { // you DID hear the backstory (sheep or rando)
				show dialog { SELF "Oh, %Delmar%... we'll fix you up real soon!" };
			}
			copy!("set_tick-watch-player")
			copy!("set-hint-bea1")
		}
	} else { // you DID beat part1
		if (entity "Delmar" type == "old_man") {
			show dialog { SELF "Thank you, %PLAYER%!" };
		} else if (entity "Delmar" type == "sheep "|| entity "Delmar" type == "helga") {
			show dialog {
				SELF "Oh! That's a nasty trick, %PLAYER%!"
				"How could you?"
				"Although... I sort of get the feeling he'll be back to normal in a few minutes."
			};
		} else {
			show dialog {
				SELF "Oh, %Delmar%, you're... uh...."
			};
		}
	}
	entity "Beatrice" on_interact = "show_dialog-bea-start";
}

"show_dialog-bea-part2" {
	if (!"storyflag-bea2") { // !part2won
		if (entity "Delmar" type == "sheep "|| entity "Delmar" type == "helga") {
			if (!"bea2-backstory") {
				show dialog {
					SELF "Oh! And I was just thinking how I wanted him to become a sheep again!"
					"So gentle... and so quiet!"
					"Thank you, %PLAYER%!"
				};
			} else { // you DID hear the backstory
				show dialog {
					SELF "Thank you, child!"
					"...And, erm, we need not mention this to anyone! You understand?"
				};
			}
			self direction = entity "Delmar";
			copy!("calculate-hint-tracking-series")
			if ("hint-tracking-check" == 9) {
				copy!("set-hint-none")
			}
			"bea2-backstory" = true;
			"storyflag-bea2" = true;
		} else { // not a sheep
			if (entity "Delmar" type == "old_man") {
				if (!"bea2-backstory") {
					show dialog { SELF "...." "You know, I appreciate what you did, %PLAYER%. I really do." };
					copy!("clear-own-tick")
					copy!("slow-stare-at-delmar")
					show dialog { SELF "...." };
					copy!("slow-stare-at-player")
					show dialog {
						SELF "But now I find myself longing for quiet."
						"It was so peaceful, before. %Delmar% and I used to get along so well."
						"And it's so difficult to fall asleep recently."
						"I hate to ask it, child, but...."
						"I can't hear myself think! Please change him back!"
					};
				} else { // you DID hear the backstory
					show dialog {
						SELF "I'm sure he won't mind being a sheep again. In fact, I'm not sure he'll notice."
						"But I sure will! I won't have peace otherwise!"
					};
				}
			} else { // not a sheep nor a man
				show dialog {
					SELF "Oh, um...."
					"Actually, I was hoping he could become a sheep again."
				};
			}
			copy!("set_tick-watch-player")
			"bea2-backstory" = true;
			copy!("set-hint-bea2")
		}
	} else { // part2won
		if (entity "Delmar" type == "sheep "|| entity "Delmar" type == "helga") {
			show dialog {
				SELF "Peace at last!"
			};
		} else if (entity "Delmar" type == "old_man") {
			show dialog {
				SELF "...." "I suddenly have the strangest feeling of deja vu."
			};
		} else {
			show dialog {
				SELF "Well, I suppose we could give this a try instead...."
			};
		}
	}
	entity "Beatrice" on_interact = "show_dialog-bea-start";
}

"on_tick-delmar-blab-nonman-watch" {
	if (entity "Delmar" type != "old_man") {
		goto "delmar-unblab";
	}
}

"on_tick-delmar-blab-man-watch" {
	if (entity "Delmar" type == "old_man") {
		goto "delmar-blab";
	}
}

"on_tick-secretroom" {
	if (player intersects geometry "door-secretdoor-exit") {
		goto "leave-secretroom";
	}
}

"on_load-secretroom" {
	if ("tuesdayd") {
		entity "Jackob" position = geometry "secretroom-hidingplace";
		entity "Alfonso" position = geometry "secretroom-hidingplace";
		entity "Bert" position = geometry "secretroom-hidingplace";
		command "rtfm" = "command-rtfm";
	} else {
		goto "secretroom-cutscene"; // JUMP
	}
}

"show_dialog-hackbook" {
	if (self glitched) {
		show dialog {
			entity "Town History" portrait journal
			"ERQ UREEVAT"
		};
	} else {
		show dialog {
			entity "Town History" portrait journal
			"The Big Bad, who goes by the name%#29SC^7\n}ho was found in #A423#Bfjr$bf afte@t\n$#cY B.  Ex"
			"@t Y#C9 B. @t $Y#9 B.  exception EOF"
		};
		// doc: The Big Bad, named aslkdhgasdflkjasd.
		if ("current-chapter" == 1) {
			if (!"hackbook-backstory") {
				show dialog {
					PLAYER "Um... okay, then."
					"...."
					"No... no, wait a minute...."
					"The Big Bad's name?"
				};
				player direction = south;
				show dialog {
					PLAYER "I don't think I've actually ever heard his name before. He must have had a real name!"
					"But everyone just calls him the Big Bad. Why doesn't anyone use his name?"
					"...."
					"I'm gonna have to see what else I can find out about this book."
				};
				"hackbook-backstory" = true;
			} else {
				show dialog { PLAYER "Creepy." };
				if (!"hackbook-endstory") {
					show dialog "dialog-hackbook-creepy-hint" {
						PLAYER "I should really ask Jackob about this book."
					};
				}
			}
			copy!("set-hint-hackbook")
		}
	}
}

"show_dialog-shepherd-start" {
	copy!("face-player")
	if (self glitched) { // if he's glitched
		show dialog { SELF "Jubn, jung'f tbvat ba?!" };
	} else if ("storyflag-shepherd") { // if you've solved the puzzle already
		show dialog { SELF "Thanks a million! I owe you one!" };
	} else if (
		!entity "Baa" intersects geometry "sheep-pen
		|| entity Ram is not inside geometry sheep-pen
		|| entity Ewe is not inside geometry sheep-pen
		|| entity Helga is not inside geometry sheep-pen
	") { // if at least one of the sheep is NOT in the pen... (& puzzle not solved yet)
		if ("shepherd-backstory") { // ...and you've heard the backstory...
			if (
				entity "Baa" intersects geometry "sheep-pen
				|| entity Ram is inside geometry sheep-pen
				|| entity Ewe is inside geometry sheep-pen
				|| entity Helga is inside geometry sheep-pen
			") { // ...and if at least one IS in the pen
				// give a "cheer"
				copy!("face-player")
				show dialog { SELF "Awesome! Don't stop, now!" };
				copy!("set-hint-shepherd-partial")
			} else { // ...and they're ALL still outside
				// give a reminder
				show dialog { SELF "Can you help a dude out? Put all four sheep back inside the fence?" };
				copy!("set-hint-shepherd")
			}
		} else { // ...if you HAVEN'T heard the backstory...
			// ...hear the backstory now
			copy!("show_dialog-shepherd-backstory")
			copy!("set-hint-shepherd")
		}
		"shepherd-backstory" = true;
	} else { // all the sheep must be in the pen
		// you win!
		if ("shepherd-backstory") { // if you've heard the backstory:
			// standard ending
			show dialog {
				SELF "Thanks a million! I owe you one!"
			};
		} else {
			// "surprised" ending
			show dialog {
				SELF "Oh, wow, are the sheep actually back inside the pen? I could've sworn they...."
				"Hey, did you do that? Did you put them back?"
				"Wow, thanks a lot! I could've gotten into deep trouble!"
			};
			"shepherd-backstory" = true; // (because you talked to him at all)
		}
		"storyflag-shepherd" = true;
		copy!("calculate-hint-tracking-series")
		if ("hint-tracking-check" == 1) {
			// if the hint series is the same, reset hint
			copy!("set-hint-none")
		}
	}
}

"ch2-interact-mainframe" {
	if ("ch2-wait-for-hat-touch") {
		player direction = entity "Wizard";
		entity "Wizard" direction = player;
		show dialog {
			PLAYER "Um, how do I get the hex editor to come up again?"
			Wizard "Don't look at me. I don't use touch screens."
			PLAYER "Touch screens?"
			Wizard "Capacitive buttons. Same diff. My little paws don't trigger them right."
			"But there must be some kind of shiny copper surface on your whatsit, right? Try touching it with your finger. That's probably how it's done."
		};
		return;
	} else if ("ch2-carrying-mainframeos") {
		copy!("ch2-install-wizard")
		return;
	} else if ("ch2-installed-mainframeos") {
		show dialog "mainframe-working"; // references above
		return;
	} else if (!"ch2-toot-done") {
		show dialog { PLAYER "What is this hunk of junk?" };
		return;
	}
	"temp" = false;
	// wizard comes up if down
	if (entity "Wizard" current_animation == 0) { // WIZARD IS DOWN
		entity "Wizard" on_tick = "tick-ch2-wizard-ascend-and-watch";
	}
	// normal
	if (!"ch2-installed-heatsink") {
		if ("ch2-carrying-heatsink") {
			show dialog {
				name "" "(Now installing... the heat sink!)"
				"(Or you would, but you can't install it until the CPU is in place. You set it aside for now.)"
			};
			"temp" = true;
			copy!("ch2-install-heatsink")
		}
	}
	if (!"ch2-installed-powersupply") {
		if ("ch2-carrying-powersupply") {
			show dialog {
				name "" "(Now installing... the power supply!)"
				"(2 kW may be overkill, but better safe than sorry.)"
			};
			"temp" = true;
			copy!("ch2-install-powersupply")
		}
	}
	if (!"ch2-installed-monitor") {
		if ("ch2-carrying-monitor") {
			show dialog {
				name "" "(Now installing... the monitor!)"
				"(...Or rather, it's now plugged into the back. That one was easy!)"
			};
			"temp" = true;
			copy!("ch2-install-monitor")
		}
	}
	// abstract
	if (!"ch2-installed-harddrive") {
		if ("ch2-carrying-harddrive") {
			show dialog {
				name "" "(Now installing... the hard drive!)"
				"(What's the read head going to be? Will this work?!)"
			};
			"temp" = true;
			copy!("ch2-install-harddrive")
		}
	}
	if (!"ch2-installed-keyboard") {
		if ("ch2-carrying-keyboard") {
			show dialog {
				name "" "(Now installing... the keyboard!)"
				"(Good thing the keytar can connect over USB, or this wouldn't have worked.)"
			};
			"temp" = true;
			copy!("ch2-install-keyboard")
		}
	}
	if (!"ch2-installed-mouse") {
		if ("ch2-carrying-mouse") {
			show dialog {
				name "" "(Now installing... the mouse!)"
				"(...Or at least, installing the dongle.)"
			};
			"temp" = true;
			copy!("ch2-install-mouse")
		}
	}
	// desperate
	if (!"ch2-installed-ramchips") {
		if ("ch2-carrying-ramchips") {
			show dialog {
				name "" "(Now installing... the RAM chips!)"
				"(The RAM chips went in with a terrifying SNAP, but they seem snug now. You better wash your hands, though.)"
			};
			"temp" = true;
			copy!("ch2-install-ramchips")
		}
	}
	if (!"ch2-installed-clock") {
		if ("ch2-carrying-clock") {
			show dialog {
				name "" "(Now installing... the grandfather clock!)"
				"(Somehow, that enormous, analog relic works great for a system clock.)"
			};
			"temp" = true;
			copy!("ch2-install-clock")
		}
	}
	if (!"ch2-installed-cpu") {
		if ("ch2-carrying-cpu") {
			show dialog {
				name "" "(Now installing... the CPU!)"
				"(Now the mainframe can compute! And... blow bubbles?)"
			};
			"temp" = true;
			copy!("ch2-install-cpu")
		}
	}
	// final
	if (!"temp") { // no components were installed
		show dialog {
			name "" "(You don't have any new components to install.)"
		};
	} else {
		"temp" = false;
		show dialog { PLAYER "That's all for now." };
		copy!("ch2-count-flags")
		// the below are separate scripts so that multiple things can trigger them
		// (^^ should this be the case?) (todo: determine this)
		if ("ch2-storyflags-tally" == $goto_round_2) {
			copy!("ch2-start-round-2")
		} else if ("ch2-storyflags-tally" == $goto_round_3) {
			copy!("ch2-start-round-3")
		} else if ("ch2-storyflags-tally" == $goto_round_4) {
			copy!("ch2-start-round-4")
		}
	}
}

"ch2-serial-light-manager" {
	if (serial_dialog open) {
		// solid light while in a serial_dialog (interactable)
		light LED_USB = on;
	} else if ("ch2-lambda-paging") {
		// blinking light while Lambda wants to talk to you
		if ("ch2-lambda-paging-pulsar") {
			"ch2-lambda-paging-pulsar" = false;
			light LED_USB = off;
		} else {
			"ch2-lambda-paging-pulsar" = true;
			light LED_USB = on;
		}
		wait $time;
	} else if ("ch2-mousegame") {
		// if "ch2-mousegame", turn off and wait for it to be false before resuming above behavior
		goto "ch2-serial-light-manager-mouse";
	} else {
		// no light otherwise
		light LED_USB = off;
	}
}

"ch2-serial-light-manager-mouse" {
	if (!"ch2-mousegame") {
		goto "ch2-serial-light-manager";
	}
}

"on_load-ch2-bakery" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>BAKERY</>..." };
	// The part of Aunt Zippy is being played by Jackob
	if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		if ("ch2-storyflag-round" == 3) {
			entity "Jackob" position = geometry "zippy-spot1";
		} else if ("ch2-storyflag-round" == 4) {
			entity "Jackob" position = geometry "zippy-spot2";
		}
		entity "Jackob" name = "Aunt Zippy";
		entity "Jackob" on_look = "look-ch2-zippy";
		entity "Jackob" on_tick = "null_script";
		entity "Jackob" on_interact = "interact-ch2-zippy";
		entity "Jackob" type = "lightning_boy";
		entity "Jackob" direction = north;
	} else if ("ch2-storyflag-round" != 2) {
		entity "Jackob" on_tick = "yeet";
	}
	// All the rest
	copy!("ch2-map-init")
}

"on_tick-ch2-bakery" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-bakery";
		load map "ch2-town";
	}
	map on_tick = "on_tick-ch2-bakery";
}

"interact-ch2-baker" {
	copy!("interrupt-walk")
	if ("ch2-storyflag-round" >= 5) {
		show dialog {
			SELF "Good job building that computer. That's really impressive."
		};
	} else {
		show dialog {
			SELF "Sorry, can't talk now."
			"But good luck conquering the serial castle."
		};
	}
	copy!("resume-walk")
}

"on_load-ch2-magehouse-birthday" {
	hex_control = on;
	player_control = off;
	if (debug_mode) {
		serial_control = on;
		command "skip" = "cutscene-ch2-birthday-exit"; // this shows up twice if put first in the script O.o
		show serial_dialog {
			" "
			"<y>DEBUG></> <c>SKIP</>: skip this cutscene"
		};
	} else {
		serial_control = off;
	}
	hex_editor = close;
	player current_animation = 0;
	camera fade out -> #000000 over 0ms;
	player direction = east;
	camera = geometry "cake-camera-1";
	entity "Stunt Cake" current_animation = 1;
	wait 1000ms;
	camera fade in -> #000000 over 1000ms;
	wait 500ms;
	show dialog {
		name " " // blank dialog label
		border_tileset transparent
		"Happy birthday to you!\nHappy birthday to you!"
		"Happy birthday, dear %PLAYER%!\nHappy birthday to you!"
	};
	wait 200ms;
	entity "Stunt Cake" animation -> 2 once;
	entity "Stunt Cake" current_animation = 3;
	camera fade out -> #000000 over 0ms;
	camera = geometry "cake-camera-2";
	camera fade in -> #000000 over 500ms;
	show dialog {
		ZIPPY "Now you're an official mage, %PLAYER%!"
		PLAYER "Blowing out the candle didn't make me a mage, %Aunt Zippy%!"
		ZIPPY "Well, you're officially sixteen now!"
		PLAYER "I'm pretty sure I officially turned sixteen at midnight last night."
		ZAPPY "Well, you're officially our favorite birthday mage!"
		PLAYER "Aw, thanks, %Uncle Zappy%!"
		ZIPPY "All right, everyone! Dig in!"
	};
	camera fade out -> #000000 over 500ms;
	entity "Cake" current_animation = 4;
	show dialog {
		name " "
		border_tileset menu
		"*munch munch munch*"
	};
	camera fade in -> #000000 over 1000ms;
	show dialog {
		ZAPPY
		"How was your day, %PLAYER%? Are you getting used to Ring Zero?"

		PLAYER
		"Yeah, today was pretty wild. I went around town and fixed a lot of the stuff the Big Bad had ruined."
		"I changed the color of some ether nettle blossoms, teleported some sheep, and impersonated a cat!"
		"Oh, and I changed my name to Bob and drank some Cactus Cooler with a stone golem."

		ZIPPY "I love that the water feature in the center of town is unglitched again. It really feels like old times."
		ZAPPY "But then that earthquake hit. That was like old times, too."

		PLAYER
		"Yeah, that was scary."
		"I guess it's a sign that the Big Bad might be coming back."
	};
	wait 180ms;
	player direction = south;
	wait 400ms;
	show dialog {
		PLAYER "First thing tomorrow, I'm supposed to meet the village elders and visit the castle."
		ZAPPY "They're really sending you to get the artifacts, then?"
	};
	player direction = east;
	show dialog {
		PLAYER
		"I guess so. The village elders say the artifacts are the only thing that can stop the Big Bad for good."

		ZIPPY
		"It's a lot to ask a sixteen year old, but if Ring Zero chose you...."
		"Well, perhaps you're exactly the right mage for the job."

		ZAPPY
		"In which case we'd best get to bed soon. You'll need a good night's rest."

		PLAYER
		"Yeah."
		"Good night, %Aunt Zippy%, %Uncle Zappy%."
	};
	camera fade out -> #000000 over 1200ms;
	wait 200ms;
	goto "cutscene-ch2-birthday-exit";
}

"ch2-escort-cutscene" {
	if (debug_mode) {
		serial_control = on;
		command "skip" = "cutscene-ch2-escort-exit";
		show serial_dialog {
			" "
			"<y>DEBUG></> <c>SKIP</>: skip this cutscene"
		};
	} else {
		serial_control = off;
	}
	camera fade out -> #000000 over 0ms;
	player_control = off;
	hex_editor = close;
	entity "Alfonso" position = geometry "birthday-alfonso";
	entity "Bert" position = geometry "birthday-bert";
	entity "Jackob" position = geometry "birthday-jackob";
	entity "Alfonso" direction = north;
	entity "Bert" direction = north;
	entity "Jackob" direction = north;
	camera = geometry "escort-camera";
	camera fade in -> #000000 over 1000ms;
	player direction = south;
	wait 800ms;
	player position = geometry "walk_from-magehouse";
	player position -> geometry "walk_from-magehouse" length over 400ms;
	wait 1200ms;
	show dialog {
		PLAYER "Oh, um...."
		Alfonso "The time has come to tackle the first challenge, %PLAYER%."
		PLAYER "Yeah."
		Alfonso "Ready to go?"
		PLAYER "Yeah. I mean, no. I mean...."
	};
	wait 150ms;
	player on_tick = "look-left-and-right-fast";
	wait 300ms;
	show dialog {
		PLAYER "Wait, weren't you supposed to bring me a book this morning? A book about the cereal castle?"
	};
	player on_tick = "null_script";
	player direction = south;
	show dialog {
		Jackob
		"The serial castle, yes. We did have a book about that."
		"But... it's gone."

		PLAYER "Gone? You lost the book?"
		Alfonso "No, not lost! It's just missing!"
		PLAYER "But you're in charge of the library! How did you lose a whole book?"
		
		Bert
		"We will keep looking for it. But first you go."
		"More important for you to get started right away."
		
		Alfonso "You have demonstrated incredible competence with what you've already done with Ring Zero, so we are confident you can work your way through the castle on your own."
	};
	wait 100ms;
	player on_tick = "look-left-and-right-fast";
	wait 200ms;
	show dialog {
		PLAYER "On my own? You aren't coming inside with me?"
	};
	player on_tick = "null_script";
	player direction = south;
	show dialog {
		Jackob "We are not hackers and cannot pass the gate."
		Alfonso "Ring Zero should grant you access...."
		PLAYER "\"Should?\""
	};
	wait 150ms;
	entity "Alfonso" direction = south;
	wait 500ms;
	show dialog {
		Alfonso "If I remember correctly...."
		PLAYER "You don't know? What kind of wise old men are you?"
		Jackob "We'll certainly see, won't we?"
	};
	entity "Alfonso" direction = player;
	show dialog {
		PLAYER "That book... what did it say? Can you give me a summary at least?"
	};
	entity "Jackob" on_tick = "gossip-right-down";
	entity "Alfonso" on_tick = "gossip-left-and-right-down";
	entity "Bert" on_tick = "gossip-left-down";
	wait 200ms;
	show dialog {
		Jackob "I must have read it once...."
		Alfonso "Wasn't it something about...?"
		Bert "I don't know."
	};
	wait 500ms;
	entity "Alfonso" on_tick = "null_script";
	entity "Jackob" on_tick = "null_script";
	entity "Bert" on_tick = "null_script";
	wait 100ms;
	entity "Alfonso" direction = north;
	wait 50ms;
	entity "Bert" direction = north;
	wait 40ms;
	entity "Jackob" direction = north;
	show dialog {
		Jackob "I can't remember."
		Alfonso "Something about rooms... and magic words...."
		PLAYER "Ho boy."
		
		Jackob
		"We had hoped that book would give you a leg up, but ultimately, I doubt it was that important, %PLAYER%."
		"Instead you will need to rely on XA, who will be able to provide you with a great deal of information."
		
		PLAYER "Exay?"
		Bert "XA sits just inside. Is robot."
		Alfonso "It literally has insider information about the place."
		
		Jackob
		"I realize it's disappointing that we cannot help you very much in this chapter of your journey as a mage."
		"But we promise you, %PLAYER%, that you will not be entirely on your own."
		"Trust us. You'll be just fine."

		Alfonso "You will not be in danger at any point!"
		Bert "Unless Big Bad comes back."
		Alfonso "Yes! And that is why you must hurry!"
		PLAYER "All right. Let's not waste any more time."
	};
	"ch2-escort-cutscene" = true;
	wait 160ms;
	entity "Jackob" on_tick = "birthday-march-on-own-path";
	wait 180ms;
	entity "Alfonso" on_tick = "birthday-march-on-own-path";
	wait 90ms;
	entity "Bert" on_tick = "birthday-march-on-own-path";
	player on_tick = "birthday-march-on-own-path-player";
}

"on_load-ch2-bobsclub-basement" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>BOB'S CLUB BASEMENT</>..." };
	if (!"ch2-cutseen-bob-party") {
		camera = geometry "gasp-spot";
	} else {
		entity "Guardian Bob" position = geometry "bob-walk2";
		entity "Guardian Bob" on_tick = "loiter-slow";
	}
	copy!("ch2-map-init")
	command "look" + "bob" = "look-ch2-bob";
	if (!"ch2-cutseen-bob-party") {
		copy!("ch2-cutscene-bob-party")
	}
}

"tick-linger-1" {
	copy!("tick-rand-mini")
	self position -> geometry "linger-spot-1b" origin over 500ms;
	self direction = east;
	wait 15s;
	self position -> geometry "linger-spot-1a" origin over 500ms;
	self direction = east;
	wait 4s;
}

"tick-linger-2" {
	copy!("tick-rand-broad")
	wait 3s;
	self position -> geometry "linger-spot-2b" origin over 1s;
	self direction = south;
	wait 12s;
	self direction = east;
	wait 10s;
	self direction = south;
	wait 4s;
	self position -> geometry "linger-spot-2a" origin over 1s;
	self direction = south;
	wait 20s;
}

"tick-linger-3" {
	copy!("tick-rand-mini")
	wait 5s;
	self position -> geometry "linger-spot-3b" origin over 750ms;
	self direction = east;
	wait 32s;
	self position -> geometry "linger-spot-3a" origin over 750ms;
	self direction = east;
	wait 4s;
}

"tick-linger-4" {
	copy!("tick-rand-broad")
	self position -> geometry "linger-spot-4b" origin over 1s;
	self direction = north;
	wait 15s;
	self direction = west;
	wait 12s;
	self position -> geometry "linger-spot-4a" origin over 1s;
	self direction = north;
	wait 12s;
}

"interact-ch2-guardianbob" {
	copy!("interrupt-walk")
	show dialog {
		PLAYER "So why is the party in the basement? I thought it was going to be upstairs. There were decorations half set up and everything."
		SELF "Well, we WERE going to have the party upstairs, but someone broke in and pretended to be named Bob. After that we upped our security."
		PLAYER "...Oh yeah?"
		SELF "Yeah, this guy Strong Bad. The photo on his fake ID looked nothing like him, but Bob Austin let him in anyway."
		PLAYER "No kidding."
		SELF "I've been manually teleporting Bobs down here ever since, just to be sure. My teleport program is very strict. It won't let non-Bobs through at all."
		PLAYER "Good to know."
	};
	copy!("resume-walk")
}

"interact-ch2-marathonbob" {
	// capture original facing direction
	copy!("interrupt-walk")
	// normal behavior
	"bobtalkrand" ?= 10;
	// https://www.youtube.com/watch?v=7dpxLPbamnA for BoB quotes
	if ("bobtalkrand" == 1) {
		show dialog { SELF "They're everywhere!" "Us Bobs, that is. We're everywhere!" };
	} else if ("bobtalkrand" == 2) {
		show dialog { SELF "Ah! Watch it!" "You stepped on my foot!" };
	} else if ("bobtalkrand" == 3) {
		show dialog { SELF "Follow me!" "Let's start a conga line!" };
	} else if ("bobtalkrand" == 4) {
		show dialog { SELF "AAHHHH!" "I bit my tongue!" };
	} else if ("bobtalkrand" == 5) {
		show dialog { SELF "Get me outta here." "This dubstep is too much." };
	} else if ("bobtalkrand" == 6) {
		show dialog { SELF "Hey! He's shooting at us!" "That DSLR looks nice. Wonder where he got it." };
	} else if ("bobtalkrand" == 7) {
		show dialog { SELF "Perimeter secured." "No non-Bobs here!" };
	} else if ("bobtalkrand" == 8) {
		show dialog { SELF "All right!" "This is the best Bob's Club party yet!" };
	} else if ("bobtalkrand" == 9) {
		show dialog { SELF "Thank god it's you!" "Another Bob!" };
	} else {
		show dialog { SELF "Frog blast the vent core!" "That's the name of my favorite drink." };
	}
	// turn back to the original facing direction
	copy!("resume-walk")
	"bobtalkrand" = 0; // courtesy reset
}

"interact-ch2-icechest" {
	if ("ch2-carrying-cactuscooler") {
		if (
			!"interrupt" // you didn't just pick it up
			|| !"ch2-want-cactuscooler" // OR you don't know you need it
		) {
			show dialog {
				PLAYER "I won't need more Cactus Cooler than this. I'll leave the rest for everyone else."
			};
		} else {
			// if you did just pick it up AND you know you need it
			show dialog {
				PLAYER "Got my can of Cactus Cooler. Time to bring it to Rocco at the castle power plant."
			};
		}
	} else if ("ch2-cactuscooler-delivered") {
		// you've already turned the soda in
		show dialog {
			PLAYER "Rocco already has his Cactus Cooler. I'll leave the rest of these cans for everyone else at the party."
		};
	} else { // You get to pick up a Cactus Cooler!
		if (!"ch2-want-cactuscooler") {
			show dialog { PLAYER "This really is a lot of Cactus Cooler. Guess I'll grab a can for the road." };
		} else {
			show dialog { PLAYER "Bingo! Cactus Cooler!" };
		}
		show dialog {
			name "" "(You pick up the can of Cactus Cooler!)"
		};
		copy!("ch2-pickup-cactuscooler")
		"interrupt" = true; // you just picked it up
	}
}

"look-ch2-bobglasses" {
	show serial_dialog "spacer";
	show serial_dialog {
		"You looked at <m>%SELF%</>."
	};
	if (!"ch2-cutseen-bob-party") {
		show serial_dialog {
			"\tFancy glass goblets for fancy parties. These pieces are definitely reserved for fancy drink orders. Not that you've ever seen a party in here."
		};
	} else {
		show serial_dialog {
			"\tFancy glass goblets for fancy parties. These pieces are definitely reserved for fancy drink orders. Though from what you've seen, the Bob's Club partygoers prefer to use red plastic party cups."
		};
	}
}

"on_load-ch2-bobsclub" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>BOB'S CLUB</>..." };
	// do unique stuff first (but player_control = serial / off first, if you do)
	"ch2-rattle-count" = 0;
	
	copy!("ch2-map-init")

	// DEBUG
	if (debug_mode) {
		command "find" + "cc" = "find-cc";
		command "unfind" + "cc" = "unfind-cc";
		command "want" + "cc" = "want-cc";
		command "unwant" + "cc" = "unwant-cc";
		command "basement" = "basement";
		command "unbasement" = "unbasement";
		command "toot" = "toot";
		command "untoot" = "untoot";
		command "carry" + "cc" = "ch2-pickup-cactuscooler";
		command "uncarry" + "cc" = "ch2-unpickup-cactuscooler";
		command "reset" = "reset";
		show serial_dialog {
			" "
			"<y>DEBUG></> Bob's Club</>"
			"<y>></> <c>FIND CC</>: you found CC in ch1"
			"<y>></> <c>UNFIND CC</>: you didn't find CC in ch1"
			"<y>></> <c>WANT CC</>: you know you want CC"
			"<y>></> <c>UNWANT CC</>: you don't yet know you want CC"
			"<y>></> <c>CARRY CC</>: you have CC on you"
			"<y>></> <c>UNCARRY CC</>: you don't have CC on you"
			"<y>></> <c>BASEMENT</>: you've been to the Bob's Club basement already"
			"<y>></> <c>UNBASEMENT</>: you've haven't been to the Bob's Club basement yet"
			"<y>></> <c>TOOT</>: you've finished Lambda's artifact tutorial already"
			"<y>></> <c>UNTOOT</>: you haven't finished Lambda's artifact tutorial yet"
			"<y>></> <c>RESET</>: set all above flags to false, and set the 'heard a dubstep rattle' to 0"
		};
	}
	// END DEBUG

	// Have NOT been in the basement
	if (!"ch2-cutseen-bob-party") {
		player_control = off;
		if (warp_state != "warped") {
			player position -> geometry "walk-spot" origin over 400ms;
		}
		wait 220ms;
		// Intro words
		if (!"ch2-saw-emptybobroom") {
			player on_tick = "look-left-and-right-fast";
			show dialog {
				PLAYER "Huh? That's weird. Where did everyone go?"
				"And what's that muffled thumping noise?"
			};
			"ch2-saw-emptybobroom" = true;
		} else {
			show dialog {
				PLAYER "Huh. Still empty... apart from that muffled thumping noise."
			};
		}
		copy!("player-look-down")
		// CC followup
		if ("ch2-want-cactuscooler") { // You KNOW you need CC
			if ("ch1-found-cactuscooler") {
				show dialog {
					PLAYER "At least I can grab some Cactus Cooler while I'm here. I know I saw some in the fridge yesterday."
				};
			}
			else {
				show dialog {
					PLAYER "There might be Cactus Cooler around somewhere, though. This place has drinks and stuff, right?"
				};
			}
		}
		else { // You DON'T know you need CC
			show dialog {
				PLAYER "Maybe I should take a look around."
			};
		}
		player_control = on;
	}
	else { // You HAVE been in the basement
		if ("ch2-want-cactuscooler") { // If you know you need CC
			if ( // You've already collected the CC
				"ch2-carrying-cactuscooler"
				|| "ch2-cactuscooler-delivered"
			) {
				// DO NOTHING
			}
			else {
				// REMIND THEM TO GET IT!
				if ("ch1-found-cactuscooler") {
					show dialog {
						PLAYER "Oh, yeah. I found Cactus Cooler in the fridge here yesterday. I should grab some while I'm here."
					};
				}
				else {
					show dialog {
						PLAYER "Oh, right. They had drinks and stuff at the party. I wonder if they'll have a rare soda like Cactus Cooler?"
					};
				}
			}
		}
	}
}

"on_tick-ch2-bobsclub" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-bobsclub";
		load map "ch2-town";
	}
	map on_tick = "on_tick-ch2-bobsclub"; // reset
}

"interact-ch2-bobbox" {
	if (!"ch2-cutseen-bob-party") {
		show dialog {
			PLAYER "It's a box of unfilled balloons. There used to be a ton more of them though."
		};
	}
	else {
		show dialog {
			PLAYER "I guess they didn't need this box of balloons downstairs."
		};
	}
}

"interact-ch2-bobbarstool" {
	if (!"ch2-cutseen-bob-party") {
		show dialog {
			PLAYER "Only one stool for the whole bar? Where's the rest?"
		};
	}
	else {
		show dialog {
			PLAYER "They just left this stool by itself, huh? Guess there wasn't room downstairs."
		};
	}
}

"interact-ch2-bobcountertop" {
	if (!"ch2-cutseen-bob-party") {
		show dialog {
			PLAYER "I KNOW there used to be bottles by the sink! Where did everything go?"
		};
	} // (no need to say anything once the basement is discovered)
}

"interact-ch2-bobcupboard" {
	if (!"ch2-touched-bobcupboard") {
		show dialog {
			PLAYER "Those are some hardy-looking glasses and tumblers."
		};
		"ch2-touched-bobcupboard" = true;
	}
	else {
		show dialog {
			PLAYER "Yup, still glasses and tumblers in there."
		};
	}
	copy!("ch2-bobrattling")
}

"interact-ch2-bobglasses" {
	show dialog {
		PLAYER "These glasses look super fancy."
	};
	copy!("ch2-bobrattling")
}

"interact-ch2-bobfridge" {
	if ( // You've already collected the CC
		"ch2-carrying-cactuscooler"
		|| "ch2-cactuscooler-delivered"
	) {
		show dialog { PLAYER "Nothing in here." };
	}
	else {
		if (!"ch1-found-cactuscooler") {
			show dialog {
				PLAYER "I would have thought there'd be some soda in here, but nothing. Not even a box of baking soda."
			};
		}
		else {
			show dialog {
				PLAYER "I could have sworn there was Cactus Cooler in here yesterday, but it's gone now."
			};
		}
	}
	copy!("ch2-bobrattling")
}

"ch2-bert-secret-lambda-intro" {
	show serial_dialog "spacer";
	if ("interrupt") {
		show serial_dialog {
			"<m>LAMBDA</>: Bert? BERT! Oh my God, Bert! I remember that guy!"
			" "
			"<c>YOU</>: What? You know him?"
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Oh man, Bert! That guy... I haven't seen him in ages! I forgot all about him!"
			" "
			"<c>YOU</>: What? You know Bert?"
		};
	}
	show serial_dialog {
		" "
		"<m>LAMBDA</>: His name was a complete blank until you said it, but I recognized his face!"
	};
	if (!"ch2-cameras-explanation") {
		show serial_dialog {
			" "
			"<c>YOU</>: Wait, how did you see his face?"
			" "
			"<m>LAMBDA</>: The cameras! They're all around in -- look, it doesn't matter. The point is...."
		};
		"ch2-cameras-explanation" = true;
	}
	show serial_dialog {
		"\tAw, man. The two of us? We go way back!"
		" "
		# "Should I go back and fetch him?" = "ch2-bert-secret-lambda-intro2"
	};
}

"look-ch2-castle-1" {
	show serial_dialog "spacer";
	show serial_dialog {
		"You looked around the <c>CASTLE ENTRANCE</>."
	};
	if ("ch2-storyflag-round" < 5) {
		show serial_dialog {
			"\tThis castle might have been glorious once, but it seems that time has not been kind to it. The edges of its banners are fraying and grungy, and you're not sure you'll ever get the \"used castle smell\" out of your hat."
			" "
		};
	} else {
		show serial_dialog {
			"\tThe banners have seen better days, but the room looks much better without the large slabs of debris blocking the doors. The air smells cleaner, too."
			" "
		};
	}
	// (Exits list goes here) (P.S. That's why there's an empty line above!)
}

"look-ch2-mainframe" {
	show serial_dialog "spacer";
	show serial_dialog {
		"You looked at the <m>%SELF%</>."
		" "
	};
	"temp" = false;
	show serial_dialog { "This hardy beige box contains:"};
	show serial_dialog {
		"\t- wires"
		"\t- what looks like a huge circuit board"
	};
	// normal
	if ("ch2-installed-heatsink") {
		show serial_dialog { "\t- a heatsink" };
	}
	if ("ch2-installed-powersupply") {
		show serial_dialog { "\t- a power supply (2 kW)" };
	}
	// abstract
	if ("ch2-installed-harddrive") {
		show serial_dialog { "\t- a hard drive" };
	}
	// desperate
	if ("ch2-installed-ramchips") {
		show serial_dialog { "\t- a bunch of RAM chips" };
	}
	if ("ch2-installed-clock") {
		show serial_dialog { "\t- a system clock" };
	}
	if ("ch2-installed-cpu") {
		show serial_dialog { "\t- a CPU" };
	}
	// EXTERNAL
	show serial_dialog { "On the outside is:" };
	if (
		"ch2-installed-monitor"
		|| "ch2-installed-keyboard"
		|| "ch2-installed-mouse"
	) {
		if ("ch2-installed-monitor") {
			show serial_dialog { "\t- a monitor" };
		}
		if ("ch2-installed-keyboard") {
			show serial_dialog { "\t- a keyboard" };
		}
		if ("ch2-installed-mouse") {
			show serial_dialog { "\t- a mouse" };
		}
	}
	show serial_dialog {
		"\t- a bunch of tiny penguin stickers"
		"\t- and one yak sticker?"
	};
}

"look-ch2-wizard" {
	show serial_dialog "spacer";
	if (entity "Wizard" current_animation == 0) { // WIZARD IS DOWN
		show serial_dialog "spacer";
		show serial_dialog {
			"You looked at the <m>%SELF%</>."
			"\tAt least, you looked at the trash can itself. It's... a trash can. It's pungent enough that you think it best to breathe through your mouth for the moment."
		};
	} else {
		show serial_dialog {
			"You looked at the <m>%SELF%</>."
			"\t...Adorable!"
		};
	}
}

"on_load-ch2-castle-1-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 1;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE ENTRANCE</>..." };

	entity "Wizard" on_interact = "interact-ch2-wizard-mainframedone";
	entity "Wizard" current_animation = 3; // head poking up
	if (warp_state == "raw_game_load-ch2") {
		copy!("restore_player_state")
	} else if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	}
	copy!("ch2-map-init")
	copy!("ch2-player-spawn-click-protection")
}

"on_load-ch2-castle-1" {
	if (warp_state == "ch2 ending") {
		goto "ch2-castle-1-ending";
	}
	// ch2 room state
	"ch2-in-room" = 1;
	"ch2-seen-room-1" = true;

	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE ENTRANCE</>..." };

	// room unique stuff
	if ("ch2-cutseen-bert-secret") {
		entity "Bert" on_tick = "yeet";
		// so his name is blank for when Ring Zero is back
	}

	if ("ch2-ring-zero-enabled-in-castle") {
		entity "Wizard" on_interact = "interact-ch2-wizard-mainframedone";
		entity "Wizard" current_animation = 3; // head poking up
	}
	if ("ch2-has-artifact") {
		entity "Artifact" on_tick = "yeet";
	}
	if (warp_state == "raw_game_load-ch2") {
		copy!("restore_player_state")
	} else if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	} else if (warp_state == "ch2-ending") {
		player position = geometry "mainframe-look-spot";
	}
	if ("ch2-carrying-mainframeos") {
		entity "Wizard" current_animation = 3;
	}
	copy!("ch2-map-init")

	// DEBUG
	if (debug_mode) {
		command "credits" = "debug-ch2-credits";
		command "toot" = "debug-finish-toot";
		command "walk" = "debug-walk";
		command "get" + "monitor" = "ch2-pickup-monitor";
		command "get" + "heatsink" = "ch2-pickup-heatsink";
		command "get" + "cactuscooler" = "ch2-pickup-cactuscooler";
		command "get" + "powersupply" = "ch2-pickup-powersupply";
		command "get" + "keyboard" = "ch2-pickup-keyboard";
		command "get" + "mouse" = "ch2-pickup-mouse";
		command "get" + "harddrive" = "ch2-solder-harddrive";
		command "get" + "plate" = "ch2-pickup-plate";
		command "get" + "needle" = "ch2-pickup-needle";
		command "get" + "ramchips" = "ch2-pickup-ramchips";
		command "get" + "clock" = "ch2-pickup-clock";
		command "get" + "goldfish" = "ch2-pickup-goldfish";
		command "get" + "abacus" = "ch2-pickup-abacus";
		command "get" + "cpu" = "ch2-solder-cpu";
		command "round" + "1" = "debug-get-items-for-round1";
		command "round" + "2" = "debug-get-items-for-round2";
		command "round" + "3" = "debug-get-items-for-round3";
		show serial_dialog {
			" "
			"<y>DEBUG></> this room only"
			"<y>></> <c>TOOT</>: skip tutorial"
			"<y>></> <c>CREDITS</>: roll credits as if you've beaten the game"
			"<y>></> <c>GET _</>: pick up the named item"
			"<y>></> <c>ROUND _</>: collect the items for that round"
			"<y>></> <c>WALK</>: set XA on_interact to do the walk part"
		};
	}
	// END DEBUG
	copy!("ch2-player-spawn-click-protection")
}

"ch2-artifact-walk" {
	player_control = off; // temp (take out of final)
	wait 70ms;
	entity "XA" on_tick = "ch2-camera-to-artifact";
	wait 500ms;
	// a dumbwaiter-esque thing opens
	entity "Artifact" on_tick = "tick-artifact-open";
	wait 400ms;
	player direction = geometry "artifact-look";
	wait 1700ms;
	if (player intersects geometry "artifact-watchbox") {
	} else if (player intersects geometry "artifact-watchdonut") {
		player position -> geometry "artifact-watchpoint" origin over 400ms;
	} else {
		player position -> geometry "artifact-watchpoint" origin over 600ms;
	}
	player direction = geometry "artifact-look";
	wait 444ms;
	show dialog {
		PLAYER "What, over there?"
	};
	player position -> geometry "artifact-approach" origin over 400ms;
	player direction = north;
	wait 1000ms;
	// bling
	entity "Artifact" animation -> 1 once;
	entity "Artifact" current_animation = 3;
	wait 550ms;
	player position -> geometry "artifact-approach" length over 350ms;
	wait 170ms;
	player direction = east;
	wait 700ms;
	player direction = north;
	wait 80ms;
	// walks up to it
	player position -> geometry "artifact-get" origin over 200ms;
	wait 600ms;
	entity "Artifact" on_tick = "yeet";
	// remove artifact
	wait 100ms;
	entity "XA" on_tick = "ch2-camera-from-artifact";
	wait 200ms;
	player position -> geometry "artifact-approach" origin over 600ms;
	wait 300ms;
	player direction = west;
	camera fade out -> $calc over 800ms;
	entity "calc1" animation_frame = 55;
	entity "calc2" animation_frame = 55;
	entity "calc1" position = geometry "calc1-spot";
	entity "calc2" position = geometry "calc2-spot";
	camera = geometry "artifact-approach";
	player position = geometry "hiding-spot";
	camera fade in -> $calc over 800ms;
	wait 2800ms;
	camera -> geometry "calc-camera" origin over 900ms;
	wait 200ms;
	show dialog {
		PLAYER "Huh. Almost looks like one of those old, fancy calculators."
	};
	camera -> geometry "artifact-approach" origin over 700ms;
	wait 300ms;
	camera fade out -> $calc over 800ms;
	player position = geometry "artifact-approach";
	camera = player position;
	entity "calc1" on_tick = "yeet";
	entity "calc2" on_tick = "yeet";
	camera fade in -> $calc over 800ms;
	player direction = south;
}

"on_tick-ch2-castle-1-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-1")
		warp_state = "walk_from-north";
		load map "ch2-castle-outside";
	}
	if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-1")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-11-special")
	}
}

"on_tick-ch2-castle-1" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-1")
		warp_state = "walk_from-north";
		load map "ch2-castle-outside";
	}
	if ("ch2-wait-for-hat-touch") {
		// show serial_dialog {"if ("ch2-wait-for-hat-touch") {"};
		goto "on_tick-ch2-castle-1-hexwait1";
	}
	// if there's a dialog open currently, don't do anything! But...
	if (dialog closed) {
		// check for hax button press
		// (Not going to do shenanigans like this for other rooms because if you've left room 1 then you've seen the tutorial already)
		if (!"ch2-ring-zero-enabled-in-castle") {
			if (button HAX pressed) { // You're attempting to use Ring Zero and...
				// ...you've been told Ring Zero won't work
				if ("ch2-toot-done") {
					show dialog {
						PLAYER "Oh, yeah. Ring Zero won't work in in the castle until I fix the mainframe."
					};
				}
				// ...you've discovered Ring Zero won't work
				else if ("ch2-hax-attempted") {
					show dialog {
						PLAYER "Why doesn't Ring Zero work?"
					};
				}
				// ...you've tried the door already
				else if ("ch2-door-attempted") {
					show dialog {
						PLAYER "Weird. I can't get Ring Zero to work, either."
					};
				}
				// ...you did NOT try the door yet
				else {
					show dialog {
						PLAYER "Weird. I can't get Ring Zero to work."
					};
				}
				"ch2-hax-attempted" = true;
			}
		}
	}
}

"on_tick-ch2-castle-1-hexwait1" {
	copy!("on_tick-ch2-castle-1-hexwait-protec")
	if (button HAX pressed) {
		goto "on_tick-ch2-castle-1-hexwait2";
	}
}

"on_tick-ch2-castle-1-hexwait2" {
	copy!("on_tick-ch2-castle-1-hexwait-protec")
	if (button HAX pressed) {
		"ch2-wait-for-hat-touch" = false;
		player on_tick = "ch2-install-wizard-resume";
		goto "on_tick-ch2-castle-1";
	}
}

"on_go-castle-1-north" {
	if (!"ch2-toot-done") {
		goto "on_go_ch2-notyet";
	} else {
		copy!("on_exit-ch2-castle-1")
		copy!("warping-out-fade-out")
		copy!("ch2-load-castle-11-special")
	}
}

"on_go-castle-1-south" {
	if (!"ch2-toot-done") {
		goto "on_go_ch2-notyet";
	} else {
		copy!("on_exit-ch2-castle-1")
		copy!("warping-out-fade-out")
		load map "ch2-castle-outside";
	}
}

"ch2-attempt-door-check" {
	if ("ch2-toot-done") {
		// you've been told some doors won't work
		show dialog {
			PLAYER "Oh, yeah. With the debris blocking the doors, I'll need the serial console to move between rooms."
		};
	} else if (!"ch2-door-attempted") {
		// you've already discovered the doors don't work
		if ("ch2-hax-attempted") {
			show dialog {
				PLAYER "And the castle doors are blocked? This is going to be a short quest."
			};
		} else {
			show dialog {
				PLAYER "The castle doors are blocked? This is going to be a short quest."
			};
		}
		"ch2-door-attempted" = true;
	} else {
		// being obnoxious now :3
		if ("ch2-pretoot-door-attempts" == 0) {
			show dialog {
				PLAYER "How am I supposed to get around the castle if the doors are all caved in?"
			};
		} else if ("ch2-pretoot-door-attempts" == 1) {
			show dialog {
				PLAYER "Hmm. Maybe there's something else in this room I can investigate."
			};
		} else if ("ch2-pretoot-door-attempts" == 2) {
			show dialog {
				PLAYER "That's kind of a funny orange spider, isn't it? I wonder if it can help me."
			};
		} else {
			show dialog {
				PLAYER "I should go talk to the spider robot over there."
			};
		}
		"ch2-pretoot-door-attempts" += 1;
	}
}

"tick-ch2-wizard-ascend-and-watch-with-check" {
	if (entity "Wizard" current_animation == 0) { // WIZARD IS DOWN
		// show serial_dialog {"DEBUG: Wizard is down! Switching on_tick to to 'tick-ch2-wizard-ascend-and-watch'"};
		goto "tick-ch2-wizard-ascend-and-watch";
	} else {
		// show serial_dialog {"DEBUG: Wizard is not <bold>strictly</> down..."};
		entity "Wizard" current_animation = 3;
	}
	entity "Wizard" on_tick = "face-player";
}

"interact-ch2-wizard" {
	if (self current_animation == 0) { // WIZARD IS DOWN
		// go up
		copy!("ch2-wizard-ascend")
		// wizard is up now
	} else { // WIZARD IS UP (but should go down)
		if (!"ch2-toot-done") {
			show dialog { SELF "Bye." };
			copy!("ch2-wizard-descend")
			return;
		}
	}
	// wizard is up now and can talk normally
	if (!"ch2-toot-done") {// pre-toot version
		show dialog { SELF "Hi." };
	}
	else if ("ch2-wait-for-hat-touch") {
		player direction = entity "Wizard";
		entity "Wizard" direction = player;
		show dialog {
			PLAYER "Um, how do I get the hex editor to come up again?"
			Wizard "Don't look at me. I don't use touch screens."
			PLAYER "Touch screens?"
			Wizard "Capacitive buttons. Same diff. My paw pads won't trigger them right."
			"But there must be some kind of shiny copper surface on your whatsit, right? Try touching it with your finger. That's probably how it's done."
		};
	}
	else if ("ch2-lambda-paging") {
		show dialog {
			SELF "Looks like whats-his-name is paging you. Better answer him on the terminal."
		};
	}
	else if ("ch2-carrying-mainframeos") {
		copy!("ch2-install-wizard")
	}
	else {
		if (!"ch2-wizard-backstory") {
			show dialog {
				SELF "Hey."
				PLAYER "Hi."
				SELF "Heard you talking to whats-his-name. Building a computer?"
				PLAYER "Yeah, we're going to fix the castle mainframe."
				SELF "Cool, cool."
				"So you should know... I'm an installation wizard. I'm pretty great with computers."
				PLAYER "Oh, yeah? Could you help me install computer parts into the mainframe?"
				SELF "Nah, I'm a software guy, actually."
				PLAYER "Oh."
				SELF "But once it's built, I can help install the OS or whatever programs you might need to do whatever. Always happy to help."
			};
			"ch2-wizard-backstory" = true;
			"interrupt2" = true; // `interrupt` is used for Bert cutscene 
		} else {
			if ("interrupt2") {
				show dialog {
					SELF "So mysterious-voice-man wants to put that thing back together, huh? I don't really get it, but okie-dokie."
					"Let me know when the hardware is done and I can help install the OS and stuff. I'm great with software."
				};
			} else {
				if (!"interrupt3") {
					show dialog {
						SELF "Hey."
						PLAYER "Hi."
						SELF "Finished building that computer yet?"
						PLAYER "Not yet."
						SELF "Cool, cool. So anyway, let me know when the hardware is done and I can help install the OS and stuff. I'm great with software."
						PLAYER "Okay. Thanks."
					};
					"interrupt3" = true; // OwO
				} else {
					show dialog {
						SELF "Finished it already?"
						PLAYER "Not exactly."
						SELF "Yeah, didn't think so."
						"Later, gator."
					};
				}
				copy!("ch2-wizard-descend")
			}
		}
	}
}

"ch2-install-wizard2" {
	entity "Wizard" on_tick = "face-player";
	wait 300ms;
	camera fade out -> #FFDD00 over 600ms;
	wait 100ms;
	camera fade in -> #FFDD00 over 600ms;
	wait 400ms;
	show dialog {
		PLAYER "Whoa! What was that?"
		Wizard "Your hand was glowing. Or maybe a ring?"
		PLAYER "Ring Zero?"
		"Oh! It's warm! I wonder if it'll work now?"
		PLAYER "What was it again? \"Touch the hat on the PCB\" -- right?"
	};
	"ch2-ring-zero-enabled-in-castle" = true;
	// show serial_dialog {""ch2-ring-zero-enabled-in-castle" = true;"};
	player_control = on;
	// show serial_dialog {"player_control = on;"};
	if (!debug_mode) {
		// show serial_dialog {"hex_control = on;"};
		hex_control = on;
		lights_control = off;
	} else {
		// show serial_dialog {"debug_mode; no need to enable hex control;"};
	}
	// show serial_dialog {"hex_control = on;"};
	"ch2-wait-for-hat-touch" = true;
	// show serial_dialog {""ch2-wait-for-hat-touch" = true;"};
	copy!("ch2-install-mainframeos")
	// show serial_dialog {"copy ch2-install-mainframeos;"};
}

"ch2-castle-13-ending" {
	player_control = off;
	serial_control = off;
	camera = geometry "camera-spot3";
	copy!("ch2-ending-fadein")
	wait 800ms;
	show dialog {
		Templeton "Did you hear that? Something changed."
		Sebastian "Ah, yessss! The mana boosters have spun up!"
		"Step aside, Your Majesty. I'll handle this."
	};
	entity "Sebastian" on_tick = "sebastian-to-three";
	wait 200ms;
	copy!("ch2-ending-fadeout")
	copy!("ch2-load-castle-1-special")
}

"interact-ch2-xa" {
	if ("ch2-toot-done") {
		goto "ch2-terminal-setup-check";
	} else {
		if (!"ch2-has-artifact") {
			player_control = off;
			show dialog {
				name "???" border_tileset codec
				"..."
				"...huh?"
				"Oh! Ohhh, is the light on? Hello?"
				"Oh my goodness. Is there actually someone there? Hello? Can you hear me?"

				PLAYER "I can hear you."

				name "???" border_tileset codec
				"Oh! It's a person! Yes, hello! My name is...."

				Lambda "Lambda! Yeah, call me Lambda!"
				"I'm speaking to you through XA, the Exa! It's this old intercom I set up ages ago. Looks like you're in the castle entrance. I'm surprised XA was still..."
				"Wait. Who are you? How did you even get in?"

				PLAYER "I'm %PLAYER%. The village elders sent me here to collect the castle artifact so I could defeat the Big Bad."
				"And I'm not a hacker, I just...\n...you know...\n...hack things. With Ring Zero."
				
				Lambda "No, no, that can't be right."
				"The village elders are the ones who told me to PROTECT the artifact! I have to keep it away from everyone at all costs!"

				PLAYER "Well we're going to need it soon. I don't know if you felt that earthquake last night, but the Big Bad is returning and I need it to defeat him."

				Lambda "The Big Bad, returning? Yes, I see. He might still have the power to trigger an earthquake, even after...."
				"I, um, don't know why the village elders would have changed their minds about this, but...."
				"Well, you're welcome to the castle artifact. It's over there, just to your left, inside the pillar."
			};
			copy!("ch2-artifact-walk")
			wait 300ms;
			show dialog {
				PLAYER "That was easy. I thought there would be a quest or something. Puzzles, at least."
				Lambda "Well, it doesn't exactly work right now, so...."
			};
			player direction = east;
			show dialog {
				PLAYER "Wait. What?"
				Lambda "That little thing can't do much on its own. The real powerful stuff was handled by the castle mainframe. They were linked wirelessly."
				"But the mainframe was crippled."
			};
			// player walks closer
			show dialog {
				PLAYER "Crippled? What happened?"
				Lambda "Well, ahh, I crippled it."
			};
			// player walks closer
			show dialog {
				PLAYER "What? Why?!"
				Lambda "I couldn't let the Big Bad have access to it again."
				"And we weren't using it for much otherwise."
				PLAYER "But now no one can use it!"
				Lambda "Small price to pay for keeping that power out of the Big Bad's hands. Although...."
				"That was easier to say before the earthquake. With the mainframe down we can't fix anything."
				"It's why you might as well have the portable interface. You could help out around here while I vet your story."
				PLAYER "Vet my story? You don't believe the village elders sent me?"
				Lambda "Well, um... this is all very complicated. I need to be sure that this isn't a trap."
				"If it helps, I don't think you're the Big Bad. He would have caused more mischief in that room, even with Ring Zero disabled."
			};
			if ("ch2-hax-attempted") {
				show dialog {
					PLAYER "Yeah, about that... why won't Ring Zero work in here?"
				};
			} else {
				show dialog {
					PLAYER "Ring Zero is disabled? Since when?"
					Lambda "Since you crossed the threshold."
				};
			}
			show dialog {
				Lambda "The castle walls are lined with aluminum. Acts as a Faraday cage. And Ring Zero's hex editor relies on some wireless services."
				"Normally, XA bridges the town's network with...."
				"You know what? There's a lot to explain, and it might be easier to chat with the artifact. Let's set it up."
			};
			player_control = on;
			"ch2-has-artifact" = true;
		} else {
			show dialog {
				Lambda "Let's get the artifact set up. I can help walk you through it."
			};
		}
		show dialog {
			Lambda "Er, that is, do you want help?"
			> "Yes, please!" = "ch2-terminal-setup-start"
			> "No, thanks." = "ch2-terminal-setup-nevermind"
		};
	}
}

"ch2-terminal-setup-check" {
	if ("ch2-wait-for-hat-touch") {
		show dialog {
			PLAYER "How do I work Ring Zero again?"
			Lambda "Hmm? What's that? Did you say something?"
			PLAYER "I want to see if Ring Zero is working now that the mainframe is back online."
			Lambda "Oh, yes, I see."
			"To open the hex editor, touch the hat at the top of the PCB you're holding. Should be just above the screen -- a shiny gold-colored area."
		};
	} else {
		show dialog {
			Lambda "Need help getting the terminal working?"
			> "Yes" = "ch2-terminal-setup-start"
			> "No" = "ch2-terminal-setup-nevermind"
		};
	}
}

"ch2-terminal-setup-nevermind" {
	if (!"ch2-toot-done") {
		show dialog {
			Lambda "Ah, okay! Um, if you change your mind, speak to XA again and I'll walk you through everything."
		};
		copy!("register-manual")
		"can-interrupt-dialog" = true;
		serial_control = on;
		show dialog {
			Lambda "To finish our conversation, type \"MAN\" into the console."
		};
		"can-interrupt-dialog" = false;
		if (serial_dialog closed) {
			show serial_dialog "spacer";
			show serial_dialog {
				"(Type <c>MAN</> to finish your conversation with Lambda.)"
			};
		}
	} else {
		"can-interrupt-dialog" = true;
		show dialog {
			Lambda "Ah, okay. Carry on!\n\nAlso, remember you can speak to me in the console with the command \"MAN\"."
		};
		"can-interrupt-dialog" = false;
	}
	self on_interact = "ch2-terminal-setup-check";
}

"ch2-terminal-message-test-success" {
	if (!"ch2-toot-done") {
		copy!("register-manual")
		"can-interrupt-dialog" = true;
		serial_control = on;
		show dialog {
			Lambda "Excellent! Let's continue our conversation using the terminal. Type \"MAN\" into the console to get things started."
		};
		"can-interrupt-dialog" = false;
		if (serial_dialog closed) {
			show serial_dialog "spacer";
			show serial_dialog {
				"(Type <c>MAN</> to continue your conversation with Lambda.)"
			};
		}
	} else {
		show dialog {
			Lambda "Excellent! You're all set!"
		};
	}
	self on_interact = "ch2-terminal-setup-check";
}

"look-ch2-castle-11" {
	show serial_dialog "spacer";
	show serial_dialog {
		"You looked around the <c>CASTLE HALLWAY FRONT</>."
	};
	if ("ch2-storyflag-round" < 5) {
		show serial_dialog {
			"\tThe ceiling has collapsed, probably from the recent earthquake. What's left standing appears stable, fortunately -- at least, structurally stable."
			" "
		};
	} else {
		show serial_dialog {
			"\tDespite a little bit of lingering damage from the recent quake, the castle entryway is much neater than before. The cobbled mainframe hums contentedly, and soon the rest of the castle, too, will be back to its old self."
			" "
		};
	}
}

"on_load-ch2-castle-11-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 11;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE HALLWAY FRONT</>..." };
	if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	} else if (warp_state == "walk_from-west") {
		player position = geometry "walk_from-west";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-11" {
	// ch2 room state
	"ch2-in-room" = 11;
	
	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-11") {
		show serial_dialog { "Discovered <bold><c>CASTLE HALLWAY FRONT</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-11" = true;
	} else {
		show serial_dialog { "Entering <bold>CASTLE HALLWAY FRONT</>..." };
	}


	// room unique things

	if (
		"ch2-installed-monitor"
		|| "ch2-carrying-monitor"
	) {
		copy!("ch2-hide-monitor")
	}

	// initialize everything
	copy!("ch2-map-init")

	// check if you do the cutscene or not
	if (!"ch2-cutseen-castle11") {
		copy!("ch2-cutscene-castle11")
	}
}

"on_tick-ch2-castle-11-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-11")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-1-special")
	} else if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-11")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-12-special")
	} else if (player intersects geometry "west-hitbox") {
		copy!("on_exit-ch2-castle-11")
		warp_state = "walk_from-east";
		copy!("ch2-load-castle-21-special")
	}
}

"on_go-castle-11-north" {
	copy!("on_exit-ch2-castle-11")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-12-special")
}

"on_go-castle-11-west" {
	copy!("on_exit-ch2-castle-11")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-21-special")
}

"on_go-castle-11-south" {
	copy!("on_exit-ch2-castle-11")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-1-special")
}

"ch2-ws-guess-album" {
	"ch2-ws-turn-value" = $album;
	if ("ch2-ws-album") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-album" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-analog" {
	"ch2-ws-turn-value" = $analog;
	if ("ch2-ws-analog") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-analog" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-audio" {
	"ch2-ws-turn-value" = $audio;
	if ("ch2-ws-audio") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-audio" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-aux" {
	"ch2-ws-turn-value" = $aux;
	if ("ch2-ws-aux") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-aux" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-bass" {
	"ch2-ws-turn-value" = $bass;
	if ("ch2-ws-bass") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-bass" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-beat" {
	"ch2-ws-turn-value" = $beat;
	if ("ch2-ws-beat") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-beat" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-bpm" {
	"ch2-ws-turn-value" = $bpm;
	if ("ch2-ws-bpm") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-bpm" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-broadcast" {
	"ch2-ws-turn-value" = $broadcast;
	if ("ch2-ws-broadcast") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-broadcast" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-cassette" {
	"ch2-ws-turn-value" = $cassette;
	if ("ch2-ws-cassette") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-cassette" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-chiptune" {
	"ch2-ws-turn-value" = $chiptune;
	if ("ch2-ws-chiptune") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-chiptune" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-codec" {
	"ch2-ws-turn-value" = $codec;
	if ("ch2-ws-codec") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-codec" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-compact" {
	"ch2-ws-turn-value" = $compact;
	if ("ch2-ws-compact") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-compact" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-frequency" {
	"ch2-ws-turn-value" = $frequency;
	if ("ch2-ws-frequency") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-frequency" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-headphones" {
	"ch2-ws-turn-value" = $headphones;
	if ("ch2-ws-headphones") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-headphones" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-hifi" {
	"ch2-ws-turn-value" = $hifi;
	if ("ch2-ws-hifi") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-hifi" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-laser" {
	"ch2-ws-turn-value" = $laser;
	if ("ch2-ws-laser") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-laser" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-lofi" {
	"ch2-ws-turn-value" = $lofi;
	if ("ch2-ws-lofi") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-lofi" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-media" {
	"ch2-ws-turn-value" = $media;
	if ("ch2-ws-media") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-media" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-microphone" {
	"ch2-ws-turn-value" = $microphone;
	if ("ch2-ws-microphone") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-microphone" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-midi" {
	"ch2-ws-turn-value" = $midi;
	if ("ch2-ws-midi") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-midi" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-mixing" {
	"ch2-ws-turn-value" = $mixing;
	if ("ch2-ws-mixing") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-mixing" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-music" {
	"ch2-ws-turn-value" = $music;
	if ("ch2-ws-music") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-music" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-phonograph" {
	"ch2-ws-turn-value" = $phonograph;
	if ("ch2-ws-phonograph") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-phonograph" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-radio" {
	"ch2-ws-turn-value" = $radio;
	if ("ch2-ws-radio") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-radio" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-recording" {
	"ch2-ws-turn-value" = $recording;
	if ("ch2-ws-recording") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-recording" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-rhythm" {
	"ch2-ws-turn-value" = $rhythm;
	if ("ch2-ws-rhythm") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-rhythm" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-sequencer" {
	"ch2-ws-turn-value" = $sequencer;
	if ("ch2-ws-sequencer") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-sequencer" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-song" {
	"ch2-ws-turn-value" = $song;
	if ("ch2-ws-song") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-song" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-soundtrack" {
	"ch2-ws-turn-value" = $soundtrack;
	if ("ch2-ws-soundtrack") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-soundtrack" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-speakers" {
	"ch2-ws-turn-value" = $speakers;
	if ("ch2-ws-speakers") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-speakers" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-stereo" {
	"ch2-ws-turn-value" = $stereo;
	if ("ch2-ws-stereo") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-stereo" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-stream" {
	"ch2-ws-turn-value" = $stream;
	if ("ch2-ws-stream") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-stream" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-subwoofer" {
	"ch2-ws-turn-value" = $subwoofer;
	if ("ch2-ws-subwoofer") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-subwoofer" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-surround" {
	"ch2-ws-turn-value" = $surround;
	if ("ch2-ws-surround") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-surround" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-synthesizer" {
	"ch2-ws-turn-value" = $synthesizer;
	if ("ch2-ws-synthesizer") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-synthesizer" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-tape" {
	"ch2-ws-turn-value" = $tape;
	if ("ch2-ws-tape") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-tape" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-treble" {
	"ch2-ws-turn-value" = $treble;
	if ("ch2-ws-treble") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-treble" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-vinyl" {
	"ch2-ws-turn-value" = $vinyl;
	if ("ch2-ws-vinyl") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-vinyl" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-vocoder" {
	"ch2-ws-turn-value" = $vocoder;
	if ("ch2-ws-vocoder") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-vocoder" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-volume" {
	"ch2-ws-turn-value" = $volume;
	if ("ch2-ws-volume") {
		"ch2-ws-turn-status" = $repeat;
	} else {
		"ch2-ws-volume" = true;
		"ch2-ws-turn-status" = $hit;
	}
	goto "ch2-ws-doturn";
}

"look-ch2-castle-12" {
	show serial_dialog "spacer";
	show serial_dialog {
		"You looked around the <c>CASTLE HALLWAY BACK</>."
	};
	if ("ch2-storyflag-round" < 5) {
		show serial_dialog {
			"\tThe air is a little stuffier here than it had been nearer the entrance. Perhaps more was destroyed in this room, more dust scattered and more moisture entrapped, or perhaps it's a sign that you've come deeper into the castle."
			" "
		};
	} else {
		show serial_dialog {
			"\tCleared of debris, the hall is much larger than it appeared when you first arrived. Without the monitor and it's welcoming slideshow, however, the room feels quite a bit emptier as well."
			" "
		};
	}
}

"on_load-ch2-castle-12-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 12;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE HALLWAY BACK</>..." };
	if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	} else if (warp_state == "walk_from-east") {
		player position = geometry "walk_from-east";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-12" {
	// ch2 room state
	"ch2-in-room" = 12;
	
	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-12") {
		show serial_dialog { "Discovered <bold><c>CASTLE HALLWAY BACK</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-12" = true;
	} else {
		show serial_dialog { "Entering <bold>CASTLE HALLWAY BACK</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-needle"
		|| "ch2-carrying-needle"
	) {
		copy!("ch2-hide-needle")
	}
	
	// initialize everything
	copy!("ch2-map-init")

	// check if you do the cutscene or not
	if (!"ch2-cutseen-castle12") {
		show dialog {
			Concierge "Welcome!"
		};
		"interrupt" = true;
		"ch2-cutseen-castle12" = true;
	}
}

"on_tick-ch2-castle-12-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-12")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-11-special")
	} else if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-12")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-13-special")
	} else if (player intersects geometry "east-hitbox") {
		copy!("on_exit-ch2-castle-12")
		warp_state = "walk_from-west";
		copy!("ch2-load-castle-31-special")
	}
}

"on_go-castle-12-north" {
	copy!("on_exit-ch2-castle-12")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-13-special")
}

"on_go-castle-12-east" {
	copy!("on_exit-ch2-castle-12")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-31-special")
}

"on_go-castle-12-south" {
	copy!("on_exit-ch2-castle-12")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-11-special")
}

"ch2-interact-guestbook" {
	"interrupt" = false;
	if (!"ch2-guestbook-signed") {
		if (!"interrupt3") {
			show dialog {
				PLAYER "Huh? It's just a book with a bunch of people's names."
				Concierge "Oh, yes! Do sign our guest book before you go!"
			};
			"interrupt3" = true;
		}
		show dialog {
			name "" "(Sign the guest book?)"
			> "Yes" = "ch2-interact-guestbook-signyes"
			> "No" = "ch2-interact-guestbook-signno"
		};
	} else {
		show dialog {
			PLAYER "There's my name, logged for the ages."
			Concierge "Thank you for signing the guest book! I hope you enjoy the remainder of your stay!"
		};
	}
}

"interact-ch2-concierge" {
	if (!"ch2-concierge-backstory") {
		if ("interrupt") {
			show dialog {
				PLAYER "Welcome?"
				Concierge "Yes, welcome to King Gibson's castle. I do hope you enjoy your visit!"
			};
		} else {
			show dialog {
				Concierge "Welcome to King Gibson's castle. I do hope you enjoy your visit!"
			};
		}
		show dialog {
			PLAYER "Um, thanks. Listen, I know things are messed up right now...."
			Concierge "Fear not! I am confident everyone is working to clear the doors and restore the intercom system."
			"You, at least, seem to have overcome the door problem on your own, and should be applauded for your resourcefulness."
			"You have my full support -- though alas, the best I can do to help is keep this phonograph turning."
			"You'll have moral support music, if nothing else!"
		};
		"ch2-concierge-backstory" = true;
		if ("ch2-storyflag-round" >= 2) {
			copy!("ch2-stereo-fix-proposal")
			"ch2-ws-backstory" = true;
		}
	} else if (
		"ch2-storyflag-round" < 2
		|| "ch2-needle-permission"
	) {
		if (!"ch2-needle-permission") {
			show dialog "ch2-trying-times" { //reused
				Concierge "In trying times, we may find ourselves with limited resources or a constrictive environment."
				"How admirable it is to acquire and leverage one's limited resources and perform great work anyway! I'll be cheering you on from here. Good luck!"
			};
		} else {
			if (
				"ch2-carrying-needle"
				|| "ch2-installed-needle"
			) {
				show dialog "ch2-trying-times";
			} else {
				show dialog "ch2-needle-prompt"; // defined when concierge is originally surprised
			}
		}
	} else {
		if ("ch2-ws-won") {
			copy!("ch2-ws-cutscene")
		} else if (!"ch2-ws-backstory") {
			copy!("ch2-stereo-fix-proposal")
		} else {
			show dialog {
				Concierge "Go on, now. I'll let you have the needle off this phonograph is you get the stereo working again. It's the black thing behind me."
			};
		}
	}
}

"ch2-touch-needle" {
	"interrupt" = false;
	if ("ch2-carrying-needle" || "ch2-installed-needle") {
		show dialog {
			PLAYER "Too bad the record won't work as a plate for the hard drive. It's the perfect size."
		};
		return;
	}
	if (!"interrupt2") {
		if (!"ch2-needle-firstlook") {
			show dialog {
				PLAYER "That's a funny looking trumpet."
				Concierge "It mechanically amplifies the vibrations captured by the needle upon the vinyl record."
				"I dusted it off after the earthquake damaged the intercom system and the stereo. I couldn't bear how quiet it was in here."
			};
			"ch2-needle-firstlook" = true;
		} else {
			show dialog {
				PLAYER "Definitely an old-timey look, isn't it?"
				Concierge "If you like this, you should see King Gibson's bedroom."
			};
		}
	}
	if ("ch2-storyflag-round" >= 2) {
		if ("ch2-needle-permission") {
			show dialog {
				name "" "(Pick up the phonograph needle?)"
				> "Yes" = "ch2-touch-needle-yes"
				> "No" = "ch2-touch-needle-no"
			};
		} else {
			if (!"ch2-ws-backstory") {
				show dialog {
					PLAYER "(Will the concierge get mad at me if I take the needle from this record player? I guess I should ask.)"
				};
			} else {
				show dialog {
					PLAYER "(I can have the needle off the phonograph once I fix the stereo. I better get on that.)"
				};
			}
		}
	}
}

"ch2-touch-needle-yes" {
	show dialog {
		name "" "(You pick up the needle!)"
	};
	copy!("ch2-hide-needle")
	copy!("ch2-pickup-needle")
	"interrupt2" = false;
	self on_interact = "ch2-touch-needle";
}

"ch2-ws-doturn" {
	show serial_dialog "spacer";
	copy!("ch2-ws-count-flags")
	show serial_dialog {
		wrap 100
		"                          <bold>WORD SEARCH!</>"
		"Find words meaningful to the stereo system to cut through its amnesia."
		"         Type a word! (or type Q to quit)            <y>Pts to win: $ch2-ws-flags-tally$/20</>"
	};
	copy!("ch2-ws-draw-map")
	copy!("ch2-ws-turn-message")
	show serial_dialog "ch2-ws-input";
	// if you didn't trigger one of the defined inputs, it counts as a miss:
	"ch2-ws-turn-value" = 0;
	"ch2-ws-turn-status" = $miss;
	goto "ch2-ws-doturn";
}

"ch2-ws-guess-quit" {
	"ch2-ws-turn-value" = 0;
	"ch2-ws-turn-status" = 0;
	copy!("ch2-ws-count-flags")
	show serial_dialog "spacer";
	if ("ch2-ws-flags-tally" == 0) {
		show serial_dialog {
			"<y>STEREO</>: All done for now? Well, thanks for taking a look."
		};
	} else if ("ch2-ws-flags-tally" < $toWin) {
		"diff" = $toWin;
		"diff" -= "ch2-ws-flags-tally";
		if ("diff" == 1) {
			show serial_dialog {
				"<y>STEREO</>: Oh oh oh, so close! I bet I only need <y>one more</> word before everything comes together! Try again soon, would ya?"
			};
		} else {
			show serial_dialog {
				"<y>STEREO</>: Done for now? Okay, thanks for trying."
				"\tOh, you know what? I bet if you found <y>$diff$</> more words, I'd be as right as rain. Try again later, if you would?"
			};
		}
	} else if ("ch2-ws-won") {
		show serial_dialog {
			"<y>STEREO</>: Hey! Thanks for helping me remember who I am! Good luck out there!"
		};
	} else {
		"ch2-ws-won" = true;
		// todo: make this happen if you talk to the concierge or whatever. Maybe make it so any badge button press will trigger the ws quit behavior, too?
		show serial_dialog {
			"<y>STEREO</>: Oh! Oh! Oh! Goodness! I think you've done it! I <bold>remember!</> I'm a <bold><y>STEREO SYSTEM</>! Hey, check this out! There's music inside me! LET'S GOOOOO!"
			" "
			# "Good for you!" = "ch2-ws-cutscene"
		};
	}
	entity "stereo" on_interact = "ch2-stereo-interact";
}

"ch2-stereo-interact" {
	"interrupt" = false;
	if (!"ch2-ws-backstory") {
		show dialog { PLAYER "A CD player or something? Looks half damaged." };
	} else if (!"ch2-stereo-backstory") {
		show dialog {
			PLAYER "?"
			"Oh, there's a place where the artifact can plug into it."
		};
		goto "ch2-stereo-intro1";
	} else {
		show dialog { PLAYER "All right, plugging in the artifact again." };
		goto "ch2-ws-doturn";
	}
}

"on_load-ch2-castle-13-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 13;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE THRONE ROOM</>..." };
	if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-13" {
	if (warp_state == "ch2 ending") {
		entity "door" on_tick = "yeet";
		entity "King Gibson" position = geometry "king-examine1";
		entity "Sebastian" position = geometry "end-sebastian";
		entity "Templeton" position = geometry "end-templeton1";
		goto "ch2-castle-13-ending";
	}
	// ch2 room state
	"ch2-in-room" = 13;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-13") {
		show serial_dialog { "Discovered <bold><c>CASTLE THRONE ROOM</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-13" = true;
	} else {
		show serial_dialog { "Entering <bold>CASTLE THRONE ROOM</>..." };
	}

	// room unique stuff

	if (warp_state == "Ch2 King Returns") {
		entity "door" on_tick = "yeet";
		camera = geometry "camera-spot2";
	} else if ("ch2-king-rescued") {
		entity "door" on_tick = "yeet";
		entity "King Gibson" position = geometry "king-examine1";
		entity "Sebastian" position = geometry "end-sebastian";
		entity "Templeton" position = geometry "end-templeton1";
		entity "Aurelius" position = geometry "end-fish";
		entity "Templeton" on_tick = "templeton-catalog-search";
		entity "King Gibson" on_tick = "king-debris-ponder";
	} else {
		entity "King Gibson" on_tick = "yeet";
	}

	if (
		"ch2-installed-goldfish"
		|| "ch2-carrying-goldfish"
	) {
		entity "Aurelius" on_tick = "yeet";
	}

	copy!("ch2-map-init")
	
	// check if you do the cutscene or not
	if (warp_state == "Ch2 King Returns") {
		"ch2-cutseen-castle13" = true; // in case you didn't see the whole prev cutscene, set this flag so the reunion cutscene will play out correctly
		copy!("ch2-cutscene-kingreturns")
	} else {
		if (!"ch2-cutseen-castle13") {
			copy!("ch2-cutscene-castle12")
		}
	}
}

"ch2-templeton-pace" {
	self position -> geometry "templeton1" origin over 400ms;
	self position -> geometry "templeton2" origin over 400ms;
	if (!"ch2-templeton-pace") {
		goto "null_script";
	}
}

"on_tick-ch2-castle-13-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-13")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-12-special")
	} else if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-13")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-14-special")
	}
}

"on_tick-ch2-castle-13" {
	if ("ch2-king-rescued") {
		if (player intersects geometry "north-hitbox") {
			warp_state = "walk_from-south";
			copy!("ch2-load-castle-14-special")
		}
	}
}

"on_go-castle-13-north" {
	copy!("on_exit-ch2-castle-13")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-14-special")
}

"on_go-castle-13-south" {
	copy!("on_exit-ch2-castle-13")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-12-special")
}

"ch2-touch-goldfish" {
	if (!"ch2-cutseen-castle14") {
		show dialog { // don't use "self"; "Aurelius" is a label!
			Aurelius "Do please check on King Gibson, would you? He's in his bedroom, just to the north of us."
		};
	} else if (!"ch2-king-rescued") {
		copy!("ch2-king-unharmed")
		if ("ch2-king-report") {
			show dialog {
				Aurelius "Godspeed."
			};
		}
		"ch2-king-report" = true;
	} else {
		show dialog {
			Aurelius "Once the mainframe is repaired, we will be much better equipped to clear all the debris at once. Don't let us keep you."
		};
		if ("ch2-storyflag-round" >= 3) {
			show dialog {
				PLAYER "Actually, I could use your help to fix it."
				Aurelius "Of course. Anything."
				PLAYER "I sort of need to borrow... you."
				"We're short a CPU. And I need a volunteer to act as the \"thinking\" part --"
			};
			copy!("interrupt-king-walk")
			copy!("interrupt-templeton-walk")
			entity "King Gibson" current_animation = 2;
			show dialog {
				GIBSON emote 1 "What's this? What are you talking about?"
			};
			entity "King Gibson" current_animation = 0;
			show dialog {
				PLAYER "It'd be temporary. After the mainframe is fixed, we can mail order a real CPU, and we can put you back to normal when it arrives. But for this short little while --"
				Aurelius "I'll do it."
				Templeton "%Aurelius%!"
				Aurelius "The king has returned, so I'm of little use now."
				GIBSON "Don't say that."
				Aurelius "This is an emergency, and I can offer no physical assistance. You've valued me for my mind, haven't you? I've been your advisor. Ambassador."
				GIBSON "And friend!"
				Aurelius "It's only temporary. And it sounds like an interesting adventure. A new perspective... a novel experience. Wouldn't you say?"
				Sebastian "And what if it's not temporary? This doesn't sound safe!"
				Aurelius "I've read a monograph on this very subject. It's safe."
				GIBSON emote 3 "...."
				"If this is really what you want, I won't stop you."
				Aurelius "It will empower the rest of you."
				GIBSON "Very well. We'll continue to do our best here."
			};
			entity "Aurelius" position = geometry "hiding-spot"; // doing yeet now aborts the script early!
			copy!("ch2-pickup-goldfish")
			show dialog {
				name "" "(You acquired a goldfish!)"
				GIBSON "I'm counting on you both. Good luck."
			};
			copy!("resume-king-walk")
			copy!("resume-templeton-walk")
			entity "Aurelius" on_tick = "yeet";
		}
	}
}

"interact-ch2-sebastian" {
	copy!("face-player")
	if (!"ch2-cutseen-castle14") {
		show dialog {
			SELF "Mark my words: he's ignoring us. He's all but abdicated."
		};
	} else if (!"ch2-king-rescued") {
		copy!("ch2-king-unharmed")
		if ("ch2-king-report") {
			show dialog {
				SELF "Forget the king. He's on his own."
			};
		}
		"ch2-king-report" = true;
	} else {
		show dialog {
			SELF "%Templeton%, I promise not to yell at you for eating my spellbooks again if you can produce the right page in the next five minutes."
		};
		entity "Templeton" on_tick = "null_script";
		entity "Templeton" direction = entity "Sebastian";
		// pauses fussing
		show dialog {
			Templeton "Darn it, you made me forget the filing number! Now I'll have to go through the card catalog all over again!"
		};
		entity "Templeton" on_tick = "templeton-catalog-search";
	}
}

"interact-ch2-templeton" {
	copy!("face-player")
	if (!"ch2-cutseen-castle14") {
		show dialog {
			SELF "I know King Gibson doesn't always get along with us, but this silence is unlike him. I'm worried."
		};
	} else if (!"ch2-king-rescued") {
		copy!("ch2-king-unharmed")
		if ("ch2-king-report") {
			show dialog {
				SELF "Oh, goodness! Thank you, thank you!"
			};
		}
		"ch2-king-report" = true;
	} else {
		copy!("interrupt-walk")
		show dialog {
			SELF "Thank you for rescuing the king. We were all very worried about him."
			Sebastian "%Templeton%, please don't forget that you're trying to find my physics spellbook. The gravitation spell, please?"
		};
		copy!("resume-walk")
		show dialog {
			SELF "Yes, yes, of course."
		};
	}
}

"templeton-catalog-search" {
	copy!("tick-rand-mini") // from bob's club basement
	entity "Templeton" position -> geometry "end-templeton2" origin over 200ms;
	copy!("tick-rand-mini") // from bob's club basement
	entity "Templeton" position -> geometry "end-templeton1" origin over 200ms;
	copy!("tick-rand-mini") // from bob's club basement
}

"king-debris-ponder" {
	copy!("tick-rand-mini") // from bob's club basement
	self position -> geometry "king-examine2" origin over 700ms;
	self direction = south;
	copy!("tick-rand-broad") // from bob's club basement
	wait 400ms;
	self position -> geometry "king-examine1" origin over 700ms;
	self direction = south;
	copy!("tick-rand-broad") // from bob's club basement
}

"interact-ch2-gibson-throneroom" {
	copy!("interrupt-walk")
	if ("ch2-storyflag-round" < 3) {
		show dialog {
			GIBSON "My staff and I are reunited, thanks to you."
			"I am in your debt."
		};
	} else if (!"ch2-clock-permission") {
		show dialog {
			PLAYER "So, Your Majesty, about the clock in your bedroom...."
			GIBSON "What? What's this about my heirloom grandfather clock?"
			PLAYER "I sort of want to borrow it to --"
			GIBSON "Fine then. Have it, if you want it."
			PLAYER "Really? Just like that?"
			GIBSON "It's just an object. A thing. Replaceable."
			"You reunited me with my advisors. My friends. That's worth far more to me than a piece of furniture."
			"Take it, if you feel you can make good use of it."
			PLAYER "Thank you very much!"
		};
		"ch2-clock-permission" = true;
	} else {
		if (
			"ch2-installed-goldfish"
			|| "ch2-carrying-goldfish"
		) {
			show dialog {
				GIBSON "Take good care of Aurelius for me."
				PLAYER "I will."
			};
		} else {
			show dialog {
				GIBSON "My staff and I are reunited. You have my thanks."
			};
		}
	}
	copy!("resume-walk")
}

"ch2-gibson-scramble" {
	"ch2-gibson-x" = entity "King Gibson" x;
	if ("ch2-gibson-pos-odd") {
		"ch2-gibson-x" += 1;
		"ch2-gibson-pos-odd" = false;
	} else {
		"ch2-gibson-x" -= 1;
		"ch2-gibson-pos-odd" = true;
	}
	entity "King Gibson" x = "ch2-gibson-x";
	wait 50ms;
}

"on_load-ch2-castle-14" {
	if (warp_state == "king returns teleport") {
		goto "ch2-cutscene-kingreturns-bedroom";
	}
	// ch2 room state
	"ch2-in-room" = 14;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-14") {
		show serial_dialog { "Discovered <bold><c>KING GIBSON'S BEDROOM</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-14" = true;
	} else {
		show serial_dialog { "Entering <bold>KING GIBSON'S BEDROOM</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-clock"
		|| "ch2-carrying-clock"
	) {
		copy!("ch2-hide-clock")
	}
	if (
		"ch2-storyflag-round" >= 5
		|| "ch2-king-rescued"
	) {
		entity "King Gibson" on_tick = "yeet";
		entity "keypad" on_interact = "null_script";
	}

	// initialize everything
	copy!("ch2-map-init")

	if ("ch2-storyflag-round" < 5) {
		// check if you do the cutscene or not
		if (!"ch2-cutseen-castle14") {
			player_control = off;
			wait 400ms;
			entity "King Gibson" current_animation = 2;
			show dialog {
				KING emote 1 "?"
			};
			entity "King Gibson" on_tick = "ch2-gibson-scramble";
			entity "King Gibson" current_animation = 3;
			show dialog {
				KING emote 2 "!!!"
				"Intruder! Someone's in my bedroom!"
			};
			player direction = entity "King Gibson";
			show dialog {
				KING emote 2 "Help! Guards!"
			};
			entity "King Gibson" on_tick = "null_script";
			entity "King Gibson" current_animation = 2;
			wait 400ms;
			show dialog {
				KING emote 1 "But no, of course. I'm alone."
			};
			entity "King Gibson" current_animation = 0;
			wait 1100ms;
			entity "King Gibson" direction = west;
			wait 350ms;
			show dialog {
				KING emote 3 "They locked me in here to rot. Why would they bother with me now?"
			};
			entity "King Gibson" direction = north;
			show dialog {
				KING emote 3 "Well, assassin, do your worst. Get it over with."
				PLAYER "Whoa, whoa, whoa! Calm down, sir! Er, Your Majesty! I'm not an assassin!"
			};
			entity "King Gibson" direction = south;
			show dialog {
				KING "Then you've come to mock me."
				PLAYER "No, of course not. I'm here to check up on you. Your -- um, advisors? -- are very worried about you."
				KING "I doubt that. They've disabled the locking mechanism on the door, and they won't answer the intercom. I've tried to reach them dozens of times."
				PLAYER "Intercom?"
				KING "Yes. That panel by the door, next to the keypad."
			};
			entity "King Gibson" direction = north;
			show dialog {
				KING emote 3 "Hmph. I'm sure Sebastian is halfway through a coup d'etat by now."
				PLAYER "But they said they've tried calling you."
				"Could it be... perhaps the intercom is broken, too?"
			};
			entity "King Gibson" direction = south;
			show dialog {
				KING "Broken?"
				PLAYER "Well, there was an earthquake. Maybe that's what busted the lock."
				"They said they've tried to call you, but haven't heard anything back. In fact, they think YOU'RE ignoring THEM."
				KING "Ignoring them? No, I would never...."
				PLAYER "They said you had an argument last night."
				KING "Yes but --"
			};
			entity "King Gibson" direction = west;
			show dialog {
				KING emote 3 "*sigh*"
				"I thought... I thought maybe I had gone too far this time. That they had finally written me off."
			};
			entity "King Gibson" direction = south;
			show dialog {
				KING "They really tried to call me?"
				"This whole time, it was only a broken line of communication? They don't hate me?"
				PLAYER "The big, blue one is worried you might be hurt from the earthquake."
				"It was the goldfish who asked me to check up on you."
				KING "I am relieved to hear that."
			};
			entity "King Gibson" position -> geometry "walk-spot" origin over 800ms;
			show dialog {
				KING "If you were able to enter this room, you must have the serial artifact working. Is that correct?"
				PLAYER "Yeah."
				KING "If the intercom -- and the door locks -- were broken in the earthquake, then you should be able to plug the artifact into the keypad and do some diagnostics."
				"If you would?"
			};
			entity "King Gibson" on_tick = "face-player";
			"ch2-cutseen-castle14" = true;
			player_control = on;
		}
	}
}

"on_tick-ch2-castle-14" {
	if (
		"ch2-storyflag-round" >= 5
		|| "ch2-king-rescued"
	) {
		if (player intersects geometry "south-hitbox") {
			warp_state = "walk_from-north";
			copy!("ch2-load-castle-13-special")
		}
	}
}

"on_go-castle-14-south" {
	copy!("on_exit-ch2-castle-14")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-13-special")
}

"ch2-touch-clock" {
	if ("ch2-storyflag-round" < 3) {
		if (!"ch2-clock-firstlook") {
			show dialog {
				PLAYER "Wow, this thing looks like it's a million years old."
			};
			"ch2-clock-firstlook" = true;
		} else {
			show dialog {
				PLAYER "What a robust ticking ambience."
			};
		}
	} else {
		if (!"ch2-king-rescued") {
			show dialog {
				PLAYER "Um, excuse me, Your Majesty. I sort of need this clock --"
				KING "Clock? What are you on about? Stay focused, please! Get this door working, and then we can discuss whatever else you want."
			};
		} else if (!"ch2-clock-permission") {
			show dialog {
				PLAYER "Can I just take this, though? Maybe I should ask the king first."
			};
		} else {
			show dialog {
				name "" "(Pick up the clock?)"
				> "Yes" = "ch2-touch-clock-yes"
				> "No" = "ch2-touch-clock-no"
			};
		}
	}
}

"interact-ch2-gibson-bedroom" {
	if (!"ch2-keypad-backstory") {
		show dialog {
			KING "If you would, please use the artifact to interface with the keypad by the door. You can probably run some diagnostics or something."
			"Get me out of here."
		};
	} else if (!"ch2-architect-backstory") {
		show dialog {
			PLAYER "Your Majesty, do you happen to know what the default keypad password is?"
			KING "I did help set that thing up, but I don't remember...."
			"Oh, actually, there was some trick to it, yes."
			"I wanted the architect to incorporate the password into the building itself, such that it wasn't written down in an obvious way, but we could still derive the password again if we had to."
			PLAYER "You incorporated the password into the building?"
			KING "Yes, all over the castle. Only someone who could get into every room -- which is to say, someone with the king's authority -- should be able to acquire the whole password. That was my intention."
			"At the present moment, I suppose that means you and you alone."
			PLAYER "Written where exactly?"
			KING "One letter per room, but I don't know how the architect ended up implementing the idea, I'm afraid."
			"Just... one letter per room."
		};
		"ch2-architect-backstory" = true;
	} else {
		show dialog {
			PLAYER "Remind me how to derive the default keypad password again?"
			KING "Well, I only wanted someone who could get into every room -- which is to say, someone with the king's authority -- to be able to recover every letter in the password."
			"But I don't know how the architect ended up implementing the idea, beyond the edict of \"one letter hidden per room.\""
			PLAYER "The architect? That means...."
			"These letters won't be incorporated into furniture, or paint, or the banners, or something that could be replaced or switched around by someone who didn't know it was supposed to be a hint."
			"That leaves the infrastructure itself: the walls, floors, ceiling. Something like that?"
			KING "Exactly."
		};
	}
}

"interact-ch2-keypad" {
	// note that you can't run this script before the cutscene, so no need to have "neutral" "pre-quest" behavior
	if (!"ch2-king-rescued") {
		if (!"interrupt") {
			show dialog {
				PLAYER "Oh, there's something written on the bottom of the keypad."
				name "(keypad)" "The default admin password can be found throughout the castle's --"
				PLAYER "Dang, the text after that is rubbed off. I can't read it." "The admin password is found throughout the castle's what?"
			};
			"interrupt" = true;
			"ch2-keypad-backstory" = true;
		}
		goto "interact-ch2-keypad-prompt";
	}
}

"interact-ch2-keypad-good-pass" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<g>DOOR UNLOCKED</>"
	};
	self on_interact = "interact-ch2-keypad-prompt";
	copy!("capture_player_state")
	"kingpos-x" = entity "King Gibson" x;
	"kingpos-y" = entity "King Gibson" y;
	// not necessary to capture the king's direction, as he always faces the player
	warp_state = "king returns teleport";
	load map "ch2-castle-14-doorless";
}

"ch2-cutscene-kingreturns-bedroom" {
	copy!("restore_player_state")
	entity "King Gibson" x = "kingpos-x";
	entity "King Gibson" y = "kingpos-y";
	player_control = off;
	wait 600ms;
	show dialog {
		KING "!!"
		"Aha! You've done it! At last, I'm free!"
	};
	entity "King Gibson" on_tick = "ch2-king-leaves";
	wait 400ms;
	camera fade out -> black over 600ms;
	warp_state = "Ch2 King Returns";
	load map "ch2-castle-13";
}

"on_load-ch2-castle-21-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 21;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>WORKSHOP</>..." };
	if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-east") {
		player position = geometry "walk_from-east";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-21" {
	if (warp_state == "ch2 ending") {
		goto "ch2-castle-21-ending";
	}
	// ch2 room state
	"ch2-in-room" = 21;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-21") {
		show serial_dialog { "Discovered <bold><c>WORKSHOP</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-21" = true;
	} else {
		show serial_dialog { "Entering <bold>WORKSHOP</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-abacus"
		|| "ch2-carrying-abacus"
	) {
		copy!("ch2-hide-abacus")
	}
	copy!("ch2-map-init")
	if (!"ch2-cutseen-castle21") {
		player_control = off;
		wait 500ms;
		entity "Frankie" direction = player;
		wait 250ms;
		entity "Jean-Paul" direction = player;
		wait 140ms;
		entity "Jean-Paul" strafe = 2;
		entity "Jean-Paul" position -> geometry "birdstep" origin over 150ms;
		entity "Jean-Paul" strafe = 0;
		entity "Jean-Paul" direction = east;
		wait 200ms;
		player direction = entity "Jean-Paul";
		show dialog {
			// TR because their portrait will block them otherwise
			// Player is okay to still use BR (their default)
			JEANPAUL "Whoa! WHOA! Someone's here!"
		};
		wait 300ms;
		entity "Jean-Paul" position -> geometry "birdstep2" origin over 240ms;
		wait 100ms;
		player direction = entity "Frankie";
		show dialog {
			Frankie "You can move between rooms? How are you doing that?"
			PLAYER "I have this handheld artifact thingy, which lets me type --"
		};
		player direction = entity "Jean-Paul";
		show dialog {
			JEANPAUL "You have a portable terminal with you?"
			"Oh, wow. We'd appreciate any help you can lend us. Maybe we can get on top of things now!"
		};
		wait 100ms;
		entity "Jean-Paul" direction = north;
		wait 500ms;
		entity "Jean-Paul" direction = east;
		wait 200ms;
		entity "Jean-Paul" direction = south;
		entity "Frankie" direction = south;
		player_control = on;
		"ch2-cutseen-castle21" = true;
	}
}

"on_tick-ch2-castle-21-doorless" {
	if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-21")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-22-special")
	} else if (player intersects geometry "east-hitbox") {
		copy!("on_exit-ch2-castle-21")
		warp_state = "walk_from-west";
		copy!("ch2-load-castle-11-special")
	}
}

"on_go-castle-21-north" {
	copy!("on_exit-ch2-castle-21")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-22-special")
}

"on_go-castle-21-east" {
	copy!("on_exit-ch2-castle-21")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-11-special")
}

"ch2-touch-abacus" {
	if ("ch2-storyflag-round" < 3) {
		entity "Frankie" direction = player;
		if (!"ch2-abacus-firstlook") {
			show dialog {
				PLAYER alignment TR "What's this? One of those kids toys from a dentist office?"
				Frankie "It's an old counting device called an abacus."
			};
			"ch2-abacus-firstlook" = true;
		}
		show dialog {
			PLAYER alignment TR "It looks fun to clack those beads up and down."
			Frankie "It is! It makes a great sound."
		};
		entity "Frankie" direction = south;
		return;
	}
	if ("ch2-abacus-permission") {
		show dialog {
			name "" "(Pick up the abacus?)"
			> "Yes" = "ch2-touch-abacus-yes"
			> "No" = "ch2-touch-abacus-no"
		};
		// auto end due to branching dialog
	}
	if (!"ch2-abacus-backstory") {
		show dialog {
			PLAYER alignment TR "Hey, does this abacus belong to anyone?"
		};
		entity "Frankie" direction = player;
		player direction = entity "Frankie";
		show dialog {
			Frankie "It's mine. Why?"
			PLAYER alignment TR "Oh, um, I was hoping I could use it for something."
			Frankie "I'd let you borrow it, but I'm actually using it right now."
			PLAYER alignment TR "Really?"
			Frankie "Yeah. No joke, I'm using it to store the value of a couple numbers."
			"But tell you what -- you can move around between rooms freely, right?"
			"I left the manual for my HP35s -- my scientific calculator -- back in the town library a few days ago. If you fetched it for me, I can get past this weird spot in my program."
			"I won't need the abacus after that."
			PLAYER alignment TR "Cool, so all I need to do is grab that manual?"
			Frankie "If you would. It's black with a blue stripe on the top. Thanks."
		};
		"ch2-abacus-backstory" = true;
		"ch2-want-manual" = true;
		copy!("ch2-handoff-abacus-to-manual")
		entity "Frankie" direction = south;
	} else {
		show dialog {
			PLAYER "(I'll need to deliver the calculator manual to Frankie before I'm allowed to take this.)"
		};
	}
}

"ch2-touch-abacus-yes" {
	show dialog {
		name "" "(You pick up the abacus!)"
	};
	copy!("ch2-hide-abacus")
	copy!("ch2-pickup-abacus")
	self on_interact = "null_script";
}

"interact-ch2-jeanpaul" {
	copy!("face-player")
	if ("ch2-storyflag-round" < 3) {
		show dialog {
			JEANPAUL "The rubble is too much for us to move on our own, so instead we've been doing damage assessment for the castle's digital systems."
		};
	} else if (
		"ch2-carrying-ramchips"
		|| "ch2-installed-ramchips"
	) {
		show dialog {
			JEANPAUL "Good luck building your computer."
		};
	} else if (!"ch2-want-ramchips") {
		"CALLBACK" = 1;
		goto "interact-ch2-room21-split";
	} else if ("interrupt") {
		show dialog {
			JEANPAUL "Sea Moss is an odd duck."
			PLAYER alignment TL "Wait, he's a duck?"
			JEANPAUL "Erm, no, he's a stone golem, but let's just say he's a creative character."
		};
	} else {
		copy!("interact-ch2-room21-split-s")
	}
	self direction = south;
}

"interact-ch2-frankie" {
	copy!("face-player")
	if ("ch2-storyflag-round" < 3) {
		show dialog {
			Frankie "If we can get the intercom system working, we can coordinate with people trapped in other rooms."
			"We've been able to reestablish contact with the room north of us, but that's it. There's a lot of work left for us to do."
		};
		entity "Frankie" direction = south;
		return;
	}
	// Calculator manual stuff
	if ("ch2-carrying-manual") {
		show dialog {
			PLAYER alignment TR "Hey, I brought your calculator manual."
			Frankie "Oh, thanks!"
			"Perfect! Now I can figure out why my program isn't working correctly."
			"Go ahead and take the abacus. I won't need it anymore."
			PLAYER alignment TR "Thank you!"
		};
		"ch2-carrying-manual" = false;
		"ch2-installed-manual" = true;
		"ch2-abacus-permission" = true;
		entity "Frankie" direction = south;
		return;
	}
	if ("ch2-abacus-backstory") {
		if (!"ch2-abacus-permission") {
			entity "Frankie" direction = player;
			show dialog {
				PLAYER alignment TR "Where did you say the manual was again?"
				Frankie "The manual for my HP35s? It's in the library, in town. Black with a blue stripe at the top."
				"I'll let you have my abacus if you bring it to me."
				PLAYER alignment TR "Okay. Be right back."
			};
			entity "Frankie" direction = south;
			return;
		}
	}
	if (
		"ch2-carrying-ramchips"
		|| "ch2-installed-ramchips"
	) {
		show dialog {
			Frankie "Hey, if you ever need something soldered, just let us know. We'd be happy to walk you though it."
		};
		entity "Frankie" direction = south;
		return;
	}
	if (!"ch2-want-ramchips") {
		"CALLBACK" = 2;
		goto "interact-ch2-room21-split";
	} else if ("interrupt") {
		show dialog {
			Frankie "Sea Moss sure loves his snacks."
			"Because... you know."
		};
	} else {
		copy!("interact-ch2-room21-split-s")
	}
	entity "Frankie" direction = south; // also added to all "early returns" O.o
}

"interact-ch2-room21-split" {
	entity "Frankie" direction = player;
	entity "Jean-Paul" direction = player;
	show dialog {
		PLAYER "So I'm rebuilding the castle mainframe, and I heard you guys might be able to help me get some RAM. Lambda couldn't find any to spare."
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "Lambda? Who's that?"
		PLAYER "He's someone helping me."
	};
	if (!"ch2-lambda-deletion-backstory") {
		show dialog {
			PLAYER "Though... I thought you might know him. He seems like a pretty important person around here."
			JEANPAUL "What does he look like?"
			PLAYER "I don't know. I've heard his voice before, but mostly we talk over text chat."
		};
		player direction = entity "Frankie";
		show dialog {
			Frankie "Sounds fishy to me."
			PLAYER "...."
		};
	}
	show dialog {
		PLAYER "Anyway, if you don't have any RAM I can use, do you have any ideas for a substitute? It's okay if it's abstract."
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "\"Abstract?\""
		PLAYER "Yeah, so like what even is RAM?"
		JEANPAUL "It's a computer's working memory. Any programs that are running, or images or text that is loaded, or anything at all...."
		"All that data needs somewhere to sit while it's being worked on."
	};
	player direction = entity "Frankie";
	show dialog {
		Frankie "Or shown on a screen."
		PLAYER "Right, so for an \"abstract\" computer, what could work instead? A notebook? A jelly bean jar?"
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "How abstract are we talking?"
		PLAYER "Well, so far I've made a hard drive from a dinner plate and a phonograph needle."
		JEANPAUL "...Yikes."
	};
	// They all turn toward each other
	show dialog {
		JEANPAUL "Well, the guy who can help most isn't here right now."
	};
	player direction = entity "Frankie";
	show dialog {
		Frankie "He's a bit distractable."
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "A bit?!"
	};
	player direction = entity "Frankie";
	show dialog {
		Frankie "Yeah, maybe that was an understatement. But he was away when the earthquake hit. Don't know where he is, but wherever he is, he's stuck in that room."
		PLAYER "Well, who is he? What does he look like?"
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "His name is Sea Moss, and he's a giant stone golem. Can't miss him."
	};
	if ("ch2-seamoss-backstory") {
		show dialog {
			PLAYER "Wait, I think I saw that guy. He was in the castle kitchen."
		};
		player direction = entity "Frankie";
		show dialog {
			Frankie "No surprise there!"
		};
		player direction = entity "Jean-Paul";
		show dialog {
			JEANPAUL "Yep, that's him."
		};
	} else {
		player direction = entity "Frankie";
		show dialog {
			Frankie "He's almost certainly near the kitchen. East wing. That's the first place I'd look."
		};
	}
	player direction = entity "Frankie";
	show dialog {
		Frankie "He'll definitely be able to find you an \"abstract\" solution."
	};
	player direction = entity "Jean-Paul";
	show dialog {
		JEANPAUL "Good luck, kid."
	};
	"ch2-want-ramchips" = true;
	copy!("ch2-handoff-ramchips-to-seamoss")
	"interrupt" = true;
	entity "Jean-Paul" direction = south;
	entity "Frankie" direction = south;
	if ("CALLBACK" == 1) {
		"CALLBACK" = 0;
		self on_interact = "interact-ch2-jeanpaul";
		return;
	} else if ("CALLBACK" == 2) {
		"CALLBACK" = 0;
		self on_interact = "interact-ch2-frankie";
		return;
	} else {
		show serial_dialog {
			"<r>DEBUG></>: Something went wrong splitting into entity wrapup scripts after shared behavior in 'interact-ch2-room21-split'! 'CALLBACK' value: $CALLBACK$"
		};
	}
}

"interact-ch2-goose" {
	if ("ch2-installed-minirake-99") {
		show dialog {
			PLAYER "I guess the goose likes me."
			Goose "Honk!"
		};
	} else if (!"ch2-carrying-minirake-99") {
	    show dialog {
			name "" "(An image of the goose honking atop a mountain of rakes floods your mind.)"
			PLAYER "Did the goose just..."
	    	Goose "HONK! (with a desire for rakes?)"
			PLAYER "Must have been my imagination."
		};
    } else { // rake is carried, but not installed
		show dialog {
			name "" "(You feel compelled to present the rake to the goose like a treasure to Caesar.)"
			PLAYER "Um, here you go."
			name "" "(You give the rake to the goose!)"
			name "" "(The goose seems to fluff its feathers and almost glow with an RGB shimmer. Somehow it seems stronger, and it honks with a mischievious smile in eyes.)"
			PLAYER "We seem to be an... accomplice? Or perhaps this is a new partnership?"
		};
		"ch2-carrying-minirake-99" = false;
		"ch2-installed-minirake-99" = true;
    }
}

"on_load-ch2-castle-22-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 22;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>SERVER ROOM</>..." };
	if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	} else if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-22" {
	if (warp_state == "ch2 ending") {
		goto "ch2-castle-22-ending";
	}
	// ch2 room state
	"ch2-in-room" = 22;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-22") {
		show serial_dialog { "Discovered <bold><c>SERVER ROOM</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-22" = true;
	} else {
		show serial_dialog { "Entering <bold>SERVER ROOM</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-powersupply"
		|| "ch2-carrying-powersupply"
	) {
		copy!("ch2-hide-powersupply")
	}
	
	copy!("ch2-map-init")
}

"on_tick-ch2-castle-22-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-22")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-21-special")
	} else if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-22")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-23-special")
	}
}

"on_go-castle-22-north" {
	copy!("on_exit-ch2-castle-22")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-23-special")
}

"on_go-castle-22-south" {
	copy!("on_exit-ch2-castle-22")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-21-special")
}

"interact-ch2-scuzzy" {
	player_control = off;
	copy!("interrupt-walk")
	if (!"ch2-scuzzy-backstory") {
		show dialog {
			SELF "The quake caused a lot of infrastructure damage around here. We're trying to reroute things and compensate with software."
		};
		"ch2-scuzzy-backstory" = true;
	} else {
		show dialog {
			SELF "In a metaphorical sense, the castle a computer."
			"Each room has its specialized function, and resources and information may flow between rooms when they are connected."
			"In isolation each room -- and each of us -- are capable of little. But when we can connect people to each other, we can collaborate and build amazing things."
		};
		copy!("resume-walk")
		wait 500ms;
		copy!("interrupt-walk")
		show dialog {
			SELF "I mean, the castle is also a computer in a LITERAL sense, too...."
		};
	}
	copy!("resume-walk")
	player_control = on;
}

"interact-ch2-ckwatt" {
	copy!("face-player")
	if (!"ch2-ckwatt-backstory") {
		show dialog {
			SELF "Huh? You need a power supply?"
			"Go ahead and take this one."
			PLAYER "You're sure?"
			SELF "Sure. My new rig needed something more beefy than this, so I bought a better one a while back. This one is extra."
			PLAYER "Neat. Thank you!"
			SELF "No prob."
		};
		"ch2-ckwatt-backstory" = true;
		"ch2-powersupply-permission" = true;
	} else {
		show dialog {
			SELF "When you upgrade computers regularly, you tend to accumulate extra stuff. After a while, it can start to take up a lot of space."
			"Glad that old power supply will see some use."
		};
	}
	self direction = south;
}

"ch2-touch-powersupply" {
	if (!"ch2-powersupply-permission") {
		show dialog {
			PLAYER "This has a power cable coming out of it, so it must be the power supply."
			"But it probably belongs to someone. I better ask permission before taking it."
		};
		return;
	}
	if (!"interrupt") {
		show dialog {
			PLAYER "All right, power supply!"
		};
		"interrupt" = true;
	}
	if ("ch2-powersupply-permission") {
		show dialog {
			name "" "(Pick up the power supply?)"
			> "Yes" = "ch2-touch-powersupply-yes"
			> "No" = "ch2-touch-powersupply-no"
		};
	}
}

"on_load-ch2-castle-23-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 23;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>POWER PLANT</>..." };
	if (warp_state == "walk_from-south") {
		player position = geometry "walk_from-south";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-23" {
	// ch2 room state
	"ch2-in-room" = 23;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-23") {
		show serial_dialog { "Discovered <bold><c>POWER PLANT</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-23" = true;
	} else {
		show serial_dialog { "Entering <bold>POWER PLANT</>..." };
	}

	// initialize everything
	copy!("ch2-map-init")
	// DEBUG
	if (debug_mode) {
		command "get" + "thing" = "ch2-pickup-cactuscooler";
		show serial_dialog {
			" "
			"<y>DEBUG></> <c>GET THING</> to acquire Cactus Cooler"
		};
	}
}

"on_tick-ch2-castle-23-doorless" {
	if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-23")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-22-special")
	}
}

"ch2-powerplant-supervise" {
	self direction = north;
	copy!("tick-rand-mini") // from bob's club basement
	self position -> geometry "walk2" origin over 600ms;
	self direction = north;
	copy!("tick-rand-broad") // from bob's club basement
	self position -> geometry "walk1" origin over 600ms;
	self direction = north;
	copy!("tick-rand-broad") // from bob's club basement
}

"on_go-castle-23-south" {
	copy!("on_exit-ch2-castle-23")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-22-special")
}

"interact-ch2-helvetica" {
	copy!("interrupt-walk")
	show dialog {
		SELF "It doesn't look like anything serious was damaged in this equipment. Still, we'd best be vigilant for a while."
	};
	copy!("resume-walk")
}

"rocco-work-fancy" {
	entity "Rocco" current_animation = $idle;
	"tempvar2" ?= 7;
	"tempvar2" += 3;
	for ("i" = 0; "i" < "tempvar2"; "i" += 1) {
		entity "Rocco" animation -> $twist once;
	}
	entity "Rocco" current_animation = $idle;
	"tempvar2" ?= 2;
	if ("tempvar2" == 1) {
		wait 1200ms;
		"tempvar2" ?= 4;
		"tempvar2" += 3;
		for ("i" = 0; "i" < "tempvar2"; "i" += 1) {
			entity "Rocco" animation -> $twist once;
		}
		entity "Rocco" current_animation = $idle;
		wait 500ms;
	}
	wait 500ms;
	entity "Rocco" animation -> $reach once;
	"tempvar2" ?= 2;
	"tempvar2" += 1;
	for ("i" = 0; "i" < "tempvar2"; "i" += 1) {
		entity "Rocco" animation -> $fiddle once;
	}
	entity "Rocco" current_animation = $idle;
	wait 1500ms;
	entity "Rocco" animation -> $reach once;
	entity "Rocco" current_animation = $idle;
}

"interact-ch2-rocco" {
	if ("ch2-cactuscooler-delivered") {
		show dialog {
			SELF "There's a lot to fix around here. I'll keep at it."
		};
	}
	else if (!"ch2-rocco-backstory") {
		copy!("face-player")
		copy!("rocco-idle")
		show dialog {
			PLAYER "I was told you could help me find a heat sink."
			SELF "A heat sink? What's the use case?"
			PLAYER "A computer. Like a normal-looking kind of boxy computer."
		};
		copy!("rocco-work")
		show dialog {
			SELF "We don't have any extra, but I could rig you one after we fixed up all the earthquake damage. Maybe in a month or so."
			PLAYER "A month? But I need it right away. Lambda and I are trying to put the castle mainframe back together, and...."
		};
		copy!("rocco-idle")
		copy!("face-player")
		show dialog {
			SELF "Lambda? Lambda who?"
		};
		if (!"ch2-lambda-deletion-backstory") {
			show dialog {
				PLAYER "Lambda. He's -- you don't know who he is?"
				SELF "Why would I? Is he famous or something?"
			};
		} else {
			show dialog {
				PLAYER "Lambda. You... really don't know who he is, do you? You actually forgot who he was?"
				SELF "Forget? What are you talking about?"
				PLAYER "Wow. Lambda was right. He said none of you would remember him."
				SELF "No, I think I would've remembered someone with the name Lambda."
			};
		}
		self direction += 1;
		show dialog {
			SELF "Lambda.... It sounds like an alias. Is he a hacker?"
			PLAYER "Actually, I don't know. It's possible."
			SELF "...."
			"How strange. A place like this normally has an IT guy, or someone who's a hacker or software tinkerer at least, but I can't think of who ours was."
			"We must have had someone like that. I'm the one who usually fixes the computers, but why can't I remember who fixes the software?"
			"Hmm."
		};
		entity "Rocco" direction = south;
		copy!("rocco-work")
		show dialog {
			SELF "Regardless, fixing the Gibson mainframe will simplify a lot of my work, so I'll help you out."
			"It would need a heavy-duty heat sink, though, and I don't have all the right supplies here. This isn't exactly my normal workstation."
			PLAYER "What else would you need? I could fetch you something."
		};
		entity "Rocco" on_tick = "null_script";
		entity "Rocco" current_animation = $idle;
		show dialog {
			SELF "Well, given what I've got here...."
		};
		entity "Rocco" current_animation = 0;
		copy!("face-player")
		show dialog {
			SELF "All I'd really need is liquid coolant. And the only thing around town that would work is Cactus Cooler."
			PLAYER "Cactus Cooler?"
			SELF "It's this rare brand of soda. It's got \"cooler\" in the name, so it's guaranteed to be a good heat conductor."
		};
		copy!("rocco-work")
		show dialog {
			SELF "That settles it! Get me a can of Cactus Cooler, and I can build you a heat sink."
		};
		"ch2-rocco-backstory" = true;
		"ch2-want-cactuscooler" = true;
		"ch2-heatsink-firstlook" = true;
		copy!("ch2-handoff-heatsink-to-cactuscooler")
		if ("ch2-carrying-cactuscooler") {
			show dialog {
				PLAYER "Well, I actually have a can of Cactus Cooler right here."
			};
			copy!("rocco-idle")
			copy!("face-player")
			show dialog {
				SELF "Oh, really? In which case...."
			};
			"interrupt" = true;
			goto "interact-ch2-rocco-give-q"; // jump
		} else {
			show dialog {
				PLAYER "Sure. Get you Cactus Cooler. Rare soda. Got it."
			};
		}
	}
	else if ("ch2-carrying-cactuscooler") {
		copy!("face-player")
		copy!("rocco-idle")
		if (!"interrupt") {
			show dialog {
				SELF "Looks like you found a can of Cactus Cooler! Give it here, and I'll build your heat sink."
			};
			"interrupt" = true;
		} else {
			show dialog {
				SELF "Change your mind? Ready to give me your can of Cactus Cooler?"
			};
		}
		goto "interact-ch2-rocco-give-q"; // jump
	}
	else {
		show dialog {
			SELF "Remember, I need a can of Cactus Cooler before I can make your heat sink."
		};
	}
	goto "interact-ch2-rocco-wrapup";
}

"simon-game-start-q" {
	entity "Simon" current_animation = 12;
	if ("ch2-simon-high") {
		show dialog {
			Simon emote 1 "How about it? Want a high battle?"
			> "Absolutely. A high battle it is!" = "simon-game-start"
			> "No, let's do a low battle" = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"
		};
	} else {
		show dialog {
			Simon emote 1 "How about it? Want a low battle?"
			> "Definitely. Low battle all the way!" = "simon-game-start"
			> "No, let's do a high battle." = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"
		};
	}
}

"simon-game-start-q-swap" {
	if ("ch2-simon-high") {
		"ch2-simon-high" = false;
		show dialog {
			Simon emote 1 "Oho, so you'd like a low battle?"
			> "Definitely. Low battle all the way!" = "simon-game-start"
			> "No, let's do a high battle." = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"
		};
	} else {
		"ch2-simon-high" = true;
		show dialog {
			Simon emote 1 "I see, so you'd like a high battle?"
			> "Absolutely. A high battle it is!" = "simon-game-start"
			> "No, let's do a low battle." = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"
		};
	}
}

"simon-game-start-difference" {
	lights_control = on;
	light ALL = off;
	entity "Simon" current_animation = 0;
	show dialog {
		Simon "A HIGH battle is all about a full, square sound. Easier on the eyes but harder on the thumbs, if you get my meaning."
	};
	entity "Lights" on_tick = "screen-lights-flash-battle-high";
	show dialog {
		Simon "I'm talkin' about these lights up here, of course!"
	};
	entity "Lights" on_tick = $lightsdefault;
	light ALL = off;
	show dialog {
		Simon "A LOW battle is more about quick fingers. It's better for those who prefer to hold their destiny in their own two hands."
	};
	entity "Lights" on_tick = "screen-lights-flash-battle-low";
	show dialog {
		Simon "That means these lights down here, naturally!"
	};
	entity "Lights" on_tick = $lightsdefault;
	copy!("ch2-map-init-hex")
	goto "simon-game-start-q";
}

"simon-game-start-nevermind" {
	if (!"ch2-simon-won-before") {
		entity "Simon" current_animation = 0;
		show dialog {
			Simon "Humph. Well, then I'm not trusting you with Rosetta! Come back when you can prove you deserve to have a keytar as gorgeous as this!"
		};
	} else {
		entity "Simon" current_animation = 12;
		show dialog {
			Simon emote 1 "Well then, feel free to ask again anytime."
		};
	}
	entity "Simon" current_animation = 0;
	goto "simon-game-start-q-wrapup";
}

"simon-game-start" {
	player_control = off;
	hex_control = off;
	"simon-pos1" ?= 4;
	"simon-pos2" ?= 4;
	"simon-pos3" ?= 4;
	"simon-pos4" ?= 4;
	"simon-pos5" ?= 4;
	"simon-pos6" ?= 4;
	"simon-pos7" ?= 4;
	if ("ch2-simon-high") {
		"simon-pos1" += 2;
		"simon-pos2" += 2;
		"simon-pos3" += 2;
		"simon-pos4" += 2;
		"simon-pos5" += 2;
		"simon-pos6" += 2;
		"simon-pos7" += 2;
	}
	"simon-round" = 1;
	lights_control = on;
	light ALL = off;
	wait 100ms;
	camera fade out -> black over 400ms;
	camera = geometry "camera-spot";
	player position = geometry "mage-spot";
	entity "Simon" position = geometry "simon-spot";
	player current_animation = $guitar_idle;
	entity "Simon" current_animation = 5;
	player direction = south;
	entity "Simon" direction = south;
	camera fade in -> black over 400ms;
	if ("ch2-simon-high") {
		entity "Lights" on_tick = "screen-lights-flash-battle-high";
		if (!"ch2-simon-heard-high") {
			show dialog {
				Simon emote 1 "Here we go! Keep your eyes up top!"
				"Pay attention to those four corners around the screen!"
				"Follow my lead! LET'S GOOOO!"
			};
			"ch2-simon-heard-high" = true;
		} else {
			show dialog {
				Simon emote 1 "Keep your eyes up top and copy my moves! LET'S GOOOO!"
			};
		}
	} else {
		entity "Lights" on_tick = "screen-lights-flash-battle-low";
		if (!"ch2-simon-heard-low") {
			show dialog {
				Simon emote 1 "Here we go! Keep your eyes down low!"
				"It's the bottom of the screen that counts now! Keep your thumbs frisky!"
				"Follow my lead! LET'S GOOOO!"
			};
			"ch2-simon-heard-low" = true;
		} else {
			show dialog {
				Simon emote 1 "Keep your eyes down low and copy my moves! LET'S GOOOO!"
			};
		}
	}
	entity "Lights" on_tick = $lightsdefault;
	light ALL = off;
	goto "simon-enemy-turn-start";
}

"simon-enemy-turn-start" {
	"ch2-simon-move-fail" = false;
	wait 800ms;
	for ("i" = 0; "i" < "simon-round"; "i" += 1) {
		if ("i" == 0) { "simon-pos-curr" = "simon-pos1"*1; }
		else if ("i" == 1) { "simon-pos-curr" = "simon-pos2"*1; }
		else if ("i" == 2) { "simon-pos-curr" = "simon-pos3"*1; }
		else if ("i" == 3) { "simon-pos-curr" = "simon-pos4"*1; }
		else if ("i" == 4) { "simon-pos-curr" = "simon-pos5"*1; }
		else if ("i" == 5) { "simon-pos-curr" = "simon-pos6"*1; }
		else if ("i" == 6) { "simon-pos-curr" = "simon-pos7"*1; }
		// see $roundcount

		// loopy
		if ("simon-pos-curr" == 0) {
			light $light0 = on;
			entity "Simon" current_animation = 11;
		}
		else if ("simon-pos-curr" == 1) {
			light $light1 = on;
			entity "Simon" current_animation = 8;
		}
		else if ("simon-pos-curr" == 2) {
			light $light2 = on;
			entity "Simon" current_animation = 10;
		}
		else if ("simon-pos-curr" == 3) {
			light $light3 = on;
			entity "Simon" current_animation = 7;
		}
		else if ("simon-pos-curr" == 4) {
			light $light4 = on;
			entity "Simon" current_animation = 9;
		}
		else if ("simon-pos-curr" == 5) {
			light $light5 = on;
			entity "Simon" current_animation = 6;
		}
		wait 450ms;
		entity "Simon" current_animation = 5;
		light ALL = off;
		wait 150ms;
		
	}
	goto "simon-player-turn-start";
}

"simon-player-turn-loop-start" {
	if ("i" >= "simon-round") {
		goto "simon-player-turn-end";
	}
	if ("i" == 0) { "simon-pos-curr" = "simon-pos1" *1; }
	else if ("i" == 1) { "simon-pos-curr" = "simon-pos2" *1; }
	else if ("i" == 2) { "simon-pos-curr" = "simon-pos3" *1; }
	else if ("i" == 3) { "simon-pos-curr" = "simon-pos4" *1; }
	else if ("i" == 4) { "simon-pos-curr" = "simon-pos5" *1; }
	else if ("i" == 5) { "simon-pos-curr" = "simon-pos6" *1; }
	else if ("i" == 6) { "simon-pos-curr" = "simon-pos7" *1; }
	// see $roundcount

	// loopy
	goto "simon-player-listen";
}

"simon-player-listen" {
	player direction = south;
	// CHECK FAILS FIRST

	// high-only positions
	if ("ch2-simon-high") {
		if ("simon-pos-curr" != 4) {
			if (button $button4 pressed) {
				// show serial_dialog {"PRESSED BUTTON 4 (listening for $simon-pos-curr$)"};
				"simon-player-move" = 4;
				"ch2-simon-move-fail" = true;
				goto "simon-player-do-move";
			}
		}
		if ("simon-pos-curr" != 5) {
			if (button $button5 pressed) {
				// show serial_dialog {"PRESSED BUTTON 5 (listening for $simon-pos-curr$)"};
				"simon-player-move" = 5;
				"ch2-simon-move-fail" = true;
				goto "simon-player-do-move";
			}
		}
	}
	// low-only positions
	else {
		if ("simon-pos-curr" != 0) {
			if (button $button0 pressed) {
				// show serial_dialog {"PRESSED BUTTON 0 (listening for $simon-pos-curr$)"};
				"simon-player-move" = 0;
				"ch2-simon-move-fail" = true;
				goto "simon-player-do-move";
			}
		}
		if ("simon-pos-curr" != 1) {
			if (button $button1 pressed) {
				// show serial_dialog {"PRESSED BUTTON 1 (listening for $simon-pos-curr$)"};
				"simon-player-move" = 1;
				"ch2-simon-move-fail" = true;
				goto "simon-player-do-move";
			}
		}
	}
	// positions for both low and high
	if ("simon-pos-curr" != 2) {
		if (button $button2 pressed) {
			// show serial_dialog {"PRESSED BUTTON 2 (listening for $simon-pos-curr$)"};
			"simon-player-move" = 2;
			"ch2-simon-move-fail" = true;
			goto "simon-player-do-move";
		}
	}
	if ("simon-pos-curr" != 3) {
		if (button $button3 pressed) {
			// show serial_dialog {"PRESSED BUTTON 3 (listening for $simon-pos-curr$)"};
			"simon-player-move" = 3;
			"ch2-simon-move-fail" = true;
			goto "simon-player-do-move";
		}
	}
	// (We don't want buttons not involved to trigger a fail)

	// CHECK SUCCESSES

	// high-only positions
	if ("ch2-simon-high") {
		if ("simon-pos-curr" == 4) {
			if (button $button4 pressed) {
				"simon-player-move" = 4;
				goto "simon-player-do-move";
			}
		}
		if ("simon-pos-curr" == 5) {
			if (button $button5 pressed) {
				"simon-player-move" = 5;
				goto "simon-player-do-move";
			}
		}
	}
	// low-only positions
	else {
		if ("simon-pos-curr" == 0) {
			if (button $button0 pressed) {
				"simon-player-move" = 0;
				goto "simon-player-do-move";
			}
		}
		if ("simon-pos-curr" == 1) {
			if (button $button1 pressed) {
				"simon-player-move" = 1;
				goto "simon-player-do-move";
			}
		}
	}
	// positions for both low and high
	if ("simon-pos-curr" == 2) {
		if (button $button2 pressed) {
			"simon-player-move" = 2;
			goto "simon-player-do-move";
		}
	}
	if ("simon-pos-curr" == 3) {
		if (button $button3 pressed) {
			"simon-player-move" = 3;
			goto "simon-player-do-move";
		}
	}
	entity "Simon" on_tick = "simon-player-listen"; // reset this loop (on next game tick?)
}

"simon-player-animation-pose_bottom_left-wait" {
	if (button $button0 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-animation-pose_bottom_right-wait" {
	if (button $button1 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-animation-pose_left-wait" {
	if (button $button2 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-animation-pose_right-wait" {
	if (button $button3 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-animation-pose_top_left-wait" {
	if (button $button4 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-animation-pose_top_right-wait" {
	if (button $button5 up) {
		"simon-player-wait-finished" = true;
		goto "null_script";
	}
}

"simon-player-do-move" {
	// loopy
	if ("simon-player-move" == 0) {
		light $light0 = on;
		player on_tick = "simon-player-animation-pose_bottom_left";
	}
	else if ("simon-player-move" == 1) {
		light $light1 = on;
		player on_tick = "simon-player-animation-pose_bottom_right";
	}
	else if ("simon-player-move" == 2) {
		light $light2 = on;
		player on_tick = "simon-player-animation-pose_left";
	}
	else if ("simon-player-move" == 3) {
		light $light3 = on;
		player on_tick = "simon-player-animation-pose_right";
	}
	else if ("simon-player-move" == 4) {
		light $light4 = on;
		player on_tick = "simon-player-animation-pose_top_left";
	}
	else if ("simon-player-move" == 5) {
		light $light5 = on;
		player on_tick = "simon-player-animation-pose_top_right";
	}
	goto "simon-player-wait";
}

"simon-player-wait" {
	if ("simon-player-wait-finished") {
		goto "simon-player-wait-finished";
	}
}

"simon-player-wait-finished" {
	"simon-player-wait-finished" = false;
	player current_animation = $guitar_idle;
	light ALL = off;
	"i" += 1;
	// show serial_dialog {
	// 	"YOUR MOVE WAS $simon-player-move$"
	// };
	if ("ch2-simon-move-fail") {
		goto "simon-game-lose";
	}
	goto "simon-player-turn-loop-start";
}

"simon-player-turn-end" {
	"simon-round" += 1;
	if ("simon-round" > $roundcount) {
		goto "simon-game-win";
	}
	goto "simon-enemy-turn-start";
}

"simon-game-lose" {
	player_control = off;
	lights_control = on;
	entity "Keyboard" on_tick = "simon-rock";
	if (
		"ch2-ring-zero-enabled-in-castle"
		|| debug_mode
	) {
		hex_control = on;
	}
	wait 100ms;
	entity "Lights" on_tick = "screen-lights-lose";
	player on_tick = "player-lose";
	show dialog { Simon emote 3 "Too bad! Better luck next time!" };
	entity "Lights" on_tick = $lightsdefault;
	copy!("ch2-map-init-hex")
	player_control = on;
	entity "Keyboard" on_tick = "null_script";
	entity "Simon" current_animation = 5;
	goto "simon-game-go-again";
}

"simon-game-win" {
	player_control = off;
	lights_control = on;
	if (
		"ch2-ring-zero-enabled-in-castle"
		|| debug_mode
	) {
		hex_control = on;
	}
	entity "Lights" on_tick = "screen-lights-win";
	player on_tick = "player-win";
	if (!"ch2-simon-won-before") {
		entity "Simon" current_animation = 3;
		wait 500ms;
	}
	entity "Simon" animation -> 2 once;
	entity "Simon" current_animation = 4;
	show dialog { Simon emote 3 "GREAT JOB! Way to go, kid!" };
	entity "Lights" on_tick = $lightsdefault;
	copy!("ch2-map-init-hex")
	player_control = on;
	if (!"ch2-simon-won-before") {
		copy!("simon-game-restore-positions")
		entity "Simon" current_animation = 12;
		show dialog {
			Simon emote 1 "HAHAH! That was a blast!"
			"THIS! This is what I was missing, the most important part about music!"
			PLAYER "What part?"
			Simon emote 1 "It's the MUSIC!"
			"Not the crowd, not the gigs, not the merch -- but the raw vibrations and rhythm!"
			"It's seizing something from the depths of your soul and shoving it into your hands, your breath, your fingertips --"
			"-- and making something LIVING, something that couldn't exist without you there to shape it!"
			"It's jamming with another human being, and building our sounds up together into something incredible!"
			"Who cares if no one was watching? What we did was ART!"
		};
		entity "Simon" current_animation = 4;
		show dialog {
			Simon emote 3 "Fantastic!"
		};
		entity "Simon" current_animation = 12;
		show dialog {
			Simon emote 1 "Don't worry, I'll keep my end of the bargain. Rosetta is yours now. You deserve it."
		};
		copy!("ch2-hide-keyboard")
		show dialog {
			name "" "(You pick up the keyboard!)"
			Simon emote 1 "Keep it, and keep making awesome music!"
			PLAYER "Music, yeah. That is definitely what I was going to use it for. Yup."
		};
		entity "Simon" current_animation = 12;
		"interrupt" = true;
		copy!("ch2-pickup-keyboard")
		"ch2-simon-won-before" = true;
		goto "null_script";
	} else {
		goto "simon-game-go-again";
	}
}

"simon-game-start-q-reprise" {
	if ("ch2-simon-high") {
		show dialog {
			Simon emote 1 "Want another high battle?"
			> "Absolutely!" = "simon-game-start"
			> "No, let's do a low battle." = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"

		};
	} else {
		show dialog {
			Simon emote 1 "Want another low battle?"
			> "Definitely!" = "simon-game-start"
			> "No, let's do a high battle." = "simon-game-start-q-swap"
			> "What's the difference?" = "simon-game-start-difference"
			> "Actually, never mind." = "simon-game-start-nevermind"
		};
	}
}

"on_load-ch2-castle-31-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 31;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>GRAND HALL</>..." };
	entity "Simon" current_animation = 12;
	entity "Sea Moss" direction = west;
	if (warp_state == "walk_from-north") {
		player position = geometry "walk_from-north";
	} else if (warp_state == "walk_from-west") {
		player position = geometry "walk_from-west";
	}
	copy!("ch2-map-init")
}

"on_load-ch2-castle-31" {
	// ch2 room state
	"ch2-in-room" = 31;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-31") {
		show serial_dialog { "Discovered <bold><c>GRAND HALL</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-31" = true;
	} else {
		show serial_dialog { "Entering <bold>GRAND HALL</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-keyboard"
		|| "ch2-carrying-keyboard"
	) {
		copy!("ch2-hide-keyboard")
	}

	"ch2-simon-heard-high" = false;
	"ch2-simon-heard-low" = false;

	copy!("ch2-map-init")
	//DEBUG STUFF
	if (debug_mode) {
		command "simon" = "debug-simon";
		command "simon" + "high" = "debug-simon-high";
		command "simon" + "low" = "debug-simon-low";
		command "simon" + "win" = "debug-simon-win";
		command "simon" + "lose" = "debug-simon-lose";
		show serial_dialog {
			" "
			"<y>DEBUG></> Play Simon Says!"
			"<y>></> <c>SIMON</>: replay last game type (default: low)"
			"<y>></> <c>SIMON HIGH</>: play high game (easier on desktop)"
			"<y>></> <c>SIMON LOW</>: play low game (easier on the real badge)"
			"<y>></> <c>SIMON WIN</>: play the win animation(s)"
			"<y>></> <c>SIMON LOSE</>: play the lose animation(s)"
		};
	}
}

"on_tick-ch2-castle-31-doorless" {
	if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-31")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-32-special")
	} else if (player intersects geometry "west-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-east";
		copy!("ch2-load-castle-12-special")
	}
}

"on_go-castle-31-north" {
	copy!("on_exit-ch2-castle-31")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-32-special")
}

"on_go-castle-31-west" {
	copy!("on_exit-ch2-castle-31")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-12-special")
}

"interact-ch2-theodore" {
	if (!"ch2-simon-won-before" || !"interrupt") {
		show dialog {
			SELF portrait theodore "Bored bored bored BORED BORED!"
			"Come on! How long is it gonna be before we can play?"
		};
	} else {
		show dialog {
			SELF portrait theodore "Sorry, I ain't impressed. Anyone can play a keyboard one note at a time."
		};
	}
}

"interact-ch2-alvin" {
	if (!"ch2-simon-won-before" || !"interrupt") {
		show dialog {
			SELF portrait alvin "We've been stuck in here, like, forever."
			"I guess our would-be audience is stuck wherever they are, too."
		};
	} else {
		show dialog {
			SELF portrait alvin "You think you bestowed upon Simon some profound paradigm shift just now? Hate to break it to you, but he comes to this exact realization, like, twice a month."
			"\"Music is about the music!\" and \"Make art for yourself, not an audience!\" Heard it all before."
			"Next week, Simon'll be all about how music is a conversation between musicians and their audience, or society at large, or whatever."
			"\"The meaning of art is in the eye of the beholder, otherwise it's a tree falling in the woods without anyone hearing!\""
			"Still, good job keeping up with him."
		};
	}
}

"interact-ch2-simon" {
	if ("ch2-storyflag-round" < 2) {
		show dialog {
			Simon "There's no audience! I can't play in these conditions! COME ON! What's the holdup? Where is everybody?"
		};
	}
	else if (!"ch2-simon-won-before") {
		if (!"ch2-simon-backstory") {
			show dialog {
				PLAYER "So, about your keyboard -- erm, \"keytar?\""
				"I sort of need one for --"
			};
			entity "Simon" current_animation = 13;
			entity "Alvin" on_tick = "camera-angry-shake";
			show dialog {
				Simon emote 2 "WHOA WHOA WHOA hey, hands off! I'm not just going to give you my precious Rosetta!"
				PLAYER "(Rosetta?)"
			};
			entity "Alvin" on_tick = "null_script";
			entity "Simon" current_animation = 0;
			show dialog {
				Simon emote 1 "But hey, you know what? I'll give you the chance to prove you deserve this beauty."
			};
			entity "Simon" current_animation = 12;
			show dialog {
				Simon emote 1 "I'm bored to death, so how about a keytar battle? If you win, I'll let you keep Rosetta, and I'll use my backup keytar for the show instead."
			};
			"ch2-simon-backstory" = true;
		} else {
			entity "Simon" current_animation = 12;
			show dialog {
				Simon emote 1 "Change your mind about a keytar battle? I'll let you keep the keyboard if you win. Come on, I'm bored to tears!"
			};
		}
		copy!("simon-game-launcher")
	}
	else if ("interrupt") {
		entity "Simon" current_animation = 12;
		show dialog {
			Simon emote 1 "Ah, man! I'm still sweatin' after that last one!"
			"But I'm not out for the count yet! Want another go?"
		};
		copy!("simon-game-launcher")
	}
	else {
		entity "Simon" current_animation = 12;
		if (!"ch2-simon-repeat-backstory") {
			show dialog {
				Simon emote 1 "Hey hey hey, look who it is! It's the keytar wizard!"
				"Aw, man! I haven't had that much fun in ages! I'm all pumped up, just thinking about it!"
				"I'm dying for another keytar battle!"
			};
			"ch2-simon-repeat-backstory" = true;
		} else {
			show dialog {
				Simon emote 1 "Hey, keytar wizard! My soul is thirsting for another keytar battle!"
			};
		}
		if (
			"ch2-carrying-keyboard"
			|| "ch2-simon-repeat-brunhilda-backstory"
		) {
			/* Do nothing extra... */
		} else {
			entity "Simon" current_animation = 0;
			show dialog {
				PLAYER "So, uh, I don't exactly have Rosetta with me right now."
			};
			entity "Simon" current_animation = 12;
			show dialog {
				Simon emote 1 "Not a problem, not a problem! Here, you can borrow Brunhilda, just for now. But don't walk away with it, you hear?"
				PLAYER "How many keytars do you have with you, exactly?"
			};
			entity "Simon" current_animation = 0;
			show dialog {
				Simon "Only my favorite four or five."
			};
			"ch2-simon-repeat-brunhilda-backstory" = true;
		}
		copy!("simon-game-launcher")
	}
}

"ch2-touch-keyboard" {
	if (!"ch2-keyboard-firstlook") {
		show dialog {
			PLAYER "It's a keyboard, but in the shape of a guitar."
			"A... \"keytar,\" perhaps?"
		};
		"ch2-keyboard-firstlook" = true;
	}
	show dialog {
		PLAYER "It's like the spork of band instruments."
	};
	entity "Simon" current_animation = 13;
	show dialog {
		Simon emote 2 "Hey! Hey! Don't you insult Rosetta like that!"
	};
	entity "Simon" current_animation = 0;
	if ("ch2-storyflag-round" == 2) {
		show dialog {
			PLAYER "(I can't just take this without asking. Better talk to %Simon%.)"
		};
	}
}

"on_load-ch2-castle-32-doorless" {
	// abbreviated copy-pasta of the below
	"ch2-in-room" = 32;
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE KITCHEN</>..." };
	if (warp_state == "walk_from-northeast") {
		player position = geometry "walk_from-northeast";
	} else if (warp_state == "walk_from-northwest") {
		player position = geometry "walk_from-northwest";
	}
	command "look" + "vending machine" = "look-ch2-vendingmachine";
	copy!("ch2-map-init")
}

"on_load-ch2-castle-32" {
	// ch2 room state
	"ch2-in-room" = 32;
	entity "Gloria" position = geometry "worry-walk2";
	entity "Gloria" direction = entity "Samson";

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-32") {
		show serial_dialog { "Discovered <bold><c>CASTLE KITCHEN</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-32" = true;
	} else {
		show serial_dialog { "Entering <bold>CASTLE KITCHEN</>..." };
	}

	// room unique stuff
	if (!"ch2-ramchips-dispensed") {
		copy!("ch2-hide-ramchips")
	}
	
	if (warp_state == "walk_from-northeast") {
		player position = geometry "walk_from-northeast";
	} else if (warp_state == "walk_from-northwest") {
		player position = geometry "walk_from-northwest";
	}
	
	command "look" + "vending machine" = "look-ch2-vendingmachine";
	copy!("ch2-map-init")

	// DEBUG
	if (debug_mode) {
		command "want" + "chips" = "debug-want-chips";
		show serial_dialog {
			" "
			"<y>DEBUG></> <c>WANT CHIPS</>"
		};
	}
	// END DEBUG
}

"on_tick-ch2-castle-32" {
	if (player intersects geometry "northwest-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-33-special")
	} else if (player intersects geometry "northeast-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-34-special")
	}
}

"on_tick-ch2-castle-32-doorless" {
	if (player intersects geometry "northwest-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-33-special")
	} else if (player intersects geometry "northeast-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-34-special")
	} else if (player intersects geometry "south-hitbox") {
		copy!("on_exit-ch2-castle-32")
		warp_state = "walk_from-north";
		copy!("ch2-load-castle-31-special")
	}
}

"ch2-gloria-worry-walk" {
	"tempvar" ?= 4;
	if ("tempvar" == 0) {
		wait 400ms;
	} else if ("tempvar" == 1) {
		wait 1100ms;
	} else if ("tempvar" == 2) {
		wait 1500ms;
	} else {
		wait 2200ms;
	}
	self position -> geometry "%ENTITY_PATH%" origin over $walkspeed;
	self direction = entity "Samson";
	if (self path != "worry-walk2") {
		self path = "worry-walk2";
	} else {
		"tempvar" ?= 2;
		if ("tempvar" == 0) {
			self path = "worry-walk1"
		} else {
			self path = "worry-walk3";
		}
	}
}

"on_go-castle-32-south" {
	copy!("on_exit-ch2-castle-32")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-31-special")
}

"interact-ch2-gloria" {
	player_control = off;
	self on_tick = "null_script";
	copy!("face-player")
	self animation -> 3 once;
	self current_animation = 4;
	if (!"ch2-gloria-backstory") {
		show dialog {
			SELF "Oh, dear. What terrible timing. It was \"take your child to work\" day yesterday, and...."
			"What a quake! Poor Samson was scared out of his wits. And now we're trapped in here."
		};
		"ch2-gloria-backstory" = true;
		entity "Gloria" direction = entity "Samson";
	} else {
		show dialog {
			SELF "Are you here to rescue us? Please, Samson is so upset."
		};
		self on_tick = "face-player";
	}
	self on_tick = "ch2-gloria-worry-walk";
	self animation -> 5 once;
	self current_animation = 0;
	player_control = on;
}

"interact-ch2-samson" {
	copy!("face-player")
	self current_animation = 2;
	if ("ch2-samson-count" == 0) {
		show dialog {
			SELF "Someone was kicking the castle yesterday!"
		};
	} else if ("ch2-samson-count" == 1) {
		show dialog {
			SELF "It woke up the big stone man!"
		};
	} else if ("ch2-samson-count" == 2) {
		show dialog {
			SELF "Mommy used her wings and flew around in the big room and then the kicking stopped!"
		};
	} else if ("ch2-samson-count" == 3) {
		show dialog {
			SELF "Chips fell out of the box, and I got to eat all of them!"
		};
	}
	self current_animation = 0;
	"ch2-samson-count" += 1;
	"ch2-samson-count" %= 4;
	self direction = west;
}

"interact-ch2-vendingmachine" {
	if ("ch2-storyflag-round" >= 3) {
		if (!"ch2-cutseen-ramchips") {
			player_control = false;
			show dialog {
				PLAYER "Oh! There's actually chips in here! Are those RAM chips?"
			};
			player direction = entity "Sea Moss";
			show dialog {
				entity "Sea Moss" "Oh, for sure."
			};
			player direction = entity "vend machine";
			show dialog {
				PLAYER "But why are they being stocked in a vending machine? Do people like to eat RAM?"
			};
			player direction = entity "Sea Moss";
			show dialog {
				entity "Sea Moss" "Silicon folk love silicon snacks."
				PLAYER "I... what? Really? Silicon folk meaning...."
				entity "Sea Moss" "Silicon folk like me!"
			};
			player direction = north;
			show dialog {
				PLAYER "I don't see a code for it on the panel though."
				entity "Sea Moss" "Oh, I'll help you out. Come here."
			};
			if (!player intersects geometry "vending-watchbox") {
				player on_tick = "ch2-walk-to-vend-short";
			} else {
				player on_tick = "ch2-watch-seamoss";
			}
			copy!("ch2-seamoss-summon-chips")
		} else {
			show dialog {
				PLAYER "I wonder if they make \"cool ranch\" RAM chips."
				entity "Sea Moss" "You betcha."
			};
		}
	} else if (
		!"ch2-want-cactuscooler"
		|| "ch2-carrying-cactuscooler"
		|| "ch2-cactuscooler-delivered"
	) {
		show dialog "vending-pocket-change" { // reused
			PLAYER "There's sure a lot of snacks in there. Too bad I'm out of pocket change."
		};
	} else if (!"ch2-want-bobparty") {
		show dialog {
			PLAYER "Hmm. I thought there might be Cactus Cooler in here, but it's just chips and stuff. No soda."
		};
		entity "Sea Moss" direction = player;
		show dialog {
			entity "Sea Moss" "Oh, you're looking for Cactus Cooler? My cousin Bob Austin loves that stuff."
		};
		player direction = entity "Sea Moss";
		show dialog {
			entity "Sea Moss" "Every time he throws a party, he brings loads and loads...."
			PLAYER "Stone Cold Bob Austin brings Cactus Cooler to his parties?"
			PLAYER "(But there's no Bob's Club party this year. Maybe I could go back to town and ask him if he has any extra from last year?)"
		};
		entity "Sea Moss" direction = player;
		"ch2-want-bobparty" = true;
		copy!("ch2-handoff-cactuscooler-to-bobaustin")
	} else {
		show dialog {
			PLAYER "Oh, right. No soda in here."
		};
		player direction = entity "Sea Moss";
		show dialog {
			PLAYER "Hey, you -- you said that Bob Austin likes Cactus Cooler?"
		};
		entity "Sea Moss" direction = player;
		show dialog {
			entity "Sea Moss" "Oh, sure. He's always got loads."
			PLAYER "(Well then, I should go back to the Bob's Club in town and ask him for some.)"
		};
		entity "Sea Moss" direction = south;
	}
}

"interact-ch2-seamoss" {
	copy!("face-player")
	if (!"ch2-want-ramchips") {
		if (!"ch2-seamoss-backstory") {
			show dialog {
				PLAYER "You know, you remind me of Bob Moss."
				SELF "Oh sure. Bob Moss is my cousin. I'm Sea Moss."
				"Nice to meetcha."
			};
			"ch2-seamoss-backstory" = true;
		} else {
			show dialog {
				SELF "I've been stuck in here for a while now."
				"I don't mind much, though, since this is where the vending machine is."
			};
		}
	} else {
		if (!"ch2-cutseen-ramchips") {
			if (!"ch2-seamoss-backstory") {
				show dialog {
					PLAYER "Say, are you Sea Moss?"
					SELF "Yup, that's me. How did you know?"
					PLAYER "Lucky guess. Anyway, I heard you knew something about computer memory."
				};
				"ch2-seamoss-backstory" = true;
			} else {
				show dialog {
					PLAYER "Hey, Sea Moss. I heard you knew something about computer memory."
				};
			}
			copy!("interact-ch2-seamoss-cutscene")
		} else {
			show dialog {
				SELF "I do declare... chips are the greatest invention on the planet."
				"Bar none."
			};
		}
	}
	self direction = south;
}

"ch2-touch-ramchips" {
	if (!"ch2-ramchips-firstlook") {
		show dialog {
			PLAYER "That's the biggest bag of chips I've ever seen in my life."
			"...And it's probably only a quarter full."
		};
		"ch2-ramchips-firstlook" = true;
	} else {
		show dialog {
			PLAYER "That's an obscene amount of chips."
		};
	}
	show dialog {
		name "" "(Pick up the RAM chips?)"
		> "Yes" = "ch2-touch-ramchips-yes"
		> "No" = "ch2-touch-ramchips-no"
	};
}

"on_load-ch2-castle-33" {
	// ch2 room state
	"ch2-in-room" = 33;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-33") {
		show serial_dialog { "Discovered <bold><c>HYDROPONICS ROOM</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-33" = true;
	} else {
		show serial_dialog { "Entering <bold>HYDROPONICS ROOM</>..." };
	}

	// room unique stuff
	if (
		"ch2-installed-mouse"
		|| "ch2-carrying-mouse"
	) {
		copy!("ch2-hide-mouse")
	}
	"ch2-mousegame" = false;

	copy!("ch2-map-init")
	if (debug_mode) {
		command "mousegame" = "ch2-debug-mousegame";
		show serial_dialog {
			" "
			"<y>DEBUG></> <c>MOUSEGAME</>: start the mouse game!"
		};
	}
	if (!"ch2-cutseen-castle33") {
		player_control = off;
		if (warp_state != "warped") {
			wait 600ms;
			show dialog {
				Gregory alignment BR "Oh!"
			};
			player direction = entity "Gregory";
			show dialog {
				Gregory alignment BR "Well, that's a new face, isn't it?"
			};
		} else {
			wait 200ms;
			show dialog {
				Gregory alignment TR "Oh!"
			};
			player direction = entity "Gregory";
			show dialog {
				Gregory alignment TR "Well, that's a new face, isn't it?"
			};
		}
		player_control = on;
		"ch2-cutseen-castle33" = true;
	}
}

"on_tick-ch2-castle-33" {
	if (player intersects geometry "south-hitbox") {
		if ("ch2-mousegame") {
			player_control = off;
			player current_animation = 0;
			show dialog {
				PLAYER "Wait, I shouldn't leave before giving back this mouse detector."
			};
			player position -> geometry "south-hitbox-bounce" origin over 300ms;
			player_control = on;
		} else {
			warp_state = "walk_from-northwest";
			copy!("ch2-load-castle-32-special")
		}
	}
	if ("ch2-mousegame") {
		goto "ch2-mousegame-tick"; // this script also resets to this script
	}
}

"on_go-castle-33-south" {
	copy!("on_exit-ch2-castle-33")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-32-special")
}

"ch2-interact-gregory-breakyes" {
	show dialog {
		SELF "I'll take the mouse proximity detector back then, then."
	};
	"ch2-mousegame" = false;
	copy!("ch2-map-init-hex")
	show dialog {
		SELF "Let me know when you want to have another go."
	};
	self on_interact = "ch2-interact-gregory";
}

"ch2-interact-gregory" {
	copy!("face-player")
	if ("ch2-mousegame") {
		if (!"interrupt") {
			show dialog {
				SELF "That bluetooth proximity detector will tell you how close you are to the mouse. The closer you are to it, the more lights will light up."
				"Or did you want to take a break?"
				> "Yes, I want to take a break." = "ch2-interact-gregory-breakyes"
				> "No, I want to keep trying." = "ch2-interact-gregory-breakno"
			};
			"interrupt" = true;
		} else {
			show dialog {
				SELF "Did you want to take a break?"
				> "Yes, I want to take a break." = "ch2-interact-gregory-breakyes"
				> "No, I want to keep trying." = "ch2-interact-gregory-breakno"
			};
		}
	}
	if ("ch2-storyflag-round" < 2) {
		if (!"ch2-gregory-backstory") {
			show dialog {
				SELF "Not sure how you got in, but..."
				"Oh! Unless the blockage is gone at last?"
				PLAYER "No, the door by the vending machine is still blocked."
			};
			player direction = south;
			show dialog {
				PLAYER "But why isn't the door to this room crushed, damaged, or blocked like the rest?"
			};
			player direction = entity "Gregory";
			entity "Gregory" on_tick = "spin_self_clockwise";
			show dialog {
				SELF "This wing was recently redone to install a bunch of fancy tech."
				"These hydroponics trays, the induction stovetops in the next room... that kind of thing."
			};
			entity "Gregory" on_tick = "face-player";
			copy!("face-player")
			show dialog {
				SELF "They did some structural reinforcement, too, but don't remember specifics."
				"At the time, the only thing I cared about was my new stovetop."
			};
			"ch2-gregory-backstory" = true;
			if (
				!"ch2-want-cactuscooler"
				|| "ch2-carrying-cactuscooler"
				|| "ch2-cactuscooler-delivered"
			) { /*NADA*/ } else {
				show dialog {
					PLAYER "Gotcha. So, um...."
				};
				show dialog "ch2-gregory-cactus-help" { // reused bit
					PLAYER "I was looking for this soda called Cactus Cooler. Do you know if the castle has any stocked?"
					SELF "Hmm, doubt it, but I don't know for certain. I haven't been in charge of vending machine stocking for -- goodness, two or three decades."
					"You might check the vending machine itself, though."
				};
			}
		} else {
			if (
				!"ch2-want-cactuscooler"
					|| "ch2-carrying-cactuscooler"
					|| "ch2-cactuscooler-delivered"
			) {
				show dialog {
					SELF "I'm slowing down in my old age, but even so, I don't want my habits ingrained to the point that I'm sabotaging myself. I try to keep my mind spry."
					"So when new tech comes out, I make an effort to give it a fair shot, and I learn how to use it properly, even if there's a tradeoff."
					"I can't use my favorite wok on my new stovetop, but all my other pans heat more quickly and evenly with induction. For me, that's a good trade."
					"As for my new bluetooth mouse...."
					"Bad trade. For me, it'll be wired mice forever!"
					"But hey, at least I know I don't hate bluetooth mice because I'm old and stubborn."
				};
				"ch2-bluetooth-mouse-rant" = true;
			} else {
				show dialog "ch2-gregory-cactus-help"; // from above
			}
		}
	} else {
		if ("ch2-carrying-mouse" || "ch2-installed-mouse") {
			show dialog {
				SELF "I like my mouse to be physically connected to my computer."
				"Hmm, is that too on the nose?"
			};
		} else if (!"ch2-mousegame-backstory") {
			show dialog {
				PLAYER "This is kind of random, but I need a mouse for something, and was wondering --"
				SELF "A mouse? A rodent, or a computer mouse?"
				PLAYER "A computer mouse."
				SELF "A bit cliche to ask a cat about this, don't you think?"
				PLAYER "It wasn't my idea."
			};
			if (!"ch2-bluetooth-mouse-rant") {
				show dialog { SELF "Well, you're in luck. I have a spare bluetooth mouse I'm not using anymore. You're welcome to it if you can catch it." };
			} else {
				show dialog { SELF "Well, you can have my old bluetooth mouse if you can catch it." };
			}
			show dialog {
				PLAYER "Catch it?"
			};
			entity "Gregory" on_tick = "spin_self_clockwise";
			show dialog {
				SELF "It's loose in this room somewhere, but I'm not as fast as I used to be, and can't quite get ahold of it."
			};
			entity "Gregory" on_tick = "face-player";
			copy!("face-player")
			show dialog {
				SELF "It's hiding in one of the hydroponics bins, I should think."
				PLAYER "I'm sorry... your bluetooth mouse is hiding in the vegetables?"
			};
			if (!"ch2-bluetooth-mouse-rant") {
				show dialog { SELF "Well, it's not fond of cats. And I'm not fond of it, to be honest." };
			} else {
				show dialog { SELF "Well, it's not fond of cats." };
			}
			show dialog {
				PLAYER "We ARE talking about a computer mouse, right?"
				SELF "We are indeed."
			};
			player_control = off;
			entity "Gregory" on_tick = "null_script";
			entity "Gregory" direction += 1;
			wait 800ms;
			entity "Gregory" direction -= 1;
			entity "Gregory" on_tick = "face-player";
			show dialog {
				SELF "Here, this is a bluetooth proximity detector. It's got eight lights that will turn on depending on how close you are to the mouse."
				PLAYER "Eight lights?"
			};
			lights_control = on;
			light ALL = off;
			entity "Lights" on_tick = "screen-lights-flash-bits";
			show dialog {
				SELF "Yes, these eight lights in a line, here along the bottom. You see?"
				PLAYER "Um...."
				SELF "The more lights come on, the closer you are to finding it. Walk around a bit and see for yourself."
			};
			copy!("ch2-map-init-hex")
			entity "Lights" on_tick = $lightsdefault;
			show dialog {
				SELF "Well, let me know when you want to have a go, anyway."
			};
			player_control = on;
			"interrupt" = true;
			"ch2-mousegame-backstory" = true;
		} else {
			if (!"interrupt") {
				show dialog {
					SELF "You still need that bluetooth mouse? I've still got that bluetooth proximity detector right here."
				};
			}
			show dialog {
				SELF "Want to try to catch the mouse?"
				> "Yes" = "ch2-interact-gregory-gameyes"
				> "No" = "ch2-interact-gregory-gameno"
			};
		}
	}
}

"ch2-touch-mouse" {
	show dialog {
		name "" "(You found the mouse!)"
	};
	"ch2-mousegame-catchcount" += 1;
	"ch2-mousegame" = false;
	if ("ch2-mousegame-catchcount" == 1) {
		show dialog {
			PLAYER "Oh, I found it!"
		};
		light ALL = off;
		show dialog {
			PLAYER "!!"
			"Shoot! It got away from me. Where'd it go?"
			Gregory "Mice are quick; you'd better be quicker. Try again."
		};
		entity "Mouse" on_tick = "ch2-mousegame-prepare-board";
	} else if ("ch2-mousegame-catchcount" == 2) {
		show dialog {
			PLAYER "Aha! Got it again!"
		};
		light ALL = off;
		show dialog {
			PLAYER "And -- aw, come on! I was so close to grabbing it that time!"
			Gregory "It'll tire eventually. Keep going."
		};
		entity "Mouse" on_tick = "ch2-mousegame-prepare-board";
	} else if ("ch2-mousegame-catchcount" == 3) {
		show dialog {
			PLAYER "There we go! Got it in my hands!"
			name "" "(You pick up the mouse!)"
			Gregory "Good job. Hope that mouse'll do the trick for you."
		};
		player_control = off;
		camera fade out -> black over 400ms;
		player position = geometry "dongle-handoff";
		player direction = entity "Gregory";
		camera fade in -> black over 400ms;
		player_control = on;
		copy!("ch2-map-init-hex")
		copy!("ch2-hide-mouse")
		copy!("ch2-pickup-mouse")
		show dialog {
			Gregory "Don't forget this -- the USB dongle. Now you can use that mouse with computers that don't have bluetooth hardware built in."
			PLAYER "This thingy plugs into a USB port? What if the mainframe doesn't have one of those?"
			Gregory "Then...."
			"...."
			"Well, we'll cross that bridge when we get to it. You should be fine, unless the enclosure is more than 25 years old or so."
			PLAYER "I don't know how old it is."
			Gregory "Well, what does it look like?"
			PLAYER "I guess it's sort of beige...."
			Gregory "Oh dear."
			"Well, you might be fine anyway. Good luck with everything."
		};
		entity "Mouse" on_interact = "null_script";
	}
}

"ch2-mousegame-prepare-board" {
	// redone so that the mouse can't respawn in the same row/column as last time; should be more interesting
	// NOTE: `"_" ?= "X` will generate numbers between 0 and X-1, not X!"

	// bay column (left, right)
	if ("ch2-mousegame-column" == 0) { // uninitialized
		"ch2-mousegame-column" ?= 2; // random 0-1
		"ch2-mousegame-column" += 1; // now random 1-2
	} else { // invert the current one
		if ("ch2-mousegame-column" == 1) {
			"ch2-mousegame-column" = 2;
		} else {
			"ch2-mousegame-column" = 1;
		}
	}

	// bay row (top, mid, bot)
	"tempvar" ?= 2; // random 0-1 (coin flip)
	if ("ch2-mousegame-row" == 0) { // uninitialized
		"ch2-mousegame-row" ?= 3; // random 0-2
		"ch2-mousegame-row" += 1; // now random 1-3
	} else { // get a random one, but make sure it's not the current one
		if ("ch2-mousegame-row" == 1) {
			"tempvar" += 2; // random 2-3
			"ch2-mousegame-row" = "tempvar" *1;
			// 1 => 2|3
		} else if ("ch2-mousegame-row" == 2) {
			if ("tempvar" == 0) {
				"ch2-mousegame-row" = 1;
			} else {
				"ch2-mousegame-row" = 3;
			}
			// 2 => 1|3
		} else if ("ch2-mousegame-row" == 3) {
			"tempvar" += 1; // random 1-2
			"ch2-mousegame-row" = "tempvar" *1;
			// 3 => 1|2
		}
	}

	// cell within cell+column
	if ("ch2-mousegame-row" == 1) {
		// first row has 4 per region; others have 3
		"ch2-mousegame-cell" ?= 4;
	} else {
		"ch2-mousegame-cell" ?= 3;
	}
	"ch2-mousegame-cell" += 1; // might as well make this 1-indexed, like everything else :/

	// Teleport the mouse to the cell
	if ("ch2-mousegame-column" == 1) { // left side
		if ("ch2-mousegame-row" == 1) { // top
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos0";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos1";
			} else if ("ch2-mousegame-cell" == 3) {
				entity "Mouse" position = geometry "mouse-pos2";
			} else {
				entity "Mouse" position = geometry "mouse-pos3";
			}
		} else if ("ch2-mousegame-row" == 2) { // mid
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos8";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos9";
			} else {
				entity "Mouse" position = geometry "mouse-pos10";
			}
		} else { // "ch2-mousegame-row" == 3 (bot)
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos14";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos15";
			} else {
				entity "Mouse" position = geometry "mouse-pos16";
			}
		}
	} else { // ch2-mousegame-column is 2 (right side)
		if ("ch2-mousegame-row" == 1) { // top
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos4";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos5";
			} else if ("ch2-mousegame-cell" == 3) {
				entity "Mouse" position = geometry "mouse-pos6";
			} else {
				entity "Mouse" position = geometry "mouse-pos7";
			}
		} else if ("ch2-mousegame-row" == 2) { // mid
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos11";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos12";
			} else {
				entity "Mouse" position = geometry "mouse-pos13";
			}
		} else { // "ch2-mousegame-row" == 3 (bot)
			if ("ch2-mousegame-cell" == 1) {
				entity "Mouse" position = geometry "mouse-pos17";
			} else if ("ch2-mousegame-cell" == 2) {
				entity "Mouse" position = geometry "mouse-pos18";
			} else {
				entity "Mouse" position = geometry "mouse-pos19";
			}
		}
	}

	lights_control = on;
	light ALL = off;
	show dialog {
		name "" "(SQUEAK!)"
	};
	entity "Mouse" on_interact = "ch2-touch-mouse";
	"mousegame-mouseX" = entity "Mouse" x;
	"mousegame-mouseY" = entity "Mouse" y;
	"ch2-mousegame" = true;
	goto "null_script";
}

"ch2-mousegame-tick" {
	wait 100ms;
	"mousegame-playerX" = player x;
	"mousegame-playerY" = player y;
	// get diffX
	if ("mousegame-playerX" > "mousegame-mouseX") {
		"mousegame-diffX" = "mousegame-playerX" *1;
		"mousegame-diffX" -= "mousegame-mouseX";
	} else {
		"mousegame-diffX" = "mousegame-mouseX" *1;
		"mousegame-diffX" -= "mousegame-playerX";
	}
	// get diffY
	if ("mousegame-playerY" > "mousegame-mouseY") {
		"mousegame-diffY" = "mousegame-playerY" *1;
		"mousegame-diffY" -= "mousegame-mouseY";
	} else {
		"mousegame-diffY" = "mousegame-mouseY" *1;
		"mousegame-diffY" -= "mousegame-playerY";
	}
	"mousegame-manhattan" = "mousegame-diffX" *1;
	"mousegame-manhattan" += "mousegame-diffY";
	"mousegame-diff" = "mousegame-manhattan" *1;
	"mousegame-diff" *= 16;
	"mousegame-diff" /= $max;
	// `mousegame-diff` is now the INVERSE of the number of lights to show
	if ("mousegame-diff" > 8) {
		"mousegame-lights" = 0;
	} else {
		"mousegame-lights" = 8;
		"mousegame-lights" -= "mousegame-diff";
	}
	// `mousegame-lights` is the ACTUAL number of lights to show

	// reset old lights (todo: when array support is done in natlang, redo this)
	
	// NOTE: if you turn off all the lights and then turn them on as needed, it blinks on the hardware :/
	// This makes the following a little bloated :X
	if ("mousegame-lights" == 0) {
		light ALL = off;
	} else if ("mousegame-lights" == 1) {
		light LED_BIT128 = on;
		light LED_BIT64 = off;
		light LED_BIT32 = off;
		light LED_BIT16 = off;
		light LED_BIT8 = off;
		light LED_BIT4 = off;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 2) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = off;
		light LED_BIT16 = off;
		light LED_BIT8 = off;
		light LED_BIT4 = off;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 3) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = off;
		light LED_BIT8 = off;
		light LED_BIT4 = off;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 4) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = on;
		light LED_BIT8 = off;
		light LED_BIT4 = off;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 5) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = on;
		light LED_BIT8 = on;
		light LED_BIT4 = off;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 6) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = on;
		light LED_BIT8 = on;
		light LED_BIT4 = on;
		light LED_BIT2 = off;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 7) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = on;
		light LED_BIT8 = on;
		light LED_BIT4 = on;
		light LED_BIT2 = on;
		light LED_BIT1 = off;
	} else if ("mousegame-lights" == 8) {
		light LED_BIT128 = on;
		light LED_BIT64 = on;
		light LED_BIT32 = on;
		light LED_BIT16 = on;
		light LED_BIT8 = on;
		light LED_BIT4 = on;
		light LED_BIT2 = on;
		light LED_BIT1 = on;
	}
	map on_tick = "on_tick-ch2-castle-33"; // reset (NOTE: not an infinite loop, because it's not a `goto` here)
}

"hanoi_move_1" {
	"cursor_pos" = 1;
	copy!("hanoi_move")
}

"hanoi_move_2" {
	"cursor_pos" = 2;
	copy!("hanoi_move")
}

"hanoi_move_3" {
	"cursor_pos" = 3;
	copy!("hanoi_move")
}

"tick_hanoi" {
	if (button HAX pressed) {
		player_control = on;
		copy!("hanoi_quit")
	} else if (
		button LJOY_UP pressed
		|| button RJOY_UP pressed
		|| button LJOY_DOWN pressed
		|| button RJOY_DOWN pressed
	) {
		copy!("hanoi_move")
	} else if (button LJOY_RIGHT pressed || button RJOY_RIGHT pressed) {
		if ("cursor_pos" == 1 || "cursor_pos" == 2) {
			"cursor_pos" += 1;
		}
		copy!("draw_hanoi")
	} else if (button LJOY_LEFT pressed || button RJOY_LEFT pressed) {
		if ("cursor_pos" == 2 || "cursor_pos" == 3) {
			"cursor_pos" -= 1;
		}
		copy!("draw_hanoi")
	}
}

"draw_hanoi" {
	if ("cursor_pos" == 1) {
		"cursor_grip_height" = "array1_length" *1;
	} else if ("cursor_pos" == 2) {
		"cursor_grip_height" = "array2_length" *1;
	} else if ("cursor_pos" == 3) {
		"cursor_grip_height" = "array3_length" *1;
	}
	"cursor_grip_height" += 2;
	"cursor_hinge_height" = "cursor_grip_height" *1;
	"cursor_hinge_height" += 1;
	// HEADER
	show serial_dialog {
		" "
		" "
		"============================================================"
		"=------------------ <m>THE PLATES OF HANOI</> -------------------="
		"=----------------- Grab plate #6 to win! ------------------="
		"============================================================"
	};

	// until we get to the plate rows:
	"curr_plate" = 0;

	// ROW 11
	"row" = 11;
	if ("hanoi_won") {
		copy!("hanoi_won_message_A")
	} else {
		for ("column" = 1; "column" <= 3; "column" += 1) {
			if ("cursor_pos" == "column") {
				concat serial_dialog "hanoi_cursor_arm";
			} else {
				concat serial_dialog "hanoi_space";
			}
		}
	}
	concat serial_dialog "newline";

	// ROW 10
	"row" = 10;
	if ("hanoi_warning_size") {
		show serial_dialog "hanoi_size_warning";
		"hanoi_warning_size" = false;
	} else if ("hanoi_won") {
		copy!("hanoi_won_message_B")
	} else {
		for ("column" = 1; "column" <= 3; "column" += 1) {
			copy!("draw_tile")
		}
	}
	concat serial_dialog "newline";

	// ROW 9
	"row" = 9;
	for ("column" = 1; "column" <= 3; "column" += 1) {
		copy!("draw_tile")
	}
	concat serial_dialog "newline";

	// ROW 8
	"row" = 8;
	for ("column" = 1; "column" <= 3; "column" += 1) {
		copy!("draw_tile")
	}
	concat serial_dialog "newline";
	
	// ROW 7
	"row" = 7;
	"plate1" = "array1_7" *1;
	"plate2" = "array2_7" *1;
	"plate3" = "array3_7" *1;
	copy!("draw_plate_row")

	// ROW 6
	"row" = 6;
	"plate1" = "array1_6" *1;
	"plate2" = "array2_6" *1;
	"plate3" = "array3_6" *1;
	copy!("draw_plate_row")
	
	// ROW 5
	"row" = 5;
	"plate1" = "array1_5" *1;
	"plate2" = "array2_5" *1;
	"plate3" = "array3_5" *1;
	copy!("draw_plate_row")

	// ROW 4
	"row" = 4;
	"plate1" = "array1_4" *1;
	"plate2" = "array2_4" *1;
	"plate3" = "array3_4" *1;
	copy!("draw_plate_row")
	
	// ROW 3
	"row" = 3;
	"plate1" = "array1_3" *1;
	"plate2" = "array2_3" *1;
	"plate3" = "array3_3" *1;
	copy!("draw_plate_row")
	
	// ROW 2
	"row" = 2;
	"plate1" = "array1_2" *1;
	"plate2" = "array2_2" *1;
	"plate3" = "array3_2" *1;
	copy!("draw_plate_row")

	// ROW 1
	"row" = 1;
	"curr_plate" = "array1_1" *1;
	copy!("draw_curr_plate")
	"curr_plate" = "array2_1" *1;
	copy!("draw_curr_plate")
	"curr_plate" = "array3_1" *1;
	copy!("draw_curr_plate")
	concat serial_dialog "newline";

	// FOOTER
	show serial_dialog {
		"============================================================"
		"  <c>Joysticks</> to control grabber arm, <c>HAX button</> to quit ~OR~"
		"  Tray (<c>1</>-<c>3</>) to grab/release plate, (<c>T</>)ips, (<c>R</>)eset, (<c>Q</>)uit"
		"============================================================"
	};
	if ("hanoi_won") {
		copy!("hanoi_quit")
	} else if ("hanoi_draw_help") {
		show serial_dialog {
			"<m>TIP:</> You only need uncover (and grab) the #6 plate; you need not move it to another tray and build the tower of plates again."
			"<m>TIP:</> Only put odd numbered plates on top of even plates and vice versa. E.g. put plate <bold>1</> on top of plate <bold>4</>, not <bold>3</> or <bold>5</>."
		};
		"hanoi_draw_help" = false;
	}
}

"hanoi_quit" {
	// run in the map's on_tick
	player_control = on;
	light LED_USB = off;
	entity "Lights" on_tick = $lightsdefault;
	copy!("hanoi_unregister")
	if (!"hanoi_won") {
		show serial_dialog {
			" "
			"Quitting <m>Plates of Hanoi</> (your progress has been saved)"
		};
	} else if (!"ch2-carrying-plate" || !"ch2-installed-plate") {
		copy!("won_hanoi_get_plate")
	}
	goto "on_tick-ch2-castle-34";
}

"hanoi_help" {
	"hanoi_draw_help" = true;
	copy!("hanoi_move")
}

"hanoi_reset" {
	"hanoi_init_done" = false;
	copy!("hanoi_init_variables")
	copy!("draw_hanoi")
}

"hanoi_win" {
	"hanoi_won" = true;
	copy!("hanoi_unregister")
	goto "draw_hanoi";
}

"on_load-ch2-castle-34" {
	// ch2 room state
	"ch2-in-room" = 34;

	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-34") {
		show serial_dialog { "Discovered the <bold><c>CASTLE PANTRY</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-34" = true;
	} else {
		show serial_dialog { "Entering the <bold>CASTLE PANTRY</>..." };
	}

	// room unique stuff
	
	copy!("ch2-map-init")
}

"on_tick-ch2-castle-34" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-northeast";
		copy!("ch2-load-castle-32-special")
	}
}

"on_go-castle-34-south" {
	copy!("on_exit-ch2-castle-34")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-32-special")
}

"ch2-interact-pantryfridge" {
	if (
		!"ch2-want-cactuscooler"
		|| "ch2-carrying-cactuscooler"
		|| "ch2-cactuscooler-delivered"
	) {
		show dialog {
			PLAYER "Meats and fruits and vegetables... oh my."
		};
	} else {
		show dialog {
			PLAYER "Meats and fruits and vegetables... but no Cactus Cooler."
		};
	}
}

"ch2-interact-pantryshelf" {
	if (
		!"ch2-want-cactuscooler"
		|| "ch2-carrying-cactuscooler"
		|| "ch2-cactuscooler-delivered"
	) {
		show dialog {
		PLAYER "Looks like a lot of dry and canned goods."
		};
	} else {
		show dialog {
			PLAYER "Looks like a lot of dry and canned goods. No soda, though."
		};
	}
}

"ch2-interact-dishshelf" {
	if (
		"ch2-jukebox-backstory"
		|| "ch2-storyflag-round" < 2
	) {
		show dialog {
			PLAYER "Plates, cups, and tablecloths. How many place settings is this?"
		};
	} else {
		show dialog {
			PLAYER "Hmm. How do I tell which plates have high iron content?"
		};
		pause entity Clara on_tick;
		entity "Clara" direction = player;
		show dialog {
			Clara "You need to tell what now?"
		};
		copy!("ch2-iron-content")
	}
}

"interact-ch2-clara" {
	if ("ch2-storyflag-round" < 2) {
		copy!("interrupt-walk")
		if (!"ch2-clara-backstory") {
			show dialog {
				SELF "Holy crap -- a new person!"
				PLAYER "Yup, that's me."
			};
		}
		if (
			!"ch2-want-cactuscooler"
			|| "ch2-carrying-cactuscooler"
			|| "ch2-cactuscooler-delivered"
		) {
			if (!"ch2-clara-backstory") {
				// just so it doesn't take this branch the first time:
				"ch2-clara-backstory" = true;
			} else {
				show dialog { SELF "I'm new around here. I gotta say, this has been an interesting first week of work." };
			}
		} else {
			"ch2-clara-backstory" = true;
			show dialog "ch2-clara-soda" { // reused
				PLAYER "So... I'm looking for some Cactus Cooler. It's this rare kind of soda...."
				SELF "Rare is right. Never heard of it, so I doubt we have any stocked. Sorry about that."
			};
		}
		copy!("resume-walk")
	} else if ("ch2-jukebox-backstory") {
		show dialog {
			SELF "Jeez, technology sometimes, you know?"
			"We could have kept those plates on some normal shelf, but my boss wanted \"technological novelty\" for his project."
			"Technology should empower us, not make normal things harder to do!"
			"...Sorry for rambling. It's a pet peeve for me, is all."
		};
	} else {
		copy!("ch2-iron-content")
		"ch2-jukebox-backstory" = true;
	}
}

"ch2-touch-plate" {
	if ("ch2-storyflag-round" < 2) {
		if (!"ch2-plate-firstlook") {
			show dialog {
				PLAYER "This thing is a PlateMover 90?"
				Clara "Oh, it's actually a PlateMover 9000. It's so old, the last few numbers have worn off."
				"But it was supposed to be this high tech plate storage and organization machine."
				PLAYER "It looks like a jukebox."
				Clara "It acts like a jukebox."
			};
			"ch2-plate-firstlook" = true;
		}
	} else if (!"ch2-jukebox-backstory") {
		show dialog {
			PLAYER "There are plates in here, but... how do I know which ones have high iron content?"
		};
		pause entity Clara on_tick;
		entity "Clara" direction = player;
		player direction = entity "Clara";
		show dialog {
			Clara "High iron content?"
			PLAYER "Yeah, so I need a plate with high iron content. For reasons."
			Clara "Well, those are the fancy orange plates from Hanoi. Oranges, browns, and reds are almost always an iron oxide glaze."
			PLAYER "Cool. So, how do I get the plates out?"
			Clara "Well, you insert a token, and the PlateMover 9000 will let you move the grabber arm to select a plate for it to dispense."
			PLAYER "That's very convoluted."
			Clara "Sorry."
			"So... I don't know where the tokens are kept, and my boss is out of town. So unless there's a token in there already...."
		};
		player direction = entity "PlateMover90";
		show dialog {
			PLAYER "Looks like there is."
			Clara "Oh, good. So it can dispense one plate, but only one. You needed a plate with high iron content?"
		};
		player direction = entity "Clara";
		show dialog {
			PLAYER "Yeah. I need to combine it with a phonograph needle to approximate a hard drive."
			Clara "You need a plate that'll match the size of a 12\" vinyl record?"
			PLAYER "I hadn't thought about that, but probably, yeah."
			Clara "Oh, no."
			"Well, the good news: we do have a plate large enough. The #6. The bad news...."
			"...the #6 is at the bottom of the stack. You'll have to rearrange the plates to uncover it."
			"...Aaaaand the plates are fragile enough that you can't stack heavier ones on top of lighter ones."
			PLAYER "Oh, no."
			Clara "Yeah, so... uh, good luck with that."
		};
		"ch2-jukebox-backstory" = true;
		unpause entity Clara on_tick;
	} else if (
		"ch2-carrying-plate"
		|| "ch2-installed-plate"
	) {
		show dialog {
			PLAYER "A jukebox seems like a really bad way to manage dishes."
			Clara "You can say that again."
		};
	} else {
		show dialog {
			PLAYER "Well, let's try to get that #6 plate out of there."
		};
		copy!("start-hanoi")
	}
}

"on_load-ch2-castle-99" {
	// ch2 room state
	"ch2-in-room" = 99;
	
	// entrance text
	show serial_dialog "spacer";
	if (!"ch2-seen-room-99") {
		show serial_dialog { "Discovered <bold><c>SECRET LAB</>! Room added to <c>MAP</>!" };
		"ch2-seen-room-99" = true;
	} else {
		show serial_dialog { "Entering <bold>SECRET LAB</>..." };
	}

	// room unique stuff
	camera = geometry "camera";

	// cutscene pre-fade :/
	if (!"ch2-cutseen-castle99") {
		entity "Lambda" current_animation = $lowered
	}

	// Check if rake has been obtained
	if ("ch2-carrying-minirake-99") {
		copy!("ch2-minirake-99-hide")
	}
	
	// initialize everything
	copy!("ch2-map-init")

	// check if you do the cutscene or not
	if (!"ch2-cutseen-castle99") {
		if (debug_mode) {
			command "skip" = "ch2-skip-99";
			show serial_dialog {
				" "
				"<y>DEBUG></> <c>SKIP</>: skip this cutscene"
			};
		}
		goto "ch2-cutscene-castle99"; // NOTE: branching means `goto`! Deadend things here!
	}
}

"ch2-skip-99" {
	"ch2-map-mainframeos" = false;
	"ch2-carrying-mainframeos" = true;
	"ch2-cutseen-castle99" = true;
	copy!("ch2-load-castle-1-special")
}

"interact-ch2-lambda-lab" {
	copy!("face-player")
	entity "Lambda" current_animation = $opaque;
	if ("ch2-storyflag-round" < 5) {
		show dialog {
			Lambda "Go ahead, and I'll watch over things from here."
		};
	} else {
		show dialog {
			Lambda emote $opaque_grin "Hey, good to see you %PLAYER%."
			Lambda emote $opaque_grin "Don't worry about me -- I'll leave my cave now and then."
			Lambda "But there's still a lot of research I need to do here at this station, so I'm not entirely free of this place yet."
		};
	}
	self direction = entity "CRT";
}

"on_load-ch2-castle-outside" {
	player_control = off;
	if (!"ch2-full-escort-cutseen") {
		// todo: cutscene: leading you inside
	}
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>CASTLE EXTERIOR</>..." };
	// Village elders hiding
	if ("ch2-storyflag-round" != 0) {
		entity "Bert" on_tick = "yeet";
	}
	if (
		"ch2-storyflag-round" == 1
		|| "ch2-storyflag-round" == 2
		|| "ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" >= 5
	) {
		entity "Jackob" on_tick = "yeet";
		entity "Alfonso" on_tick = "yeet";
	}
	// unique stuff done
	copy!("ch2-map-init") // (player control comes back here)
	// animations
	if (warp_state == "walk_from-north") {
		player position -> geometry "walk_from-north" length over 200ms;
	} else if (warp_state == "walk_from-east") {
		player path = "walk_from-east";
		player on_tick = "on_tick-ch2-town-walkfadein";
			// borrowing this from town scripts
		camera fade in -> #000000 over 400ms;
	} else if (warp_state == "ch2-ending") {
		goto "ch2-post-credits";
	}
}

"on_tick-ch2-castle-outside" {
	if (player intersects geometry "north-hitbox") {
		copy!("on_exit-ch2-castle-outside")
		warp_state = "walk_from-south";
		copy!("ch2-load-castle-1-special")
	}
	if (player intersects geometry "east-hitbox") {
		copy!("on_exit-ch2-castle-outside")
		warp_state = "walk_from-west";
		player path = "east-point";
		player on_tick = "on_tick-ch2-town-walkfadeout";
			// borrowing this from town scripts
		camera fade out -> #000000 over 500ms;
		load map "ch2-town";
	}
}

"on_go-castle-outside-north" {
	copy!("on_exit-ch2-castle-outside")
	copy!("warping-out-fade-out")
	copy!("ch2-load-castle-1-special")
}

"interact-ch2-alfonso-outside" {
	if ("ch2-storyflag-round" == 4) {
		if (!"ch2-alfonso-almostdone") {
			show dialog {
				SELF "Word on the street is that you're almost done repairing the artifact." "Very well done so far, but keep going!"
			};
			"ch2-alfonso-almostdone" = true;
		} else {
			show dialog {
				SELF "Keep going! We need that artifact working!"
			};
		}
	} else {
		show dialog {
			SELF "Go on in! You'll do fine!"
		};
	}
}

"interact-ch2-jackob-outside" {
	if ("ch2-storyflag-round" == 4) {
		if (!"ch2-jackob-almostdone") {
			show dialog {
				SELF "There's a buzz around town that you're nearly finished. Very impressive."
			};
			"ch2-jackob-almostdone" = true;
		}
		show dialog {
			SELF "Don't stop now. Get that software installed quick!"
		};
	} else {
		show dialog {
			SELF "XA will be able to help you on the inside. Good luck."
		};
	}
}

"on_tick-ch2-credits" {
	hex_control = off;
	serial_control = off;
	player_control = on;
	player direction = south;
	camera = entity cameraman position;
	entity cameraman position = geometry "credits_camera";
	camera fade in -> #000000 over 400ms;
	entity "Gregory" current_animation = 1;
	wait 1200ms;
	entity cameraman position -> geometry "credits_camera" length over 52000ms;
	wait 600ms;
	entity Wizard direction = south;
	entity Wizard animation -> 5 once;
	entity Wizard current_animation = 3;
	wait 2300ms;
	entity Wizard animation -> 4 once;
	entity Wizard current_animation = 0;
	camera fade out -> #000000 over 1200ms;
	hex_control = on;
	serial_control = on;
	player_control = on;
	if (
		warp_state == "ch2-ending"
		|| !"credits-from-menu" // todo: is this redundant with warp state? Maybe manage warp state better?
	) {
		copy!("ch2-load-castle-1-special")
	} else {
		load map "main_menu";
	}
}

"ch2-post-credits" {
	serial_control = off;
	player_control = off;

	// Make Bert into Lambda
	entity $Lambda on_tick = "null_script";
	entity $Lambda position = geometry "hiding-spot";
	entity $Lambda type = "lambda";

	// the rest of the owl
	player on_tick = "ch2-post-credits-walkin";
	camera fade in -> #000000 over 1100ms;
	wait 700ms;
	entity $Lambda position = geometry "lambda1";
	show dialog {
		Lambda "%PLAYER%, wait!"
	};
	player on_tick = "player-watch-lambda-actor";
	entity $Lambda position -> geometry "lambda2" origin over 1800ms;
	entity $Lambda current_animation = $opaque;
	wait 1200ms;
	show dialog {
		Lambda "I heard over the intercom that you were going to give a status report to the village elders. I... I want to come with you."
	};
	entity $Lambda direction = south;
	show dialog {
		Lambda emote $opaque_lowered_almost "I'm a village elder, too, dammit. I should act like one, even if it's hard."
		Lambda emote $opaque_serious "I-I want to apologize to the other village elders for all the problems I caused in the castle. Apologize for my cowardice, and --"
	};
	entity $Lambda direction = east;
	show dialog {
		Lambda "?!"
		Jackob alignment BR "%PLAYER%! %PLAYER%!"
		Alfonso alignment BR "%PLAYER%! We've discovered something!"
	};
	entity $Lambda strafe = 2;
	entity $Lambda position -> geometry "lambda-hide" origin over 150ms;
	entity $Lambda strafe = 0;
	entity $Lambda direction = east;
	wait 200ms;
	show dialog {
		Lambda emote $panicked "Wait a minute! I --"
	};
	entity $Lambda on_tick = "spin_self_clockwise";
	show dialog {
		PLAYER "What's wrong? You wanted to talk to them."
		Lambda emote $panicked "Yes, but not quite so fast! I-I need to work myself up to it! I gotta --"
	};
	entity $Lambda on_tick = "null_script";
	entity $Lambda on_tick = "lambda-cower";
	player on_tick = "player-watch-lambda-actor";
	show dialog {
		Lambda emote $panicked "HIDE!"
		PLAYER "Hey!"
	};
	player on_tick = "player-watch-alfonso";
	entity Alfonso path = "alfonso-walkin";
	entity Jackob path = "jackob-walkin";
	entity Alfonso on_tick = "ch2-elder-ending-walkin";
	wait 200ms;
	entity Jackob on_tick = "ch2-elder-ending-walkin";
	wait 100ms;
	show dialog {
		Alfonso "There you are, %PLAYER%. We've learned something terribly important."
		Jackob "%PLAYER%, I know my eyes aren't what they used to be, but was there someone else here with you just now?"
		PLAYER "Well, you see --"
		Alfonso "Never mind, never mind! It's the Big Bad!"
	};
	wait 500ms;
	if (entity Alfonso current_animation == 0) {
		// just in case he's still walking up, in which case he shouldn't do this turn
		entity Alfonso direction = entity Jackob;
	}
	show dialog {
		Alfonso "The Big Bad, he --"
		Jackob "He can make you forget things. Implant memories, too, perhaps. I can't really remember."
		PLAYER "What?"
	};
	if (entity Alfonso current_animation == 0) {
		// just in case he's still walking up, in which case he shouldn't do this turn
		entity Alfonso direction = player;
	}
	show dialog {
		Alfonso "I can almost remember how this all works. Almost. It's getting easier the more time passes, but...."
		PLAYER "He can make people forget things? But... Lambda can do that, too!"
		"Who actually is the Big Bad? Could it be... Lambda?"
		Jackob "Lambda? Who's that?"
	};
	player on_tick = "null_script";
	player direction = entity $Lambda;
	show dialog {
		PLAYER "Well?"
	};
	wait 1200ms;
	entity Alfonso on_tick = "alfonso-watch-lambda-actor";
	wait 200ms;
	entity Jackob on_tick = "jackob-watch-lambda-actor";
	wait 1400ms;
	show dialog {
		Lambda emote $opaque_lowered_almost "I-I'll come out. I'm sorry."
		Alfonso "!!"
	};
	wait 500ms;
	entity $Lambda position -> geometry "lambda6" origin over 1200ms;
	entity $Lambda direction = south;
	wait 500ms;
	entity $Lambda position -> geometry "lambda7" origin over 2300ms;
	entity $Lambda current_animation = $opaque;
	player on_tick = "null_script";
	entity Jackob on_tick = "null_script";
	entity Alfonso on_tick = "null_script";
	wait 200ms;
	entity $Lambda direction = entity Alfonso;
	wait 1400ms;
	show dialog {
		Jackob "Your robes! Those colors!"
		Lambda emote $opaque_lowered "Y-yes. I'm sorry."
		"I'm one of the village elders, but I made everyone forget that. Made them forget about me altogether. But w-we were close friends once."
		Alfonso "You're Lambda?"
		Jackob "Were there four of us? Maybe. Can't remember. Can't be sure."
		PLAYER "Why do you and the Big Bad both have the power to make people forget things, Lambda?"
	};
	entity $Lambda direction += 1;
	copy!("ch2-lambda-lower-actor")
	wait 1400ms;
	show dialog {
		Lambda emote $panicked "The Big Bad? Oh, dear. Oh, no."
	};
	entity $Lambda direction = entity Alfonso;
	entity $Lambda current_animation = $opaque;
	show dialog {
		Lambda emote $opaque_serious "You're sure, Alfonso? The Big Bad can make people forget things, too?"
	};
	show dialog {
		Alfonso "It's something I recently remembered. Or almost remembered."
		"But I needed to tell you, %PLAYER%, in case I forgot again. I think... I must have forgotten it several times."
	};
	entity $Lambda direction += 1;
	show dialog {
		Jackob "I admit it's the only thing that makes sense. It could explain why I don't know the Big Bad's name, though I must have known it once."
		"Why I can't remember his face, either, even though we've had several direct confrontations."
		"There's so much I can't remember. So much that it's suspicious."
	};
	entity $Lambda direction = entity Alfonso;
	show dialog {
		Lambda emote $opaque_serious "It's true I can't remember the Big Bad clearly, but I thought that was a side effect of what I'd done to myself."
		"That is, after I'd made everyone else forget me, I had trouble remembering everyone else in turn. But this...."
	};
	entity $Lambda direction += 1;
	show dialog {
		Lambda emote $opaque_serious "It's also true that I found the memory manipulation program in a space I already had access to. Could... I actually be the Big Bad without knowing it?"
	};
	entity $Lambda direction += 1;
	show dialog {
		Lambda "Might I have erased my own memories to protect myself somehow? A Yagami gambit?"
		Alfonso "No, the Big Bad knows who he is, because he is still acting against us. He triggered that earthquake."
	};
	entity $Lambda direction = player;
	show dialog {
		PLAYER "And the Big Bad hid the serial book AFTER we went to bed last night, but BEFORE we all met this morning. At least that's what Bert told me before he rushed off."
		Jackob "Where even is Bert? Where has he gone?"
	};
	entity Alfonso direction = entity Jackob;
	show dialog {
		Alfonso "He must have discovered something the Big Bad didn't want us to know."
	};
	entity $Lambda direction = entity Jackob;
	show dialog {
		Lambda emote $panicked "Bert's been kidnapped?!"
	};
	entity Jackob direction = south;
	entity Alfonso direction = entity $Lambda; 
	show dialog {
		Jackob "Oh, dear. Oh, dear."
	};
	player on_tick = "look-left-and-right-fast";
	wait 800ms;
	show dialog {
		PLAYER "This is getting dangerous, isn't it?"
	};
	player on_tick = "null_script";
	player direction = entity Alfonso; 
	entity Jackob direction = player; 
	show dialog {
		Jackob "If only Bert had mentioned to us what he was researching! We're working in the dark! And I can't remember hardly anything about any of this!"
	};
	entity Alfonso direction = entity Jackob;
	show dialog {
		Alfonso "Ah, Jackob, you're onto something!"
		"If the Big Bad was wiping all our minds, he must have been especially thorough with you!"
	};
	entity Jackob direction = entity Alfonso;
	show dialog {
		Alfonso "You must have known something absolutely vital. You MUST try to remember whatever it is you knew! It could be the key to everything!"
	};
	entity Jackob on_tick = "look-left-and-up-fast";
	show dialog {
		Jackob "But how do I remember what I don't know I don't remember?"
		Alfonso "I don't know. We'll have you meditate. Do some free association. Think of songs or smells from your past or something."
	};
	entity Alfonso direction = entity $Lambda;
	wait 800ms;
	entity Jackob on_tick = "null_script";
	entity Jackob direction = entity $Lambda;
	show dialog {
		Alfonso "I don't know if I can trust you, Lambda."
	};
	copy!("ch2-lambda-lower-actor")
	show dialog {
		Lambda emote $opaque_lowered "I-I know. It's part of having skills like mine, I think."
		Alfonso "No, it's because you literally manipulated our minds."
		"We're supposed to just believe that you're one of us? Or trust you after you've done something like that?"
		Lambda emote $opaque_lowered "...."
	};
	copy!("ch2-lambda-raise-actor")
	show dialog {
		Lambda emote $opaque_lowered_almost "If it means anything, I've been trying to make things right."
		PLAYER "It's true. He helped me fix the serial artifact."
	};
	entity Jackob direction = player;
	show dialog {
		Jackob "It's fixed? That's good news."
		PLAYER "And he's been helping me clean up the castle."
		Alfonso "Hmph. Even the Big Bad wouldn't bother with that, not even as an attempt at social engineering. Not unless he's learned to play a long game."
		Lambda "And I can still help you."
		"If the memory manipulation program was written by the Big Bad, then I might find files or other programs that could give us more information about his identity."
		Alfonso "Well, I wish you luck with that. Let us know what you find. But otherwise... stay out of our way."
		Lambda emote $opaque_lowered "Y-yes. I understand."
	};
	entity $Lambda direction = south;
	entity Jackob direction = player;
	show dialog {
		Jackob "Take this time to rest, %PLAYER%. I'm afraid there's one more challenge for you to face in the morning. A third artifact you must acquire."
		"I can't quite remember what it is, but when it's time, it'll be out east, on the other side of town."
	};
	entity Alfonso path = "alfonso-walkout";
	entity Jackob path = "jackob-walkout";
	entity Alfonso on_tick = "ch2-elder-ending-walkin-end";
	wait 100ms;
	entity Jackob on_tick = "ch2-elder-ending-walkin-end";
	show dialog {
		Alfonso "Never mind that! You must remember what you've forgotten, Jackob! Hurry!"
		name "Jackob" portrait village_elder // in case he's yeeted before this card comes up
		"Don't rush me! You're making it worse!"
	};
	wait 1100ms;
	copy!("ch2-lambda-lower-actor")
	entity $Lambda direction = south;
	wait 200ms;
	player on_tick = "player-watch-lambda-actor";
	show dialog {
		Lambda  emote $opaque_lowered "They'll never really trust me again. Maybe I was better off where I was, in hiding."
		"...."
	};
	entity $Lambda direction = west;
	entity $Lambda current_animation = $transparent;
	show dialog {
		Lambda emote $transparent_serious "No. That line of thinking is unproductive. We can't go back to how things were, but that doesn't mean we can't move forward."
		"I want to stop hiding. I want to be better. I'll prove my trustworthiness by how I act from here, even if it's slow."
	};
	entity $Lambda position -> geometry "lambda8" origin over 300ms;
	entity $Lambda current_animation = $opaque;
	wait 500ms;
	show dialog {
		Lambda "Thank you, %PLAYER%."
		PLAYER "What for?"
	};
	entity $Lambda direction = player;
	show dialog {
		Lambda emote $opaque_grin "For fixing the mainframe with me. For making me feel like I can make a difference again. I have more hope now than I've had for a while."
		Lambda "We can always forge new connections, even after old ones are permanently broken. I will remember that."
	};
	entity $Lambda direction = west;
	show dialog {
		Lambda "Good luck with everything, %PLAYER%."
	};
	entity $Lambda on_tick = "ch2-lambda-walkout";
	"ch2-cutseen-secret-ending" = true;
	wait 800ms;
	player on_tick = "null_script";
	camera fade out -> #000000 over 1200ms;
	load map "credits2";
}

"on_load-ch2-greenhouse" {
	command "look" + "ethernettles" = "look-ch2-ethernettles";
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>GREENHOUSE</>..." };
	"ethernettle_id" = entity "EtherNettle1" primary_id;
	"EtherNettle1" = entity "EtherNettle1" primary_id;
	"EtherNettle2" = entity "EtherNettle2" primary_id;
	"EtherNettle3" = entity "EtherNettle3" primary_id;
	"EtherNettle4" = entity "EtherNettle4" primary_id;
	"EtherNettle5" = entity "EtherNettle5" primary_id;
	"EtherNettle6" = entity "EtherNettle6" primary_id;
	"EtherNettle7" = entity "EtherNettle7" primary_id;
	"EtherNettle8" = entity "EtherNettle8" primary_id;
	copy!("ch2-map-init")
}

"on_tick-ch2-greenhouse" {
	// ethernettle interference checks
	// todo: Make these into functions in the individual Ether Nettle's on_tick when you get functions!
	if (
		!entity "EtherNettle1" intersects geometry "EtherNettle1Origin"
		|| !entity "EtherNettle2" intersects geometry "EtherNettle2Origin"
		|| !entity "EtherNettle3" intersects geometry "EtherNettle3Origin"
		|| !entity "EtherNettle4" intersects geometry "EtherNettle4Origin"
		|| !entity "EtherNettle5" intersects geometry "EtherNettle5Origin"
		|| !entity "EtherNettle6" intersects geometry "EtherNettle6Origin"
		|| !entity "EtherNettle7" intersects geometry "EtherNettle7Origin"
		|| !entity "EtherNettle8" intersects geometry "EtherNettle8Origin"
		|| "EtherNettle1" != "ethernettle_id"
		|| "EtherNettle2" != "ethernettle_id"
		|| "EtherNettle3" != "ethernettle_id"
		|| "EtherNettle4" != "ethernettle_id"
		|| "EtherNettle5" != "ethernettle_id"
		|| "EtherNettle6" != "ethernettle_id"
		|| "EtherNettle7" != "ethernettle_id"
		|| "EtherNettle8" != "ethernettle_id"
		|| entity "EtherNettle1" secondary_id != 3
		|| entity "EtherNettle2" secondary_id != 2
		|| entity "EtherNettle3" secondary_id != 7
		|| entity "EtherNettle4" secondary_id != 0
		|| entity "EtherNettle5" secondary_id != 1
		|| entity "EtherNettle6" secondary_id != 6
		|| entity "EtherNettle7" secondary_id != 5
		|| entity "EtherNettle8" secondary_id != 4
		|| entity "EtherNettle1" primary_id_type != 0
		|| entity "EtherNettle2" primary_id_type != 0
		|| entity "EtherNettle3" primary_id_type != 0
		|| entity "EtherNettle4" primary_id_type != 0
		|| entity "EtherNettle5" primary_id_type != 0
		|| entity "EtherNettle6" primary_id_type != 0
		|| entity "EtherNettle7" primary_id_type != 0
		|| entity "EtherNettle8" primary_id_type != 0
	) {
		show dialog {
			Trekkie "Oh, no you don't! Not after all that work, %PLAYER%! Put Ether Nettle back!"
		};
		entity "EtherNettle1" position = geometry "EtherNettle1Origin";
		entity "EtherNettle2" position = geometry "EtherNettle2Origin";
		entity "EtherNettle3" position = geometry "EtherNettle3Origin";
		entity "EtherNettle4" position = geometry "EtherNettle4Origin";
		entity "EtherNettle5" position = geometry "EtherNettle5Origin";
		entity "EtherNettle6" position = geometry "EtherNettle6Origin";
		entity "EtherNettle7" position = geometry "EtherNettle7Origin";
		entity "EtherNettle8" position = geometry "EtherNettle8Origin";
		entity "EtherNettle1" primary_id = "ethernettle_id";
		entity "EtherNettle2" primary_id = "ethernettle_id";
		entity "EtherNettle3" primary_id = "ethernettle_id";
		entity "EtherNettle4" primary_id = "ethernettle_id";
		entity "EtherNettle5" primary_id = "ethernettle_id";
		entity "EtherNettle6" primary_id = "ethernettle_id";
		entity "EtherNettle7" primary_id = "ethernettle_id";
		entity "EtherNettle8" primary_id = "ethernettle_id";
		entity "EtherNettle1" secondary_id = 3;
		entity "EtherNettle2" secondary_id = 2;
		entity "EtherNettle3" secondary_id = 7;
		entity "EtherNettle4" secondary_id = 0;
		entity "EtherNettle5" secondary_id = 1;
		entity "EtherNettle6" secondary_id = 6;
		entity "EtherNettle7" secondary_id = 5;
		entity "EtherNettle8" secondary_id = 4;
		entity "EtherNettle1" primary_id_type = 0;
		entity "EtherNettle2" primary_id_type = 0;
		entity "EtherNettle3" primary_id_type = 0;
		entity "EtherNettle4" primary_id_type = 0;
		entity "EtherNettle5" primary_id_type = 0;
		entity "EtherNettle6" primary_id_type = 0;
		entity "EtherNettle7" primary_id_type = 0;
		entity "EtherNettle8" primary_id_type = 0;
	}
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-greenhouse";
		load map "ch2-town";
	}
}

"interact-ch2-trekkie" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "Oh, %PLAYER%! Me heard you were going to the serial castle in the mountain!"
			PLAYER "Yeah, I guess."
			SELF "Me want to wish you the best of luck!"
			PLAYER "Thanks, %SELF%."
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "How are things going, %PLAYER%?"
			PLAYER "They're going okay, %SELF%. What about you?"
			SELF "Me thinking of replacing the Ether Nettles with a faster spec. Gigabit Ether Nettles!"
			PLAYER "(Giga what?)"
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Say, %SELF%, have you seen Bert around here recently?"
			SELF "Me have not seen Bert for a long time. Me sorry, %PLAYER%."
		};
	} else {
		show dialog {
			SELF "Me heard %PLAYER% got the serial artifact."
			"Me knew you could do it! Good job!"
		};
	}
	self direction = east;
}

"on_load-ch2-lodge-rtfm" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>RTFM ROOM</>..." };
	// do unique stuff first (but player_control = serial / off first, if you do)
	
	// Village elders hiding
	if ("ch2-storyflag-round" != 1) {
		entity "Bert" on_tick = "yeet";
	}
	if ("ch2-storyflag-round" != 3) {
		entity "Jackob" on_tick = "yeet";
		entity "Alfonso" on_tick = "yeet";
	}
	// unique stuff done
	copy!("ch2-map-init")
}

"on_tick-ch2-lodge-rtfm" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-north";
		load map "ch2-lodge";
	}
}

"interact-ch2-alfonso-rtfm" {
	// divert people trying to hack their way to see this convo early
	if ("ch2-storyflag-round" != 3) {
		goto "null_script";
	}
	copy!("face-player")
	show dialog {
		SELF
		"Bert said he was going to check something, but whatever he's doing, he's sure taking his time."
		"I confess I'm getting worried, %PLAYER%. Something isn't right about all of this."
	};
	self direction = west;
}

"interact-ch2-jackob-rtfm" {
	// divert people trying to hack their way to see this convo early
	if ("ch2-storyflag-round" != 3) {
		goto "null_script";
	}
	copy!("face-player")
	show dialog {
		SELF
		"We're doing just fine here, %PLAYER%, but don't you dawdle too long. Time is slipping away from us."
		"There's so little we can do to help you right now, yet all I feel is this increasing urgency, like a vise tightening around my chest."
		"Doom is coming, and only you can head it off. Please hurry."
	};
	self direction = south;
}

"interact-ch2-bert-rtfm" {
	// divert people trying to hack their way to see this convo early
	if ("ch2-storyflag-round" != 1) {
		goto "null_script";
	}
	copy!("face-player")
	show dialog {
		SELF
		"This morning we could not find the book you need, but I want to find it still."
		"Still I am looking. I will bring it if I find it."
	};
	self direction = north;
}

"on_load-ch2-lodge" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>LIBRARY</>..." };
	// do unique stuff first (but player_control = serial / off first, if you do)
	if ("ch2-storyflag-round" != 1) {
		entity "Alfonso" on_tick = "yeet";
	}
	// The part of Uncle Zappy is being played by Jackob
	if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		entity "Jackob" position = geometry "zappy-spot";
		entity "Jackob" name = "Uncle Zappy";
		entity "Jackob" on_look = "look-ch2-zappy";
		entity "Jackob" on_tick = "null_script";
		entity "Jackob" on_interact = "interact-ch2-zappy";
		entity "Jackob" type = "lightning_boy2";
		entity "Jackob" direction = north;
	} else if ("ch2-storyflag-round" != 1) {
		entity "Jackob" on_tick = "yeet";
	}
	// hide stuff
	if (
		"ch2-installed-manual"
		|| "ch2-carrying-manual"
	) {
		copy!("ch2-hide-manual")
	}

	if (warp_state == "walk_from-north") {
		player_control = off;
		player position = geometry "walk_from-north";
	}
	// player control comes on after this next script is over:
	copy!("ch2-map-init")
}

"on_tick-ch2-lodge" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-lodge";
		load map "ch2-town";
	}
	if (player intersects geometry "north-hitbox") {
		warp_state = "walk_from-south";
		load map "ch2-lodge-rtfm";
	}
}

"ch2-interact-manual" {
	if (!"ch2-want-manual") {
		show dialog {
			PLAYER "Looks like a book about a calculator."
		};
	} else {
		show dialog {
			PLAYER "Oh, this must be the calculator manual Frankie wanted."
			name "" "(You pick up the calculator manual!)"
		};
		copy!("ch2-pickup-manual")
		copy!("ch2-hide-manual")
	}
}

"interact-ch2-timmy" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "I love the library! There's so many books here it would take a hundred years to read them all!"
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "If you had a race car, what color would you want?"
			"I think red cars are faster than blue cars, usually."
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Hey, %SELF%, do you know if Bert came in here recently?"
			SELF "Bert? Who's that?"
			PLAYER "Well, he's one of the village elders. He's the big one, the one who --"
			SELF "Oh yeah, Bert is the one that looks like a bear, right?"
			PLAYER "Bear?"
			SELF "Yeah, bear-Bert!"
			"But you see, I actually don't know if I saw him or not."
			"I was reading."
			PLAYER "Oh, I see, you were busy reading. Yeah, I guess that makes sense. Thanks anyway."
		};
	} else {
		show dialog {
			SELF "So you see... I think... bees are kind of scary."
			"I wasn't stung before, but I don't want them to sting me!"
			"Bees and bugs -- but especially bees -- really freak me out."
		};
	}
	self direction = east;
}

"interact-ch2-alfonso-library" {
	"ch2-alfonso-library-count" += 1;
	"ch2-alfonso-library-count" %= $bookcount;
	if ("ch2-alfonso-library-count" == 1) {
		show dialog {
			SELF "Oh, goodness! It's \"The Importance of Being Earnest.\" I remember this play. Twenty years ago, Jackob and I did a reading of it with --"
		};
	} else if ("ch2-alfonso-library-count" == 2) {
		show dialog {
			SELF "Aha, \"A Brief History of Time!\" You know, I've always wanted learn about time and space and the universe and all that. And it isn't very long."
		};
	} else if ("ch2-alfonso-library-count" == 3) {
		show dialog {
			SELF "Oho, \"The Complete Plays of Gilbert and Sullivan.\" I think I memorized one of their patter songs once. But was it from Pinafore or Penzance?"
		};
	} else {
		show dialog {
			SELF "Oh, look at that. \"Rendezvous with Rama,\" but what a stunning cover! I don't recognize this edition. Who publizhed this one? Gollancz?"
		};
	}
	copy!("face-player")
	show dialog {
		SELF "Yes, yes, I'm getting work done! What does it look like I'm doing?"
	};
	self direction = north;
}

"ch2-goose-library" {
	if (!"ch2-has-artifact") {
		show dialog {
			SELF "Honk!"
		};

	} else {
		if (!"ch2-goosefacts") {
			concat serial_dialog { "<bell>" };
			show dialog {
				SELF "HONK! You are now subscribed to goose facts!"
			};
			"ch2-goosefacts" = true;
			command "stop" = "stop-goosefacts";
		} else {
			show dialog {
				SELF "Enjoy your free goose facts!"
			};
		}
	}
}

"look-ch2-microwave-magehouse" {
	show serial_dialog "spacer";
	if (!"ch2-microwave-time") {
		show serial_dialog {
			"You looked at the <m>%SELF%</>."
			"\tIt's one of those new flat-button models. Its tiny seven-segment display is glowing a soft blue-green... and you've just realized it's got the time wrong by an hour."
		};
		"ch2-microwave-time" = true;
	} else {
		show serial_dialog {
			"You looked at the <m>%SELF%</>."
			"\tIt's one of those new flat-button models. Its tiny seven-segment display is glowing a soft blue-green -- but you don't have the heart to tell it that it's got the time wrong."
		};
	}
}

"on_load-ch2-magehouse" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>YOUR HOUSE</>..." };
	if (
		"ch2-storyflag-round" == 0
	) {
		entity "Aunt Zippy" position = geometry "alt-spot1";
		entity "Uncle Zappy" position = geometry "alt-spot3";
	} else if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		entity "Aunt Zippy" on_tick = "yeet";
		entity "Uncle Zappy" on_tick = "yeet";
	} else if ("ch2-storyflag-round" == 5) {
		entity "Aunt Zippy" position = geometry "alt-spot2";
		entity "Uncle Zappy" position = geometry "alt-spot1";
	}
	copy!("ch2-map-init")
}

"on_tick-ch2-magehouse" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-magehouse";
		load map "ch2-town";
	}
}

"interact-ch2-zappy" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "Good morning, %PLAYER%! Off to the castle this morning?"
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "I heard from Alfonso that you'll need to grapple with some insects in the castle. I had no idea."
			PLAYER "Insects?"
			SELF "I think he mentioned bees? Bees that were sheep? Or was it the other way around? Sheep that were bees?"
			PLAYER "(Bees? Sheep?)"
			SELF "Qu'avait-il dit? \"Ewe est bee\"?"
			PLAYER "...." "Are you kidding me?"
			SELF "Ha! Yes, sorry! I was trying to think of a \"dad joke\" about this all morning, but that was the best I could do."
			PLAYER "Thanks, %SELF%. I appreciate the effort."
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Hey, %SELF%, I'm looking for Bert. I don't suppose you've seen him today?"
			SELF "Sorry, I haven't been paying much attention to library patrons. I've been glued to these Spanish textbooks."
			PLAYER "Spanish?"
			SELF "Well, if I couldn't work out a \"dad joke\" for USB in French, I thought I might try Spanish."
			"I could use \"es\" for the \"S\", you see? But I'm stuck on the nuance between \"ser\" and \"estar\", so...."
			PLAYER "Is it a dad joke if you need to know a second language to get it?"
			SELF "Sure. Anything works as long as it makes you roll your eyes in exasperation."
		};
		self direction = north;
	} else {
		show dialog {
			SELF "Hey, %PLAYER%! I heard the good news! Great job getting the artifact working!"
		};
	}
}

"interact-ch2-zippy" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "If you need a break from the castle out west, don't forget to come back home for a visit."
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "I'm so proud of you, %PLAYER%, for all the things you've learned. You've grown a lot this year, and I want you to know that."
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			SELF "Why, hello, %PLAYER%. I was just doing this week's shopping. How does French toast sound for breakfast tomorrow?"
			PLAYER "That would be awesome. But, um, I was wondering...."
			"Have you seen Bert around today? I can't seem to find him."
			SELF "Sorry, %PLAYER%. Haven't seen him today."
		};
		self direction = north;
	} else {
		show dialog {
			SELF "Good job, %PLAYER%! Congratulations on conquering that castle!"
		};
	}
}

"on_load-ch2-oldcouplehouse" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>BEATRICE'S HOUSE</>..." };
	// do unique stuff first (but player_control = serial / off first, if you do)
	if (!"ch2-delmar-in-house") {
		entity "Delmar" on_tick = "yeet";
	} else {
		if (!"ch2-delmar-is-man") {
			entity "Beatrice" on_tick = "face-player";
			entity "Delmar" on_tick = "face-player";
		} else {
			entity "Beatrice" direction = entity "Delmar";
			entity "Delmar" direction = entity "Beatrice";
			entity "Delmar" type = "old_man";
		}
	}

	copy!("ch2-map-init")
}

"on_tick-ch2-oldcouplehouse" {
	if (player intersects geometry "south-hitbox") {
		goto "on_walk-ch2-oldcouplehouse-south";
	}
	if ("ch2-cutseen-delmar") {
		// and just leave him watching...
		if (entity "Delmar" type != "old_man") {
			entity "Delmar" on_tick = "face-player";
			"interrupt" = true;
		}
		// He'll watch Bea until he's changed into anyting else,
		// then he'll stare at you suspiciously, even if you fix him afterward
	}
}

"ch2-check-if-sheep" {
	if ("ch2-delmar-is-man") {
		goto "null_script";
	}
	if (entity "Delmar" type == "old_man") {
		"ch2-delmar-is-man" = true;
		if (!"ch2-cutseen-delmar") {
			goto "ch2-cutscene-delmar-reconnect";
		}
	}
}

"interact-ch2-delmar" {
	copy!("face-player")
	if ("interrupt") {
		if (entity "Delmar" type == "sheep "|| entity "Delmar" type == "helga") {
			show dialog { SELF "...." };
		} else {
			show dialog { SELF "I've got my eye on you, sonny...." };
		}
	} else if (entity "Delmar" type == "old_man") {
		show dialog { SELF "Thanks a lot, lad. I'll try to be a little more attentive from here on, eh?" };
		self direction = entity "Beatrice";
	} else {
		show dialog { SELF "...." };
	}
}

"interact-ch2-beatrice" {
	copy!("face-player")
	if ("ch2-storyflag-round" < 3) {
		if (!"ch2-beatrice-backstory1") {
			show dialog {
				PLAYER "Oh, where's Delmar?"
				SELF "He's mad at me. I can't say I blame him."
				"I... need to think through some things."
			};
			"ch2-beatrice-backstory1" = true;
		}
		self direction -= 1;
		show dialog {
			SELF "I'm sorry, %PLAYER%, but please leave me alone for the next little while."
		};
	} else if ("ch2-delmar-is-man") {
		show dialog {
			SELF "Thank you, %PLAYER%. Delmar and I have a lot of talking to do."
			"We'll finally be able to reconnect -- remember why we got married in the first place."
			"You've made an old woman very happy!"
		};
		entity "Beatrice" direction = entity "Delmar";
	} else if (!"ch2-beatrice-backstory2") {
		show dialog {
			SELF "I've decided."
			"Would you please have the shepherd bring my Delmar to me?"
			"I need to apologize. I need to try. Life is too short."
			PLAYER "Sure thing, %Beatrice%."
		};
		player_control = off;
		camera fade out -> #000000 over 300ms;
		"ch2-delmar-in-house" = true;
		// undo yeet
		entity "Delmar" position = geometry "delmar-point";
		entity "Delmar" on_look = "look-ch2-delmar";
		entity "Delmar" on_interact = "interact-ch2-delmar";
		entity "Delmar" name = "Delmar";
		// other state
		player position = geometry "cutscene";
		player direction = north;
		entity "Beatrice" direction = entity "Delmar";
		entity "Delmar" direction = entity "Beatrice";
		wait 400ms;
		camera fade in -> #000000 over 300ms;
		// heartfelt convo
		wait 500ms;
		show dialog {
			SELF "Delmar, I...."
		};
		// couple sentences reminiscing
		entity "Beatrice" direction = north;
		show dialog {
			SELF "I was looking through our old albums. Like the one from that camping trip we had up in Yosemite, remember?" // todo: think of better place name? a pun?
		};
		entity "Beatrice" direction = entity "Delmar";
		show dialog {
			SELF "I'd dropped our suitcase down a cliff, but you trekked down through the brambles to fetch it for me."
			"That was the night we saw that shooting star. Remember, that bright green one?"
		};
		// couple sentences contemplating why they drifted apart (complacency?)
		entity "Beatrice" direction = south;
		wait 1400ms;
		show dialog {
			SELF "When did we drift apart? Is that just something that happened slowly, without us realizing it?"
			"I used to love hearing your stories. Yes, after you were turned back into a man you ran your mouth nonstop...."
		};
		entity "Beatrice" direction = entity "Delmar";
		show dialog {
			// couple sentences apologizing (maybe he can turn around the room as if considering)
			SELF "But I missed you dreadfully when you left. I miss you now."
			"I'm very sorry for treating you the way I did. For having you turned back into a sheep, I mean."
			"I love you. I miss you. Can you ever forgive me?"
		};
		wait 1500ms;
		entity "Delmar" direction = east;
		wait 1200ms;
		entity "Delmar" direction = south;
		wait 700ms;
		entity "Delmar" position -> geometry "delmar-walk" origin over 300ms;
		wait 900ms;
		show dialog {
			SELF "Oh, Delmar, thank you!"
		};
		entity "Beatrice" direction = player;
		show dialog "ch2-beatrice-plea" { // referenced below
			SELF "%PLAYER%, would you be so kind as to return Delmar to his original state?"
		};
		entity "Beatrice" on_tick = "face-player";
		entity "Delmar" on_tick = "face-player";
		"ch2-beatrice-backstory2" = true;
		player_control = on;
	} else {
		show dialog "ch2-beatrice-plea";
	}
}

"debug-get-items-for-round2" {
	copy!("ch2-pickup-keyboard")
	copy!("ch2-pickup-mouse")
	copy!("ch2-pickup-needle")
	copy!("ch2-pickup-plate")
	copy!("ch2-solder-harddrive")
}

"debug-get-items-for-round3" {
	copy!("ch2-pickup-ramchips")
	copy!("ch2-pickup-clock")
	copy!("ch2-pickup-goldfish")
	copy!("ch2-pickup-abacus")
	copy!("ch2-solder-cpu")
}

"debug-jump-to-round1" {
	copy!("debug-set-flags-to-round1")
	copy!("ch2-load-castle-1-special")
}

"debug-jump-to-round2" {
	copy!("debug-set-flags-to-round2")
	copy!("ch2-load-castle-1-special")
}

"debug-jump-to-round3" {
	copy!("debug-set-flags-to-round3")
	copy!("ch2-load-castle-1-special")
}

"debug-jump-to-round4" {
	copy!("debug-set-flags-to-round4")
	copy!("ch2-load-castle-1-special")
}

"ch2-pickup-plate" {
	"ch2-map-plate" = false;
	"ch2-carrying-plate" = true;
	if ("ch2-carrying-needle") {
		"ch2-map-solder" = true;
	}
	command "look" + "plate" = "look-plate";
}

"ch2-pickup-needle" {
	"ch2-map-needle" = false;
	"ch2-carrying-needle" = true;
	if ("ch2-carrying-plate") {
		"ch2-map-solder" = true;
	}
	command "look" + "needle" = "look-needle";
}

"ch2-pickup-goldfish" {
	"ch2-map-goldfish" = false;
	"ch2-carrying-goldfish" = true;
	if ("ch2-carrying-abacus") {
		"ch2-map-solder" = true;
	}
	command "look" + "goldfish" = "look-goldfish";
}

"ch2-pickup-abacus" {
	"ch2-map-abacus" = false;
	"ch2-carrying-abacus" = true;
	if ("ch2-carrying-goldfish") {
		"ch2-map-solder" = true;
	}
	command "look" + "abacus" = "look-abacus";
}

"interact-ch2-solderzone" {
	if (!"ch2-parts-round-2-backstory") {
		show dialog {
			PLAYER "It's a metal pen resting inside a metal coil. But why is the pen plugged in? What does it do?"
		};
		return;
	}
	if (!"ch2-solder-sight") {
		show dialog {
			PLAYER "So this is a solder station."
		};
		"ch2-solder-sight" = true;
	}
	// plate + needle = harddrive
	if ("ch2-storyflag-round" == 2) {
		if (
			!"ch2-installed-plate"
			|| !"ch2-installed-needle"
		) {
			if ("ch2-carrying-plate") {
				if (!"ch2-carrying-needle") {
					show dialog {
						PLAYER "I have the plate. Now I just need the needle, and then I can solder them together here."
					};
				} else {
					copy!("interact-ch2-solderzone-harddrive")
				}
			} else if ("ch2-carrying-needle") {
				if (!"ch2-carrying-plate") {
					show dialog {
						PLAYER "I have the needle. Now I just need the plate, and then I can solder them together here."
					};
				} else {
					copy!("interact-ch2-solderzone-harddrive")
				}
			} else {
				show dialog {
					PLAYER "When I have the plate and the needle, I can solder them together here."
				};
			}
		} else {
			show dialog { PLAYER "All done soldering for now." };
		}
	}
	// goldfish + abacus = cpu
	else if ("ch2-storyflag-round" == 3) {
		if (
			!"ch2-installed-goldfish"
			|| !"ch2-installed-abacus"
		) {
			if ("ch2-carrying-goldfish") {
				if (!"ch2-carrying-abacus") {
					show dialog {
						PLAYER "I have the goldfish. Now I just need the abacus, and then I can solder them together here."
					};
				} else {
					copy!("interact-ch2-solderzone-cpu")
				}
			} else if ("ch2-carrying-abacus") {
				if (!"ch2-carrying-goldfish") {
					show dialog {
						PLAYER "I have the abacus. Now I just need the goldfish, and then I can solder them together here."
					};
				} else {
					copy!("interact-ch2-solderzone-cpu")
				}
			} else {
				show dialog {
					PLAYER "When I have the goldfish and the abacus, I can solder them together here."
				};
			}
		} else {
			show dialog { PLAYER "All done soldering for now." };
		}
	} else {
		show dialog {
			PLAYER "Guess I'm all done soldering."
		};
	}
}

"ch2-lambda-round-2-parts1" {
	if ("ch2-lambdabert-skip-spacer") {
		"ch2-lambdabert-skip-spacer" = false;
		show serial_dialog { " " };
	} else {
		show serial_dialog "spacer";
	}
	show serial_dialog {
		"<m>LAMBDA</>: Sorry, um, that was a bit of a tangent. But I actually wanted you to know that I have another round of parts for the parts list."
		"\tJust as a heads up, these parts are going to be a little... abstract."
		" "
		# "Abstract?" = "ch2-lambda-round-2-parts2"
	};
}

"ch2-lambda-round-4d" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: But can't you warp out here? Why do I need to come to you?"
		" "
		"<m>LAMBDA</>: It's... well, it's all very complicated, %PLAYER%. Like I said, I'll explain once you get here."
		"\tI'll... uh, I guess I'll see you soon. Good luck."
		" "
	};
	copy!("ch2-put_on_map-round4")
	"ch2-lambda-paging" = false;
	"ch2-warp-granted" = true;
	"ch2-parts-round-4-backstory" = true;
	if (!debug_mode) {
		copy!("register-warp")
	}
	show serial_dialog "lambda-over";
}

"look-monitor" {
	show serial_dialog "spacer";
	if (!"ch2-carrying-monitor") {
		show serial_dialog {
			"You look at the <m>monitor</>: a modestly large flat screen monitor or television. The colors are crispy enough, though there's a dead pixel in the lower-right corner."
		};
	} else {
		show serial_dialog {
			"You look at the <m>monitor</>: a modestly large flat screen monitor or television. The casing feels flimsy in your hands, but since the screen is unpowered, you can't judge its image quality at the moment."
		};
	}
}

"look-clock" {
	show serial_dialog "spacer";
	if (!"ch2-carrying-clock") {
		show serial_dialog {
			"You look at the <m>clock</>: a giant grandfather clock that's definitely larger than you. Never mind how it could fit in your pocket."
		};
	} else {
		show serial_dialog {
			"You look at the <m>clock</>: a giant grandfather clock that's definitely larger than you. Never mind how it fits in your pocket."
		};
	}
}

"draw-ch2-serial-map" {
	serial_control = off;

	// ROW 0
	concat serial_dialog {"-------------------------------"};
	concat serial_dialog "newline";

	// ROW 1
	concat serial_dialog {"|  "};
	if ("ch2-seen-room-99") {
		concat serial_dialog {"/----\\"};
	} else {
		concat serial_dialog {"      "};
	}
	concat serial_dialog {"      "};
	if ("ch2-seen-room-14") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"      CASTLE  |"};
	concat serial_dialog "newline";

	// ROW 2
	concat serial_dialog {"|  "};
	if ("ch2-seen-room-99") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-in-room" == 99) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-99") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-mainframeos") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-99") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-99") {
		concat serial_dialog {".|"};
	} else {
		concat serial_dialog {"  "};
	}
	concat serial_dialog {"     "};
	if ("ch2-seen-room-14") {
		concat serial_dialog {"/.\\"};
	} else {
		concat serial_dialog {"   "};
	}
	concat serial_dialog {"        MAP  |"};
	concat serial_dialog "newline";

	// ROW 3
	concat serial_dialog {"|  "};
	if ("ch2-seen-room-99") {
		concat serial_dialog {"------"};
	} else {
		concat serial_dialog {"      "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-14") {
		concat serial_dialog {"/.."};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-in-room" == 14) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-14") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-clock") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-14") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-14") {
		concat serial_dialog {".\\"};
	} else {
		concat serial_dialog {"  "};
	}
	concat serial_dialog {"           |"};
	concat serial_dialog "newline";

	// ROW 4
	concat serial_dialog {"|           "};
	if ("ch2-seen-room-14") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-14" || "ch2-seen-room-13") {
		concat serial_dialog {"--+--"};
	} else {
		concat serial_dialog {"     "};
	}
	if ("ch2-seen-room-14") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"           |"};
	concat serial_dialog "newline";

	// ROW 5
	concat serial_dialog {"|            "};
	if ("ch2-seen-room-13") {
		concat serial_dialog {"|...|"};
	} else {
		concat serial_dialog {"     "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-33") {
		concat serial_dialog {"---"};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-seen-room-33" || "ch2-seen-room-34") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-34") {
		concat serial_dialog {"---"};
	} else {
		concat serial_dialog {"   "};
	}
	concat serial_dialog {"  |"};
	concat serial_dialog "newline";

	// ROW 6
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-23") {
		concat serial_dialog {"-----"};
	} else {
		concat serial_dialog {"     "};
	}
	concat serial_dialog {"    "};
	if ("ch2-seen-room-13") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-in-room" == 13) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-13") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-13") {
		concat serial_dialog {".|"};
	} else {
		concat serial_dialog {"  "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-33") {
		concat serial_dialog {"|"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-map-mouse") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-33") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-in-room" == 33) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-33") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-33" || "ch2-seen-room-34") {
		concat serial_dialog {"|"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-in-room" == 34) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-34") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-plate") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-34") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-34") {
		concat serial_dialog {"|"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"  |"};
	concat serial_dialog "newline";

	// ROW 7
	concat serial_dialog {"|  "};
	if ("ch2-seen-room-23") {
		concat serial_dialog {"/.."};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-in-room" == 23) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-23") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-23") {
		concat serial_dialog {"..\\"};
	} else {
		concat serial_dialog {"   "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-13") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-map-goldfish") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-13") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-13") {
		concat serial_dialog {".|"};
	} else {
		concat serial_dialog {"  "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-33") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-33" || "ch2-seen-room-32") {
		concat serial_dialog {"-+"};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-seen-room-33" || "ch2-seen-room-32" || "ch2-seen-room-34") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-32" || "ch2-seen-room-34") {
		concat serial_dialog {"+-"};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-seen-room-34") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"  |"};
	concat serial_dialog "newline";

	// ROW 8
	concat serial_dialog {"|  "};
	if ("ch2-seen-room-23") {
		concat serial_dialog {"\\.."};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-map-heatsink") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-23") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-23") {
		concat serial_dialog {"../"};
	} else {
		concat serial_dialog {"   "};
	}
	concat serial_dialog {"   "};
	if ("ch2-seen-room-13") {
		concat serial_dialog {"|...|"};
	} else {
		concat serial_dialog {"     "};
	}
	concat serial_dialog {"    "};
	if ("ch2-seen-room-32") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-in-room" == 32) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-32") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-32") {
		concat serial_dialog {".|"};
	} else {
		concat serial_dialog {"  "};
	}
	concat serial_dialog {"   |"};
	concat serial_dialog "newline";

	// ROW 9
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-22" || "ch2-seen-room-23") {
		concat serial_dialog {"--+--"};
	} else {
		concat serial_dialog {"     "};
	}
	concat serial_dialog {"    "};
	if ("ch2-seen-room-12" || "ch2-seen-room-13") {
		concat serial_dialog {"--+-"};
	} else {
		concat serial_dialog {"    "};
	}
	if ("ch2-seen-room-12" || "ch2-seen-room-13" || "ch2-seen-room-31") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-31") {
		concat serial_dialog {"----"};
	} else {
		concat serial_dialog {"    "};
	}
	if ("ch2-seen-room-31" || "ch2-seen-room-32") {
		concat serial_dialog {"--+--"};
	} else {
		concat serial_dialog {"     "};
	}
	concat serial_dialog {"   |"};
	if ("ch2-map-manual") {
		if ("ch2-map-seamoss") {
			concat serial_dialog {"   <g>?</> Look for <m>Frankie's</>"};
		}
	}
	concat serial_dialog "newline";

	// ROW 10
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-22") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-in-room" == 22) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-22") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-powersupply") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-22") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-22") {
		concat serial_dialog {"|"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"    "};
	if ("ch2-seen-room-12") {
		concat serial_dialog {"|."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-in-room" == 12) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-12") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-needle") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-12") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-12" || "ch2-seen-room-31") {
		concat serial_dialog {"+"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-31") {
		concat serial_dialog {"..."};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-in-room" == 31) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-31") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-31") {
		concat serial_dialog {"."};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-map-keyboard") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-31") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-31") {
		concat serial_dialog {"..|"};
	} else {
		concat serial_dialog {"   "};
	}
	concat serial_dialog {"   |"};
	if ("ch2-map-manual") {
		if ("ch2-map-seamoss") {
			concat serial_dialog {"   <m>calculator manual</>"};
		}
	}
	concat serial_dialog "newline";

	// ROW 11
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-22" || "ch2-seen-room-21") {
		concat serial_dialog {"--+--"};
	} else {
		concat serial_dialog {"     "};
	}
	if ("ch2-seen-room-21") {
		concat serial_dialog {"----"};
	} else {
		concat serial_dialog {"    "};
	}
	if ("ch2-seen-room-11" || "ch2-seen-room-12" || "ch2-seen-room-21") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-11" || "ch2-seen-room-12") {
		concat serial_dialog {"-+-"};
	} else {
		concat serial_dialog {"   "};
	}
	if ("ch2-seen-room-11" || "ch2-seen-room-12" || "ch2-seen-room-31") {
		concat serial_dialog {"-"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-31") {
		concat serial_dialog {"---------"};
	} else {
		concat serial_dialog {"         "};
	}
	concat serial_dialog {"   |"};
	if ("ch2-map-manual") {
		if ("ch2-map-seamoss") {
			concat serial_dialog {"   in the library in town."};
		}
	}
	concat serial_dialog "newline";

	// ROW 12
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-21") {
		concat serial_dialog {"|..."};
	} else {
		concat serial_dialog {"    "};
	}
	if ("ch2-in-room" == 21) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-21") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-21") {
		concat serial_dialog {"."};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-map-abacus" || "ch2-map-ramchips" || "ch2-map-solder") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-21") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-21") {
		concat serial_dialog {".."};
	} else {
		concat serial_dialog {"  "};
	}
	if ("ch2-seen-room-21" || "ch2-seen-room-11") {
		concat serial_dialog {"+"};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-seen-room-11") {
		concat serial_dialog {"."};
	} else {
		concat serial_dialog {" "};
	}
	if ("ch2-in-room" == 11) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-11") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-map-monitor") {
		concat serial_dialog "item";
	} else {
		if ("ch2-seen-room-11") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	if ("ch2-seen-room-11") {
		concat serial_dialog {"|"};
	} else {
		concat serial_dialog {" "};
	}
	concat serial_dialog {"            |"};
	concat serial_dialog "newline";

	// ROW 13
	concat serial_dialog {"|   "};
	if ("ch2-seen-room-21") {
		concat serial_dialog {"-------"};
	} else {
		concat serial_dialog {"       "};
	}
	concat serial_dialog {"----+----          |"};
	if ("ch2-map-cactuscooler-castle") {
		concat serial_dialog {"   <g>?</> Look for <m>Cactus Cooler</>"};
	} else if ("ch2-map-cactuscooler-bobaustin") {
		concat serial_dialog {"   <g>?</> Ask <m>Stone Cold Bob Austin</>"};
	} else if ("ch2-map-seamoss") {
		concat serial_dialog {"   <g>?</> Look for <m>Sea Moss</>"};
	} else if ("ch2-map-manual") {
		concat serial_dialog {"   <g>?</> Look for <m>Frankie's</>"};
	}
	concat serial_dialog "newline";

	// ROW 14
	concat serial_dialog {"|          |..."};
	if ("ch2-in-room" == 1) {
		concat serial_dialog "player";
	} else {
		if ("ch2-seen-room-1") {
			concat serial_dialog "dot";
		} else {
			concat serial_dialog "space";
		}
	}
	concat serial_dialog {"...|          |"};
	if ("ch2-map-cactuscooler-castle") {
		concat serial_dialog {"   somewhere they keep"};
	} else if ("ch2-map-cactuscooler-bobaustin") {
		concat serial_dialog {"   about Cactus Cooler; he brings"};
	} else if ("ch2-map-seamoss") {
		concat serial_dialog {"   somewhere in the east wing"};
	} else if ("ch2-map-manual") {
		concat serial_dialog {"   <m>calculator manual</>"};
	}
	concat serial_dialog "newline";

	// ROW 15
	concat serial_dialog {"|          ----+----          |"};
	if ("ch2-map-cactuscooler-castle") {
		concat serial_dialog {"   refreshments or drinks."};
	} else if ("ch2-map-cactuscooler-bobaustin") {
		concat serial_dialog {"   loads to all his parties."};
	} else if ("ch2-map-seamoss") {
		concat serial_dialog {"   of the castle."};
	} else if ("ch2-map-manual") {
		concat serial_dialog {"   in the library in town."};
	}
	concat serial_dialog "newline";

	// ROW 16
	concat serial_dialog {"-------------------------------"};
	concat serial_dialog "newline";
	goto "draw-ch2-serial-map-footer";
}

"ch2-toot-check" {
	if ("ch2-toot-level" == 0) {
		goto "ch2-toot-intro";
	} else if ("ch2-toot-level" == 3) {
		goto "ch2-toot-step3-check";
	}
	show serial_dialog "spacer";
	show serial_dialog {
		"<m>LAMBDA</>: Let's pick up where we left off, shall we?"
	};
	if ("ch2-toot-level" == 1) {
		goto "ch2-toot-step1-start";
	} else if ("ch2-toot-level" == 2) {
		goto "ch2-toot-step2-start";
	} else if ("ch2-toot-level" == 4) {
		goto "ch2-toot-step4-start";
	} else {
		show serial_dialog {
			"<r>DEBUG></>: Welp, you've done something strange!"
			"\tVariable 'ch2-toot-level' is $ch2-toot-level$"
			"\tScript: 'ch2-toot-check'"
		};
	}

}

"on_load-ch2-smithfamily" {
	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>SMITH'S HOUSE</>..." };
	// do unique stuff first (but player_control = serial / off first, if you do)
	copy!("ch2-map-init")
}

"on_tick-ch2-smithfamily" {
	if (player intersects geometry "south-hitbox") {
		warp_state = "walk_from-smithfamily";
		load map "ch2-town";
	}
}

"interact-ch2-smith" {
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "Hey, neighbor. Good luck in the castle out west."
			"Knock 'em dead! Or... break their legs! Or... whatever it is you need to do. Go get 'em!"
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "So I just looked it up, and apparently USB stands for universal serial bus."
			"I guess it's like... you plug something in, and it's like there's a bus that drives along the cable, back and forth. Right?"
			PLAYER "Sure."
			SELF "So what is it that makes it universal?"
			PLAYER "I guess you can plug it in and it sort of just works, universally."
			SELF "Mmm, mmm. So if the plug fits, you're good to go. Right? So the data gets on the bus, and is driven to the other side?"
			PLAYER "I... sure. Yeah, why not?"
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Hey, do you know if Bert went anywhere?"
			SELF "Sorry. Don't know anything about the myserious comings and goings of the mysterious village elders."
		};
	} else {
		show dialog {
			SELF "Hey, I heard you did the thing! Way to go!"
		};
	}
}

"on_load-ch2-town" {
	// cutscene interrupt:
	if (warp_state == "cutscene-escort") {
		goto "ch2-escort-cutscene";
	}

	// entrance text
	show serial_dialog "spacer";
	show serial_dialog { "Entering <bold>TOWN</>..." };
	// sending entities to their places
	// elders
	entity "Bert" on_tick = "yeet"; // always hiding
	if ("ch2-storyflag-round" < 5) {
		entity "Jackob" on_tick = "yeet"; // always hiding before end
		if ("ch2-storyflag-round" == 2) {
			copy!("ch2-setup-alfonso-verthandi")
		} else {
			entity "Alfonso" on_tick = "yeet";
		}
	}
	// shepherd
	if (
		"ch2-storyflag-round" == 1
		|| "ch2-storyflag-round" == 2
	) {
		entity "Shepherd" position = geometry "shepherd2";
		entity "Shepherd" direction = east;
		entity "Shepherd" on_tick = "null_script";
	} else if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		entity "Shepherd" position = geometry "shepherd1";
	}
	// verthandi
	if ("ch2-storyflag-round" == 0) {
		entity "Verthandi" position = geometry "verthandi1";
		entity "Verthandi" direction = west;
	} else if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		entity "Verthandi" position = geometry "verthandi2";
		entity "Verthandi" direction = north;
	}
	// marta
	if (
		"ch2-storyflag-round" == 1
		|| "ch2-storyflag-round" == 2
	) {
		entity "Marta" position = geometry "marta1";
		entity "Marta" direction = west;
	} else if (
		"ch2-storyflag-round" == 3
		|| "ch2-storyflag-round" == 4
	) {
		entity "Marta" position = geometry "marta2";
		entity "Marta" direction = south;
	}
	// delmar
	if ("ch2-delmar-in-house") {
		entity "Delmar" on_tick = "yeet";
	}

	// walking out of doorways:
	player_control = off;
	if (warp_state == "raw_game_load-ch2") {
		copy!("restore_player_state")
	} else if (warp_state == "exit_from-credits") {
		player position = geometry "from-credits-spot";
		camera fade in -> #000000 over 800ms;
	} else if (warp_state == "walk_from-east") {
		player path = "walk_from-east"
		player on_tick = "on_tick-ch2-town-walkfadein";
		camera fade in -> #000000 over 400ms;
	} else if (warp_state == "walk_from-west") {
		player path = "walk_from-west";
		player on_tick = "on_tick-ch2-town-walkfadein";
		camera fade in -> #000000 over 400ms;
	} else if (warp_state == "walk_from-bobsclub") {
		player position -> geometry "walk_from-bobsclub" length over 200ms;
	} else if (warp_state == "walk_from-bakery") {
		player position -> geometry "walk_from-bakery" length over 200ms;
	} else if (warp_state == "walk_from-lodge") {
		player position -> geometry "walk_from-lodge" length over 200ms;
	} else if (warp_state == "walk_from-greenhouse") {
		player position -> geometry "walk_from-greenhouse" length over 200ms;
	} else if (warp_state == "walk_from-magehouse") {
		player position -> geometry "walk_from-magehouse" length over 200ms;
	} else if (warp_state == "walk_from-oldcouplehouse") {
		player position -> geometry "walk_from-oldcouplehouse" length over 200ms;
	} else if (warp_state == "walk_from-smithfamily") {
		player position -> geometry "walk_from-smithfamily" length over 200ms;
	} else if (warp_state == "walk_from-woprhouse") {
		player position -> geometry "walk_from-woprhouse" length over 200ms;
	} else if (warp_state == "walk_from-bobsclub") {
		player position -> geometry "walk_from-bobsclub" length over 200ms;
	}
	copy!("ch2-map-init")
	if (debug_mode) {
		command "cutbug" = "cutbug";
		command "cutbug" + "auto" = "cutbug-auto";
		show serial_dialog {
			" "
			"<y>DEBUG></> town</>"
			"<y>></> <c>CUTBUG</>: use player Y position for test"
			"<y>></> <c>CUTBUG AUTO</>: run cutbugs 0-1030"
		};
	}
	copy!("ch2-player-spawn-click-protection")
}

"on_tick-ch2-town" {
	if (player intersects geometry "door-bakery") {
		warp_state = "ch2-town";
		load map "ch2-bakery";
	}
	if (player intersects geometry "door-smithfamily") {
		warp_state = "ch2-town";
		load map "ch2-smithfamily";
	}
	if (player intersects geometry "door-greenhouse") {
		warp_state = "ch2-town";
		load map "ch2-greenhouse";
	}
	if (player intersects geometry "door-magehouse") {
		warp_state = "ch2-town";
		load map "ch2-magehouse";
	}
	if (player intersects geometry "door-lodge") {
		warp_state = "ch2-town";
		load map "ch2-lodge";
	}
	if (player intersects geometry "door-oldcouplehouse") {
		warp_state = "ch2-town";
		load map "ch2-oldcouplehouse";
	}
	if (player intersects geometry "door-bobsclub") {
		warp_state = "ch2-town";
		load map "ch2-bobsclub";
	}
	if (player intersects geometry "door-woprhouse") {
		warp_state = "ch2-town";
		load map "woprhouse"; // both chapters use the same map
	}
	if (player intersects geometry "east-hitbox") {
		player path = "east-point";
		warp_state = "walk_from-west";
		player on_tick = "on_tick-ch2-town-walkfadeout";
		camera fade out -> #000000 over 500ms;
		load map "ch2-town";
	}
	if (player intersects geometry "west-hitbox") {
		player path = "west-point";
		warp_state = "walk_from-east";
		player on_tick = "on_tick-ch2-town-walkfadeout";
		camera fade out -> #000000 over 500ms;
		load map "ch2-castle-outside";
	}
}

"interact-ch2-marta" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "Oh! You're heading out west, to the castle in the mountain?"
			PLAYER "Yeah, the serial castle."
			SELF "That old castle always freaked me out a little bit."
			"It's so ancient, and full of such strange humming and clicking noises. I never really want to stay over there for long."
			"...."
			"Oh, I mean... I'm sure it's perfectly safe. Seriously, I hear King Gibson is actually really nice, and --"
			PLAYER "It's okay, I'll face a spooky old castle to protect the town, even if it is a little creepy."
			SELF "You'll do great. Good luck."
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "How's it going over there? Learning anything about computers?"
			PLAYER "I guess so. I'm starting to build one, anyway."
			"I've been getting a lot of help, though."
			SELF "That's okay. I'm glad you found a mentor to help you learn and do these things. It's a great jump start to learning a new skill."
			PLAYER "I suppose so."
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Hey, %SELF%, I'm looking for Bert. Have you seen him?"
			SELF "Here and there, but not for a while. Do you need him for something?"
			PLAYER "No. Yeah. I don't know."
			"He just said he was going to investigate something, then come right back and tell me what he found out."
			"But I haven't heard anything yet. I'm getting worried."
			SELF "Well, he can't have gotten far. He'll turn up eventually, I'm sure."
			"I'll keep an eye out, though."
		};
	} else {
		show dialog {
			SELF "You've got two artifacts under your belt now. Save some for the rest of us, eh?"
			"In all seriousness, way to go, %PLAYER%!"
		};
	}
	self on_interact = "interact-ch2-marta";
}

"interact-ch2-shepherd" {
	copy!("face-player")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "So, um, I don't really know what's so special about cereal."
			"Like, is the artifact a prize from inside a cereal box?"
			PLAYER "Apparently it's \"serial,\" not \"cereal.\""
			SELF "???" "That's what I said, isn't it? Cereal. Like, granola?"
			PLAYER "No, it's \"serial,\" like... well, I don't know what it's like, but it's not breakfast."
			SELF "Huh, well, I don't really get it, but good luck in the castle."
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "You know, it's the weirdest thing, but I could've sworn there were only four sheep before."
		};
		self direction = east;
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Hey, have you seen Bert recently?"
			SELF "I saw him coming in and out of the library a few times."
			PLAYER "When was that?"
			SELF "Let's see.... Not for kind of a while, I guess."
			"He sure looked like he was in a hurry though. Especially that last time."
			"He came racing out of the library like something was on fire."
			PLAYER "(Oh my goodness. Was that when he came to see me in the castle?)"
			"(But what happened after that?)"
		};
	} else {
		show dialog {
			SELF "Hey, I heard you built a computer or something. That's so cool! Way to go!"
		};
	}
	self on_interact = "interact-ch2-shepherd";
}

"interact-ch2-verthandi" {
	copy!("interrupt-walk")
	if ("ch2-storyflag-round" == 0) {
		show dialog {
			SELF "Oh! You're doing the castle today, aren't you?"
			"I believe in you, %PLAYER%!"
		};
	} else if ("ch2-storyflag-round" <= 2) {
		show dialog {
			SELF "Hello, %PLAYER%. I hope you're making friends and learning all sorts of wonderful things."
			PLAYER "Thank you. I'm doing my best."
		};
	} else if ("ch2-storyflag-round" <= 4) {
		show dialog {
			PLAYER "Excuse me, Miss %Verthandi%, but have you seen Bert recently?"
			SELF "No, I haven't, I'm afraid. Though... oh."
			PLAYER "What is it?"
		};
		player_control = off;
		self direction += 1;
		wait 1500ms;
		self direction -= 1;
		show dialog {
			SELF "How odd. I thought for a moment I sensed him in distress, far, far away."
			PLAYER "You can sense where he is?"
			SELF "Not with any precision, nor any certainty. I do apologize, %PLAYER%."
			"I'll let him know you're looking for him if I see him today."
			PLAYER "Thank you."
		};
		player_control = on;

	} else {
		show dialog {
			SELF "Oh, how wonderful, %PLAYER%! I knew you could do it! Well done!"
		};
	}
	copy!("resume-walk")
}

"interact-ch2-jackob-end" {
	if ("ch2-storyflag-round" < 5) {
		goto "null_script";
	}
	copy!("face-player")
	show dialog {
		SELF "Ah, %PLAYER%, good work today."
	};
	if (!"ch1_finished") {
		if (!"ch1_unfinished_backstory") {
			show dialog {
				SELF "But you know, it seems like you still haven't finished chapter 1 in this save file."
				"I'm not angry. Just disappointed."
				"Just kidding! If the game didn't want you to beat chapter 2 before chapter 1, it should have tried harder to stop you."
				"In all seriousness, do feel free to give chapter 1 a go."
			};
			"ch1_unfinished_backstory" = true;
		}
	}
	show dialog {
		Alfonso "Stop getting distracted! You must remember what you've forgotten!"
		Jackob "I can't remember any more \"old songs\", %Alfonso%. This isn't working, and I need a break."
		Alfonso "We don't have time for breaks! Sing \"Danny Boy\" again, and this time, try to really -- really -- remember where you learned it."
		Jackob "The more I sing \"Danny Boy,\" the more I remember the last time I sang it -- which is right here, right now."
	};
}

"interact-ch2-alfonso-end" {
	if ("ch2-storyflag-round" < 5) {
		goto "null_script";
	}
	copy!("face-player")
	show dialog {
		SELF "I never congratulated you on acquiring the artifact and repairing its fundamental functions, %PLAYER%. Good job."
		"The next challenge will test you further, but you should still try to remember everything you've learned so far."
		"Remember... yes, remember everything you've learned. We all must remember...."
	};
}

"interact-ch2-hamster" {
	copy!("face-player")
	if ("ch2-hamstertalk" == 0) {
		show dialog {
			SELF "Ohhh... the wheel is still spinning, but the hamster is dead."
		};
		"ch2-hamstertalk" = 1;
	} else if ("ch2-hamstertalk" == 1) {
		show dialog {
			SELF "I demand more asbestos!"
		};
		"ch2-hamstertalk" = 2;
	} else if ("ch2-hamstertalk" == 2) {
		show dialog {
			SELF "Fungible."
		};
		"ch2-hamstertalk" = 0;
	}
}

"cutbug-auto" {
    player_control = off;
    player y = 0;
    for ("j" = 0; "i" < 1030; "j" += 1) {
        player y = "j";
        copy!("cutbug")
        wait 250ms;
    }
}

"cutbug" {
    "qty" = player y;
    // "qty" %= 256;
    show serial_dialog "spacer";
    concat serial_dialog {
        "<c>CUTBUG!</> "
    };
    if ("qty" < 10) {
        concat serial_dialog {
            "000"
        };
    } else if ("qty" < 100) {
        concat serial_dialog {
            "00"
        };
    } else if ("qty" < 1000) {
        concat serial_dialog {
            "0"
        };
    }
    concat serial_dialog {
        "$qty$\n"
    };
    for ("i" = 0; "i" <= "qty"; "i" += 1) {
        print:
        "mod" = "i" *1;
        "mod" %= 16;
        if ("mod" == 0) {
            concat serial_dialog { "\n" };
        } else if ("mod" == 1) {
            concat serial_dialog { "1" };
        } else if ("mod" == 2) {
            concat serial_dialog { "2" };
        } else if ("mod" == 3) {
            concat serial_dialog { "3" };
        } else if ("mod" == 4) {
            concat serial_dialog { "4" };
        } else if ("mod" == 5) {
            concat serial_dialog { "5" };
        } else if ("mod" == 6) {
            concat serial_dialog { "6" };
        } else if ("mod" == 7) {
            concat serial_dialog { "7" };
        } else if ("mod" == 8) {
            concat serial_dialog { "8" };
        } else if ("mod" == 9) {
            concat serial_dialog { "9" };
        } else if ("mod" == 10) {
            concat serial_dialog { "A" };
        } else if ("mod" == 11) {
            concat serial_dialog { "B" };
        } else if ("mod" == 12) {
            concat serial_dialog { "C" };
        } else if ("mod" == 13) {
            concat serial_dialog { "D" };
        } else if ("mod" == 14) {
            concat serial_dialog { "E" };
        } else if ("mod" == 15) {
            concat serial_dialog { "F" };
        }
    }
}

"man-inventory" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c><bold>MGE GENERAL COMMANDS MANUAL - INVENTORY</>"
		" "
		"Use this command to see what items you are currently carrying. This command may also be triggered with the abbreviation <c>I</>."
	};
	if ("ch2-parts-round-2-backstory") {
		show serial_dialog {
			" "
			"Some items may be combined at one of the solder stations in the castle workshop."
		};
	}
}

"command-inventory" {
	// set the `count-inventory` flag "first"; if true, don't print anything! just count!
	"ch2-count-inventory" = 0;
	if (!"only-count-inventory") {
		show serial_dialog "spacer";
		show serial_dialog {
			"<c>INVENTORY:</>"
		};
	}
	// normal
	if ("ch2-carrying-cactuscooler") {
		if (!"only-count-inventory") {
			show serial_dialog { "	can of Cactus Cooler" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-heatsink") {
		if (!"only-count-inventory") {
			show serial_dialog { "	heat sink" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-powersupply") {
		if (!"only-count-inventory") {
			show serial_dialog { "	power supply" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-monitor") {
		if (!"only-count-inventory") {
			show serial_dialog { "	monitor" };
		}
		"ch2-count-inventory" += 1;
	}
	// abstract
	if ("ch2-carrying-harddrive") {
		if (!"only-count-inventory") {
			show serial_dialog { "	hard drive" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-plate") {
		if (!"only-count-inventory") {
			show serial_dialog { "	dinner plate" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-needle") {
		if (!"only-count-inventory") {
			show serial_dialog { "	phonograph needle" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-keyboard") {
		if (!"only-count-inventory") {
			show serial_dialog { "	keyboard" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-mouse") {
		if (!"only-count-inventory") {
			show serial_dialog { "	mouse" };
		}
		"ch2-count-inventory" += 1;
	}
	// desperate
	if ("ch2-carrying-ramchips") {
		if (!"only-count-inventory") {
			show serial_dialog { "	ramchips" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-clock") {
		if (!"only-count-inventory") {
			show serial_dialog { "	clock" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-cpu") {
		if (!"only-count-inventory") {
			show serial_dialog { "	cpu" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-goldfish") {
		if (!"only-count-inventory") {
			show serial_dialog { "	goldfish" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-manual") {
		if (!"only-count-inventory") {
			show serial_dialog { "	calculator manual" };
		}
		"ch2-count-inventory" += 1;
	}
	if ("ch2-carrying-abacus") {
		if (!"only-count-inventory") {
			show serial_dialog { "	abacus" };
		}
		"ch2-count-inventory" += 1;
	}
	// final
	if ("ch2-carrying-mainframeos") {
		if (!"only-count-inventory") {
			show serial_dialog { "	mainframe OS CD" };
		}
		"ch2-count-inventory" += 1;
	}
	// mini-rake quest
	if ("ch2-carrying-minirake-99") {
		if (!"only-count-inventory") {
			show serial_dialog { "	mini rake" };
		}
		"ch2-count-inventory" += 1;
	}
	// wrapup:
	if ("ch2-count-inventory" == 0) {
		if (!"only-count-inventory") {
			show serial_dialog { "	(nothing)" };
		}
	}
	"only-count-inventory" = false;
	"ch2-counted-inventory" = ch2-count-inventory;
	"ch2-count-inventory" = 0;
}

"command-man" {
	if (dialog open) {
		if ("can-interrupt-dialog") {
			close dialog;
			"can-interrupt-dialog" = false;
		}
	}
	if ("ch2-in-room" == 99) {
		show dialog {
			name Lambda portrait lambda "Sorry, it's a little awkward to text chat with you when you're looking over my shoulder."
		};
	} else if (
		"ch2-ring-zero-enabled-in-castle" // the artifact is full power
		|| "ch2-in-room" != 0 // OR you're in the castle
	) {
		// `man` works normally
		goto "command-man-normal";
	} else {
		// otherwise, `man` cannot reach Lambda
		copy!("ch2-wireless-error")
	}
}

"command-man-normal" {
	if ("ch2-cutseen-bert-secret") {
		if (!"ch2-lambda-bert-backstory") {
			goto "ch2-bert-secret-lambda-intro";
		} else if (!"ch2-parts-round-2-backstory") {
			goto "ch2-lambda-round-2-parts1";
		}
	}
	if ("ch2-cutseen-bert-message") {
		if (!"ch2-parts-round-3-backstory") {
			goto "ch2-bert-message-lambda-intro";
		}
	}
	if ("ch2-cutseen-last-parts-done") {
		if (!"ch2-parts-round-4-backstory") {
			goto "ch2-lambda-round-4";
		}
	}
	
	if ("ch2-toot-done") {
		goto "command-man-normal-convo";
	}

	// You're talking to Lambda over serial for the first time:
	// (You need to finish the toot)
	goto "ch2-toot-check";
}

"ch2-lambda-topic-q" {
	if ("ch2-storyflag-round" < 5) {
		goto "ch2-lambda-topic-q-midgame";
	} else {
		goto "ch2-lambda-topic-q-end";
	}
}

"ch2-lambda-mainframe-fix-1" {
	show serial_dialog "spacer";
	if ("ch2-storyflag-round" < 4) {
		show serial_dialog {
			"<c>YOU</>: How do we fix it? What do we need?"
			" "
			"<m>LAMBDA</>: We'll have to build a new computer from scratch. The old bits are... well, just bits -- bits of copper and plastic and silicon debris."
			"	But there should be enough <m>computer parts</> scattered throughout the castle. I have my parts list right here. The software though... I'll, um, get back to you about that."
			" "
		};
	} else if ("ch2-storyflag-round" == 4) {
		show serial_dialog {
			"<c>YOU</>: How do we fix it? What do we need?"
			" "
			"<m>LAMBDA</>: We've rebuilt the computer itself, so all we need now is its operating system. I've got it ready now, so come on up to my secret lab and I'll give it to you."
			" "
		};
	} else {
		show serial_dialog {
			"<c>YOU</>: How do we fix it? What do we need?"
			" "
			"<m>LAMBDA</>: The mainframe itself is all fixed -- which is to say, we've bodged things well enough for now."
			"	Though there's still the matter of Aurelius. I've already sent for a CPU to come in the mail, so all we have to do is wait for it to get here, then we can swap it out and put him back to normal."
			"	As for the other bodges... you know, maybe it's best not to mess with anything else if it's all working."
			" "
		};

	}
	goto "ch2-lambda-topic-mainframe-q";
}

"ch2-lambda-person-kuro" {
	show serial_dialog "spacer";
	if (!"ch2-seen-room-11") {
		show serial_dialog {
			"<c>YOU</>: Tell me about Kuro."
			" "
			"<m>LAMBDA</>: Sorry, I don't know anyone named Kuro."
		};
	} else {
		show serial_dialog {
			"<c>YOU</>: Tell me about Kuro -- I mean, the little black bird in the front hallway."
			" "
			"<m>LAMBDA</>: Sorry, I don't know any little black birds. Kuro must be a visitor. If he's in the front hallway, then he didn't get very far into the castle and must be trapped, separated from whoever he must have wanted to visit. Poor thing."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-concierge" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about the castle concierge."
		" "
	};
	if (!"ch2-seen-room-12") {
		show serial_dialog {
			"<m>LAMBDA</>: The concierge? Have you been so deep into the castle hallway yet? But oh, you've probably guessed there's a concierge, right? It's true that this is <bold>that</> kind of castle. Overly formal, I mean."
			"	I don't remember too much about that guy, but... oh, I guess I don't remember him at all. We must never have crossed paths much."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Oh yeah, that guy! He looks fierce but he's actually really friendly. His growling is a side effect of his condition, chronic lycanthropy."
			"	He's a music lover, if I'm remembering right. He's a little compulsive about it, always wanting something playing...."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-templeton" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Templeton."
		" "
	};
	if (!"ch2-seen-room-13") {
		show serial_dialog {
			"<m>LAMBDA</>: Templeton, Templeton. One of King Gibson's advisors, I think. Or was he a giant blancmange? Sorry, I guess I don't know much about that guy."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Templeton is one of the king's advisors. You've met him, so you understand how paranoid he can be, but in practice he provides a good balance to Sebastian, who is more aggressive and who doesn't tend to think things through enough. He's really friendly, and a very heavy reader."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-sebastian" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Sebastian."
		" "
	};
	if (!"ch2-seen-room-13") {
		show serial_dialog {
			"<m>LAMBDA</>: Sebastian? He was one of King Gibson's advisors, wasn't he? I seem to recall him being combatative fairly often. Some kind of magic user, too."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Sebastian's heart is in the right place, but he's stubborn enough and brash enough that it can be hard to remember that, particularly if he has an opinion about something. But there's a reason King Gibson keeps him around, after all. He's good at his job."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-alvin" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Alvin."
		" "
	};
	if (!"band-backstory") {
		show serial_dialog {
			"<m>LAMBDA</>: Alvin? Oh, you mean the Alvin from the band \"1023 MB.\" Oh yeah, they were supposed to play tonight in the grand hall."
		};
		"band-backstory" = true;
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Alvin? Oh, you mean the Alvin from the band \"1023 MB.\""
		};
	}
	show serial_dialog {
		"	Yeah, so, Alvin -- by reputation, she's the quiet, mysterious one of the group -- that's all I know."
	};
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-theodore" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Theodore."
		" "
	};
	if (!"band-backstory") {
		show serial_dialog {
			"<m>LAMBDA</>: Theodore? Oh, you mean the Theodore from the band \"1023 MB.\" Oh yeah, they were supposed to play tonight in the grand hall."
		};
		"band-backstory" = true;
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Theodore? Oh, you mean the Theodore from the band \"1023 MB.\""
		};
	}
	show serial_dialog {
		"	Yeah, so, Theodore -- I've never met them personally. I've heard they're the straightforward, stoic type, though."
	};
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-simon" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Simon."
		" "
	};
	if (!"band-backstory") {
		show serial_dialog {
			"<m>LAMBDA</>: Simon? Oh, you mean the Simon from the band \"1023 MB.\" Oh yeah, they were supposed to play tonight in the grand hall."
		};
		"band-backstory" = true;
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Simon? Oh, you mean the Simon from the band \"1023 MB.\""
		};
	}
	show serial_dialog {
		"	Yeah, so, Simon -- from what I understand he's brash and kind of a pain to be around. Never met him, but I don't really <bold>want</> to meet him, you know?"
	};
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-seamoss" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Sea Moss."
		" "
	};
	if (!"ch2-seen-room-32") {
		show serial_dialog {
			"<m>LAMBDA</>: Sea Moss? Sea Moss... I-I think I...."
			"	I think I used to be good friends with him, but... what did we do together?"
			"	I seem to remember we... no, it's gone. I'm sorry."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Yes! Sea Moss! He's a big computer tinkerer. Knows everything about all the weird, low-level layers of computer circuitry, all the way down to the transistors themselves."
			"	And he makes the best crepes, too, believe it or not!"
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-gloria" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Gloria."
		" "
	};
	if (!"ch2-seen-room-32") {
		show serial_dialog {
			"<m>LAMBDA</>: Gloria? I think I recognize the name, but I can't picture a face. Maybe if I could just see who it was...."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Oh, Gloria, the golden beetle. She's, um, a little prone to panic, but honestly she's good at her job. She manages the castle payroll... that is, when she's not trapped in the employee break room with her toddler after an earthquake."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-samson" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Samson."
		" "
	};
	if (!"ch2-seen-room-32") {
		show serial_dialog {
			"<m>LAMBDA</>: Samson? That name doesn't ring a bell."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: I think Samson was the name of Gloria's kid, wasn't it? Was he two or three? Or five or six? I don't know. I was never that good with children."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-gregory" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Gregory."
		" "
	};
	if (!"ch2-seen-room-33") {
		show serial_dialog {
			"<m>LAMBDA</>: I think Gregory was the castle chef... maybe? I feel like he's been there forever, but I can't remember what he looks like."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Ah, Gregory! He runs the castle kitchens. He's a bit gray around the whiskers, but is still as quick as ever. Excellent taste, and great at improvising recipes."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-jeanpaul" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Jean-Paul."
		" "
	};
	if (!"ch2-seen-room-21") {
		show serial_dialog {
			"<m>LAMBDA</>: Jean-Paul. A French... hen? Chicken? Some kind of bird? Gosh, I really can't remember, I'm sorry."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Ah, Jean-Paul! He's a cockatiel -- that's a kind of parakeet. He's always tidy about his workspace. Unlike me, ha ha.... Oh! You should hear him whistle sometime!"
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-frankie" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Frankie."
		" "
	};
	if (!"ch2-seen-room-21") {
		show serial_dialog {
			"<m>LAMBDA</>: Hmm, \"Frankie,\" let's see.... Was that one of the hardware guys? I can't remember anything else, sorry."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Frankie is a great guy to have around if you're experiencing a hardware issue. They're our printer-wrangler, be they 2D or 3D printers."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-scuzzy" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Scuzzy."
		" "
	};
	if (!"ch2-seen-room-22") {
		show serial_dialog {
			"<m>LAMBDA</>: Scuzzy? Or did you mean SCSI, that old data interface? It was kind of a pain, to be honest. You couldn't just connect things together -- you had to daisy chain the devices, and have a SCSI terminator at the end or none of it would work. Good riddance."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Scuzzy? Oh yeah, that guy from the server room."
			"	Scuzzy likes to see how things connect to each other. He's always coming up with ways people can connect to each other, or ways for unrelated objects to fit together to build something cool. It's usually stuff you wouldn't think of, too."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-ckwatt" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about C. K. Watt."
		" "
	};
	if (!"ch2-seen-room-22") {
		show serial_dialog {
			"<m>LAMBDA</>: C. K. Watt? Isn't that a bit from Fawlty Towers? I mean, it's a bit of an obnoxious reference, isn't it?"
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Oh, yeah, Charles. Oh, I'm sorry, I guess I should call him Mr. Watt now. He recently got promoted, so he's technically my boss when it comes to my responsibilities within the castle. Er, not that the normal castle hierarchy is much in play at the moment."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-tracy" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Tracy."
		" "
	};
	if (!"ch2-seen-room-23") {
		show serial_dialog {
			"<m>LAMBDA</>: Tracy. Hmm. I think there was someone named Tracy in the power plant. Can't remember what their job was, though."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: That's right, Tracy is the logistics manager for the power plant. Makes sure the whole operation is funded and supplied which in turn keeps the whole castle running."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-rocco" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Rocco."
		" "
	};
	if (!"ch2-seen-room-23") {
		show serial_dialog {
			"<m>LAMBDA</>: Rocco was... hmm, let me see... was he someone from the workshop? I think that's right. I don't know if we ever interacted much."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Rocco builds and maintains the castle's computers. The normal-sized computers, I mean. I guess once in a while he also works on the castle itself. The castle is a computer, too, you know. That's why there's circuitry all over the place."
			"	Huh, I just remembered this old project we did together a few years ago. It was this tiny LED screen and some random SOC on this board he drew up. We got a pair of really cheap joysticks, and I programmed a bunch of little arcade games for it."
			"	Aw, man. He and I used to make a lot of cool stuff. I'd do the software half, he the hardware half. I... I miss those times. How did I forget about that?"
			"	I guess it's been a while since I've seen him in person. I hope he's doing okay."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-xc" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about XC."
		" "
	};
	if (!"ch2-seen-room-99") {
		show serial_dialog {
			"<m>LAMBDA</>: I mean, it's true I have an Exa named XC in here with me. I guess you extrapolated the name XC, right?"
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: Oh, sure, XC. That's the Exa I've got in my lab."
		};
	}
	show serial_dialog {
		"	Well, it's just another Exa, I guess, much like XA. In this case, XC and XA are directly connected, so it's what I use as an intercom into that front room."
	};
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-lambda-where" {
	show serial_dialog "spacer";
	if (!"ch2-seen-room-99") {
		show serial_dialog {
			"<c>YOU</>: Where are you?"
			" "
			"<m>LAMBDA</>: You know... um... it's kind of complicated. In a manner of speaking, I'm inside the castle. Let's just say I'm nearby but not close."
		};
	} else {
		if ("ch2-in-room" == 99) {
			show serial_dialog {
				"<c>YOU</>: Where are you? I mean, where are WE? There aren't any doors here."
			};
		} else {
			show serial_dialog {
				"<c>YOU</>: Where are you? I mean -- spatially, where is that lab of yours? There weren't any doors inside."
			};
		}
		show serial_dialog {
			" "
			"<m>LAMBDA</>: I'd say it's a pocket dimension, but it's more mundane than that. It's just its own separate space somewhere under the mountain. I set it all up back before everything went south, back when everyone was using the mainframe for all sorts of trivial nonsense."
		};
	}
	goto "ch2-lambda-person-lambda-q";
}

"ch2-lambda-person-lambda-name-2c" {
	show serial_dialog {
		"	...I found the place in the world where my name linked to my data as an entity... and destroyed it."
	};
	if ("ch2-storyflag-round" < 5) {
		show serial_dialog {
			" "
			# "What? But why?" = "ch2-lambda-person-lambda-name-3"
		};
	} else {
		show serial_dialog {
			"	The <r>Big Bad</> couldn't target me with hacks without knowing my name, you see, so I made it impossible to learn my name, or even know my name."
			"	I severed more than I intended, but...."
		};
		goto "ch2-lambda-person-lambda-name-followup";
	}
}

"ch2-lambda-person-alfonso" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Alfonso."
	};
	if (!"ch2-cutseen-secret-ending") {
		show serial_dialog {
			" "
			"<m>LAMBDA</>: Alfonso? That name rings a bell... maybe? I-I feel like I should know who that is."
			"	Aw, man. I feel terrible. I'm having this sort of painful nostalgia about that name right now. Did I let him down about something? Hmm."
		};
	} else {
		show serial_dialog {
			" "
			"<m>LAMBDA</>: Alfonso, yes! I look up to him a lot. And he's fond of me -- or, um, I guess he <bold>was</> fond of me. N-not anymore, I guess."
			"	I hope... I really do hope he'll try to get to know me again. I was the rookie of the group, so I feel like they were all sort of hard on me sometimes, but we mostly got along back then...."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-jackob" {
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Tell me about Jackob."
	};
	if (!"ch2-cutseen-secret-ending") {
		show serial_dialog {
			" "
			"<m>LAMBDA</>: Jackob... Jackob.... That name is a bit odd, isn't it? There's something about that name... like there's something wrong about it. Is that really how it's spelled?"
		};
	} else {
		show serial_dialog {
			" "
			"<m>LAMBDA</>: Jackob! He's the oldest village elder, of course, so he's the most knowledgeable of all of us. Or... at least he <bold>was</>. I-I confess he looked old and confused to me just now. That was hard to watch. The Big Bad must have really done a number on him."
		};
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-person-bert" {
	show serial_dialog "spacer";
	if (!"ch2-cutseen-bert-secret") {
		show serial_dialog {
			"<c>YOU</>: Tell me about Bert."
			" "
			"<m>LAMBDA</>: Bert? I don't know any Berts... I think? You know, maybe -- no, no, I think I'm mixing myself up. I just had the image of Sasquatch in my head for a second when you said that."
		};
	} else {
		show serial_dialog {
			"<c>YOU</>: About Bert...."
		};
	
		goto "ch2-lambda-bert-q";
	}
	goto "ch2-lambda-topic-person-s";
}

"ch2-lambda-bert-mentioned" {
	"ch2-lambdabert-q2" = true;
	if (!"ch2-cutseen-castle99") {
		show serial_dialog "spacer";
		show serial_dialog {
			"<c>YOU</>: Bert's never mentioned you."
			" "
			"<m>LAMBDA</>: Well... he might not know I'm here. In the castle."
			" "
			"<c>YOU</>: But the village elders knew XA was here. In the castle."
			" "
			"<m>LAMBDA</>: Yes, well, that's because...."
			"	Look... um... sometimes it's not so bad being left behind, you know? They're all better off without me. It's complicated, but by staying apart, I'm keeping everyone safer, believe it or not."
		};
		goto "ch2-lambda-bert-autocontinue-check";
	} else {
		show serial_dialog "spacer";
		show serial_dialog {
			"<c>YOU</>: Bert's never mentioned you."
			" "
			"<m>LAMBDA</>: Well... he wouldn't have. He doesn't remember me at all."
			"	I have a lot of regrets about everything, but he was actually one of the ones who argued that I take this course of action -- to sever the connection between <bold>me</> and my <bold>name</> and make everyone forget me. It's tragic, but this <bold>is</> what he wanted."
		};
		goto "ch2-lambda-bert-autocontinue-check";
	}
}

"ch2-lambda-bert-message" {
	"ch2-lambdabert-q4" = true;
	show serial_dialog "spacer";
	show serial_dialog {
		"<c>YOU</>: Do you know if Bert left a message yet?"
		" "
	};
	if ("interrupt") {
		show serial_dialog {
			"<m>LAMBDA</>: Haha! He's only been gone a moment! Be patient."
		};
	} else {
		show serial_dialog {
			"<m>LAMBDA</>: You might want to double check with the Wiz, but I haven't heard anything so far, sorry."
		};
	}
	goto "ch2-lambda-bert-autocontinue-check";
}

"ch2-lambda-bert-autocontinue-check" {
	if (
		"ch2-parts-round-2-backstory"
		|| !"ch2-lambdabert-q1"
		|| !"ch2-lambdabert-q2"
		|| !"ch2-lambdabert-q3"
		|| !"ch2-lambdabert-q4"
	) {
		goto "ch2-lambda-bert-q";
	} else {
		"ch2-lambdabert-skip-spacer" = true;
		goto "ch2-lambda-round-2-parts1";	
	}
}

"ch2-lambda-bert-quit" {
	if ("CALLBACK" == 1) {
		"CALLBACK" = 0;
		goto "ch2-lambda-round-2-parts1";
	} else {
		goto "ch2-lambda-topic-person-s";
	}
}

"draw-ch2-serial-map-footer" {
	concat serial_dialog {
		"\nCurrent location: <c>"
	};
	if ("ch2-in-room" == 1) {
		concat serial_dialog {
			"CASTLE ENTRANCE"
		};
	} else if ("ch2-in-room" == 11) {
		concat serial_dialog {
			"CASTLE HALLWAY FRONT"
		};
	} else if ("ch2-in-room" == 12) {
		concat serial_dialog {
			"CASTLE HALLWAY BACK"
		};
	} else if ("ch2-in-room" == 13) {
		concat serial_dialog {
			"THRONE ROOM"
		};
	} else if ("ch2-in-room" == 14) {
		concat serial_dialog {
			"KING GIBSON'S BEDROOM"
		};
	} else if ("ch2-in-room" == 21) {
		concat serial_dialog {
			"WORKSHOP"
		};
	} else if ("ch2-in-room" == 22) {
		concat serial_dialog {
			"SERVER ROOM"
		};
	} else if ("ch2-in-room" == 23) {
		concat serial_dialog {
			"POWER PLANT"
		};
	} else if ("ch2-in-room" == 31) {
		concat serial_dialog {
			"GRAND HALL"
		};
	} else if ("ch2-in-room" == 32) {
		concat serial_dialog {
			"CASTLE KITCHEN"
		};
	} else if ("ch2-in-room" == 33) {
		concat serial_dialog {
			"HYDROPONICS ROOM"
		};
	} else if ("ch2-in-room" == 34) {
		concat serial_dialog {
			"CASTLE PANTRY"
		};
	} else if ("ch2-in-room" == 99) {
		concat serial_dialog {
			"LAMBDA'S LAB"
		};
	} else {
		concat serial_dialog {
			"</><bold>(outside the castle)"
		};
	}
	concat serial_dialog {
		"</>\n"
	};
	serial_control = on;
}

"command-parts-fail" {
	if (
		"ch2-ring-zero-enabled-in-castle" // the artifact is full power
		|| "ch2-in-room" != 0 // OR you're in the castle
	) {
		// `parts` works normally
		show serial_dialog "spacer";
		show serial_dialog {
			"<m>LAMBDA</>: Not sure what you mean. Want to ask about one of these instead?"
			" "
		};
		goto "command-parts-print";
	} else {
		// otherwise, `parts` cannot reach Lambda
		copy!("ch2-wireless-error")
	}

}

"command-parts" {
	if (
		"ch2-ring-zero-enabled-in-castle" // the artifact is full power
		|| "ch2-in-room" != 0 // OR you're in the castle
	) {
		// `parts` works normally
		show serial_dialog "spacer";
		show serial_dialog {
			"<c>PARTS LIST</>"
			" "
		};
		goto "command-parts-print";
	} else {
		// otherwise, `parts` cannot reach Lambda
		copy!("ch2-wireless-error")
	}
}

"command-parts-print" {
	if ("ch2-storyflag-round" == 1) {
		goto "label one";
	} else if ("ch2-storyflag-round" == 2) {
		if (!"ch2-parts-round-2-backstory") {
			goto "label one";
		} else {
			goto "label two";
		}
	} else if ("ch2-storyflag-round" == 3) {
		if (!"ch2-parts-round-3-backstory") {
			goto "label two";
		} else {
			goto "label three";
		}
	} else if ("ch2-storyflag-round" >= 4) {
		if (!"ch2-parts-round-4-backstory") {
			goto "label three";
		} else {
			goto "label four";
		}
	}
	one:
	if ("ch2-installed-heatsink") {
		show serial_dialog { "- [x] heat sink" };
	} else if ("ch2-carrying-heatsink") {
		show serial_dialog { "- [~] heat sink" };
	} else {
		show serial_dialog { "- [ ] heat sink" };
	}

	if ("ch2-installed-powersupply") {
		show serial_dialog { "- [x] power supply" };
	} else if ("ch2-carrying-powersupply") {
		show serial_dialog { "- [~] power supply" };
	} else {
		show serial_dialog { "- [ ] power supply" };
	}

	if ("ch2-installed-monitor") {
		show serial_dialog { "- [x] monitor" };
	} else if ("ch2-carrying-monitor") {
		show serial_dialog { "- [~] monitor" };
	} else {
		show serial_dialog { "- [ ] monitor" };
	}
	goto "label wrapup";
	two:
	if ("ch2-installed-harddrive") {
		show serial_dialog { "- [x] hard drive" };
	} else if ("ch2-carrying-harddrive") {
		show serial_dialog { "- [~] hard drive" };
	} else {
		show serial_dialog { "- [ ] hard drive" };
	}
	if ("ch2-installed-plate") {
		show serial_dialog { "\t- [x] dinner plate" };
	} else if ("ch2-carrying-plate") {
		show serial_dialog { "\t- [~] dinner plate" };
	} else {
		show serial_dialog { "\t- [ ] dinner plate" };
	}
	if ("ch2-installed-needle") {
		show serial_dialog { "\t- [x] phonograph needle" };
	} else if ("ch2-carrying-needle") {
		show serial_dialog { "\t- [~] phonograph needle" };
	} else {
		show serial_dialog { "\t- [ ] phonograph needle" };
	}

	if ("ch2-installed-keyboard") {
		show serial_dialog { "- [x] keyboard" };
	} else if ("ch2-carrying-keyboard") {
		show serial_dialog { "- [~] keyboard" };
	} else {
		show serial_dialog { "- [ ] keyboard" };
	}

	if ("ch2-installed-mouse") {
		show serial_dialog { "- [x] mouse" };
	} else if ("ch2-carrying-mouse") {
		show serial_dialog { "- [~] mouse" };
	} else {
		show serial_dialog { "- [ ] mouse" };
	}
	goto "label wrapup";
	three:
	if ("ch2-installed-ramchips") {
		show serial_dialog { "- [x] RAM chips" };
	} else if ("ch2-carrying-ramchips") {
		show serial_dialog { "- [~] RAM chips" };
	} else {
		show serial_dialog { "- [ ] RAM chips" };
	}

	if ("ch2-installed-clock") {
		show serial_dialog { "- [x] clock" };
	} else if ("ch2-carrying-clock") {
		show serial_dialog { "- [~] clock" };
	} else {
		show serial_dialog { "- [ ] clock" };
	}

	if ("ch2-installed-cpu") {
		show serial_dialog { "- [x] cpu" };
	} else if ("ch2-carrying-cpu") {
		show serial_dialog { "- [~] cpu" };
	} else {
		show serial_dialog { "- [ ] cpu" };
	}
	if ("ch2-installed-goldfish") {
		show serial_dialog { "\t- [x] goldfish" };
	} else if ("ch2-carrying-goldfish") {
		show serial_dialog { "\t- [~] goldfish" };
	} else {
		show serial_dialog { "\t- [ ] goldfish" };
	}
	if ("ch2-installed-abacus") {
		show serial_dialog { "\t- [x] abacus" };
	} else if ("ch2-carrying-abacus") {
		show serial_dialog { "\t- [~] abacus" };
	} else {
		show serial_dialog { "\t- [ ] abacus" };
	}
	goto "label wrapup";
	four:
	if ("ch2-installed-mainframeos") {
		show serial_dialog { "\t- [x] mainframe os" };
	} else if ("ch2-cutseen-castle99") {
		show serial_dialog { "\t- [~] mainframe os" };
	} else {
		show serial_dialog { "\t- [ ] mainframe os" };
	}
	wrapup:
	show serial_dialog {
		" "
		"(For information about one of the above parts, type <c>PARTS</> followed by the part name.)"
	};
}

"command-parts-monitor" {
	show serial_dialog "spacer";
	if ("ch2-installed-monitor") {
		show serial_dialog { "<m>LAMBDA</>: You've got the monitor all set up already. If it looks broken, it's only because the mainframe can't boot up yet." };
	} else if ("ch2-carrying-monitor") {
		show serial_dialog { "<m>LAMBDA</>: Looks like you've got the monitor already. To install it, all you'll need to do is find the matching ports on the mainframe enclosure. It's all keyed, so there's no plugging anything in the wrong way.\n\tOh, and don't forget to plug the monitor into power." };
	} else {
		copy!("ch2-describe-monitor")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-heatsink" {
	show serial_dialog "spacer";
	if ("ch2-installed-heatsink") {
		show serial_dialog { "<m>LAMBDA</>: You've got the heat sink ready to go, but you'll need to install the CPU first, so, uh, you can just leave it there for the moment." };
	} else if ("ch2-carrying-heatsink") {
		show serial_dialog { "<m>LAMBDA</>: Looks like you've got the heat sink already! So, uh, I sort of forgot you can't install that until the CPU is in there, so just set it aside for the moment. We'll do the actual install later." };
	} else {
		copy!("ch2-describe-heatsink")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-powersupply" {
	show serial_dialog "spacer";
	if ("ch2-installed-powersupply") {
		show serial_dialog { "<m>LAMBDA</>: The power supply is in place already. Notice, though, that it's got a bunch of smaller wires coming off of it -- you'll need to plug other components into those later. Everything is keyed, so it should be obvious how everything should be plugged when the time comes." };
	} else if ("ch2-carrying-powersupply") {
		show serial_dialog { "<m>LAMBDA</>: There's a spot where the power supply goes -- it should be fairly obvious. Then screw it in so it won't wiggle around in there." };
	} else {
		copy!("ch2-describe-powersupply")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-keyboard" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-keyboard") {
		show serial_dialog { "<m>LAMBDA</>: You've got a keyboard plugged in already... though I realize it's not going to be the easiest to use. But hey, did you know that very early keyboards used a lot of \"chords\" as part of their normal input paradigm?\n\t...Yeah, they kind of sucked. QWERTY is much nicer." };
	} else if ("ch2-carrying-keyboard") {
		show serial_dialog { "<m>LAMBDA</>: I've checked up on that specific model of keytar, and fortunately it can connect to a computer over USB. Just plug it into the outside of the case and you're good to go.\n\tA MIDI interface would have been trickier, but I'm sure we could have found an adaptor around somewhere." };
	} else {
		copy!("ch2-describe-keyboard")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-mouse" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-mouse") {
		show serial_dialog { "<m>LAMBDA</>: You've got your mouse dongle plugged in, so the mouse will work fine now once we get the rest of the machine up and running. Oh, that's assuming its batteries are charged, I guess." };
	} else if ("ch2-carrying-mouse") {
		show serial_dialog { "<m>LAMBDA</>: Installing the mouse is easy. All you have to do is plug the end into a USB port. If it's an optical mouse, you can tell it's plugged in correctly if the red laser comes on once you turn on the computer.\n\tOh, whoops, yours is wireless, huh? Well, then, just plug the dongle into one of the USB ports, and make sure the mouse has fresh batteries." };
	} else {
		copy!("ch2-describe-mouse")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-harddrive" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-harddrive") {
		show serial_dialog { "<m>LAMBDA</>: The hard drive is already in place, so we'll have all the on-board storage we'll need. Not sure how much space we'll have, given how it was constructed, but... I'm sure it'll be fine." };
	} else if ("ch2-carrying-harddrive") {
		show serial_dialog { "<m>LAMBDA</>: The hard drive will need to be plugged into two cables: first, a power cable from the power supply, and second, a SATA cable off the motherboard.\n\tSince that hard drive is... uh, unconventional... just try your best to attach those cables somehow. You'll know if it fits." };
	} else {
		copy!("ch2-describe-harddrive")
		show serial_dialog {
			"\tUse one of the solder stations in the workshop to combine both items into a <m>HARD DRIVE</>."
		};
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-plate" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead-confused";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-plate") {
		show serial_dialog { "<m>LAMBDA</>: You've already... um, \"used\" the plate to make a <m>hard drive</>. You're good." };
	} else if ("ch2-carrying-plate") {
		if (!"ch2-carrying-needle") {
			show serial_dialog { "<m>LAMBDA</>: You've got a good <m>plate</> already. So now what you need is a phonograph <m>needle</> to act as a read head." };
		} else {
			show serial_dialog { "<m>LAMBDA</>: Now that you have both the <m>plate</> and <m>needle</>, you can use one of the solder stations to combine them.\n\tHuh, I can confirm that the iron content of the plate is high enough for this to actually work. Not that I was worried...." };
		}
	} else {
		copy!("ch2-describe-plate")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-needle" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead-confused";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-needle") {
		show serial_dialog { "<m>LAMBDA</>: You've already... um, \"used\" the <m>needle</> to make a <m>hard drive</>. You're good." };
	} else if ("ch2-carrying-needle") {
		if (!"ch2-carrying-plate") {
			show serial_dialog { "<m>LAMBDA</>: You've got a <m>needle</> for a read head already. So now what you need is a dinner <m>plate</> to act as a hard drive platter." };
		} else {
			show serial_dialog { "<m>LAMBDA</>: Now that you have both the <m>needle</> and <m>plate</>, you can use one of the solder stations to combine them.\n\tOh, wow, it looks like that phonograph needle is electric. Weird, but also serendipitous." };
		}
	} else {
		copy!("ch2-describe-needle")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-ramchips" {
	if ("ch2-storyflag-round" < 2) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-ramchips") {
		show serial_dialog { "<m>LAMBDA</>: The RAM is in place, nice and tight. They're all set." };
	} else if ("ch2-carrying-ramchips") {
		show serial_dialog { "<m>LAMBDA</>: To install RAM... \"chips...\" you'll need to find pairs of matching RAM slots on the motherboard. Usually you'd want to use two or four -- it just can't be an odd number. And then....\n\tWell, it's going to be really freaky, but you need to <bold>SHOVE</> them in there, all right? They need to really <bold>CRUNCH</> on in there." };
	} else {
		copy!("ch2-describe-ramchips")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-clock" {
	if ("ch2-storyflag-round" < 3) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-clock") {
		show serial_dialog { "<m>LAMBDA</>: The clock's installed already. It's just... you know... clocking away." };
	} else if ("ch2-carrying-clock") {
		show serial_dialog { "<m>LAMBDA</>: So the system clock is normally built in, and -- well, you know what? You got that giant grandfather clock to fit inside your pocket somehow, so just... uh... do that again, but for the mainframe enclosure instead." };
	} else {
		copy!("ch2-describe-clock")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-cpu" {
	if ("ch2-storyflag-round" < 3) {
		goto "command-parts-ahead";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-cpu") {
		show serial_dialog { "<m>LAMBDA</>: Your CPU is in place already, ready to go off and be the brain of the whole operation." };
	} else if ("ch2-carrying-cpu") {
		show serial_dialog { "<m>LAMBDA</>: Line up the CPU with the slot, and gently set it down. Then press the clamp down to lock it in place.\n\tNow the icky part. You got to put thermal paste on there. Try not to get any on your hands, and try to place it so there won't be any bubbles when you press the heat sink on top. Then... well, press the heat sink on top." };
	} else {
		copy!("ch2-describe-cpu")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-goldfish" {
	if ("ch2-storyflag-round" < 3) {
		goto "command-parts-ahead-confused";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-goldfish") {
		show serial_dialog { "<m>LAMBDA</>: You've already... um, \"used\" the goldfish to make a CPU. You're good." };
	} else if ("ch2-carrying-goldfish") {
		if (!"ch2-carrying-abacus") {
			show serial_dialog { "<m>LAMBDA</>: You've got the goldfish already, the \"thinking\" part of the CPU, so you'll need to pick up the other half: the abacus." };
		} else {
			show serial_dialog { "<m>LAMBDA</>: Now that you have both the goldfish and abacus, you can use one of the solder stations to combine them.\n\tAh... don't worry about the fact that the goldfish is sentient and its identity will be transmogrified by this. It's all going to be fine." };
		}
	} else {
		copy!("ch2-describe-goldfish")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-abacus" {
	if ("ch2-storyflag-round" < 3) {
		goto "command-parts-ahead-confused";
	}
	show serial_dialog "spacer";
	if ("ch2-installed-abacus") {
		show serial_dialog { "<m>LAMBDA</>: You've already got the abacus combined with the goldfish into a CPU, so don't worry about the abacus half of things now." };
	} else if ("ch2-carrying-abacus") {
		if (!"ch2-carrying-goldfish") {
			show serial_dialog { "<m>LAMBDA</>: You've got an abacus already, the \"data\" part of the CPU, so you'll need to pick up the other half: the goldfish." };
		} else {
			show serial_dialog { "<m>LAMBDA</>: Now that you have both the abacus and goldfish, you can use one of the solder stations to combine them." };
		}
	} else {
		copy!("ch2-describe-abacus")
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-parts-os" {
	show serial_dialog "spacer";
	if ("ch2-storyflag-round" < 4) {
		show serial_dialog { "<m>LAMBDA</>: The operating system isn't quite ready yet. Sorry. Keep working on the hardware and I'll keep working on getting the OS ready for you." };
	} else if (!"ch2-cutseen-castle99") {
		show serial_dialog { "<m>LAMBDA</>: You'll all done with the mainframe hardware, so come get the OS from me in my <c>SECRET LAB</>. Use <c>WARP</> to reach me." };
	} else {
		show serial_dialog { "<m>LAMBDA</>: You've got the mainframe OS now, so head on back to first room of the castle -- the room with the the mainframe enclosure -- so the Wizard can install it for you. Good luck." };
	}
	show serial_dialog {" "};
	show serial_dialog "lambda-over";
}

"command-warp" {
	show serial_dialog "spacer";
	show serial_dialog {
		"List of valid <c>WARP</> destinations:"
		" "
		"<bold>-------------------- CASTLE --------------------</>"
		"  Castle exterior          Server room"
		"  Castle entrance          Power plant"
		"  Castle hallway front     Grand hall"
		"  Castle hallway back      Castle kitchen"
		"  Castle throne room       Hydroponics room"
		"  King Gibson's bedroom    Castle pantry"
		"  Workshop                 Secret lab"
		" "
		"<bold>-------------------- TOWN ----------------------</>"
		"  Town                     Bob's Club"
		"  Bakery                   Bob's Club basement"
		"  Greenhouse               Beatrice's house"
		"  Library                  Smith's house"
		"  RTFM room                My house"
	};
	if ("wopr-backdoor-found") {
		show serial_dialog { "  WOPR room" };
	}
}

"warp-ch2-castle-exterior" {
	copy!("warp-common")
	load map "ch2-castle-outside";
}

"warp-ch2-1" {
	copy!("warp-common")
	copy!("ch2-load-castle-1-special")
}

"warp-ch2-11" {
	copy!("warp-common")
	copy!("ch2-load-castle-11-special")
}

"warp-ch2-12" {
	copy!("warp-common")
	copy!("ch2-load-castle-12-special")
}

"warp-ch2-13" {
	copy!("warp-common")
	copy!("ch2-load-castle-13-special")
}

"warp-ch2-14" {
	copy!("warp-common")
	copy!("ch2-load-castle-14-special")
}

"warp-ch2-21" {
	copy!("warp-common")
	copy!("ch2-load-castle-21-special")
}

"warp-ch2-22" {
	copy!("warp-common")
	copy!("ch2-load-castle-22-special")
}

"warp-ch2-23" {
	copy!("warp-common")
	copy!("ch2-load-castle-23-special")
}

"warp-ch2-31" {
	copy!("warp-common")
	copy!("ch2-load-castle-31-special")
}

"warp-ch2-32" {
	copy!("warp-common")
	copy!("ch2-load-castle-32-special")
}

"warp-ch2-33" {
	copy!("warp-common")
	load map "ch2-castle-33";
}

"warp-ch2-34" {
	copy!("warp-common")
	load map "ch2-castle-34";
}

"warp-ch2-99" {
	copy!("warp-common")
	load map "ch2-castle-99";
}

"warp-ch2-town" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-town";
}

"warp-ch2-bakery" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-bakery";
}

"warp-ch2-greenhouse" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-greenhouse";
}

"warp-ch2-wopr" {
	if (
		"wopr-backdoor-found"
		|| debug_mode
	) {
		copy!("warp-ch2-town-destination-check")
		copy!("warp-common")
		load map "woprhouse";
	} else {
		goto "warp-fail";
	}
}

"warp-ch2-library" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-lodge";
}

"warp-ch2-rtfmroom" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-lodge-rtfm";
}

"warp-ch2-magehouse" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-magehouse";
}

"warp-ch2-bobsclub" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-bobsclub";
}

"warp-ch2-bobsclub-basement" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-bobsclub-basement";
}

"warp-ch2-oldcouplehouse" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-oldcouplehouse";
}

"warp-ch2-smithfamily" {
	copy!("warp-ch2-town-destination-check")
	copy!("warp-common")
	load map "ch2-smithfamily";
}

"show_dialog-timewarp" {
	command "rtfm" = "command-rtfm";
	if (!"demo-cutseen-timewarp") {
		camera fade out -> #000000 over 1ms;
		wait 200ms;
		player_control = off;
		player direction = south;
		show dialog {
			name "" "...."
			"Am I asleep?"
		};
		camera fade in -> #000000 over 2000ms;
		show dialog {
			PLAYER alignment BL
			"Huh? Is this the village?"
			"No, this is the village of the past. But\nI still have Ring Zero...."
			"This has got to be a dream."
		};
		player_control = on;
		"demo-cutseen-timewarp" = true;
	}
	hex_control = on;
}

"show_dialog-bob-first-demo_map" {
	if (!"demo-bob-backstory") {
		show dialog {
			SELF "Name's Bob."
			"Stone Cold Bob Austin."
			"Right, what's yours, then?"
			PLAYER "You don't know who I am? We've both lived here for years!"
			SELF "Don't know nobody. All I know is, gotta keep everyone out."
			"You know, unless their name is Bob."
			PLAYER "Bob?"
			SELF "Bob. Camel case.\nNice and plain.\nTraditional."
			"'Cause this club is Bobs-only. You know, the Bobs-Only Club."
			PLAYER "Why is it Bobs only?"
			SELF "Why?\nWhy is it Bobs only?"
			"Why, it wouldn't be the Bobs-Only Club if I just let anyone in!"
		};
		"demo-bob-backstory" = true;
	} else if ("demo-bob-notimplemented") {
		show dialog {
			SELF "So, what's your name, then?"
			PLAYER "The door doesn't work! What does it matter what my name is?"
			SELF "Not my job. My only job is to keep everyone out who's not named Bob."
		};
	} else {
		show dialog {
			SELF "So, what's your name then?"
		};
		if (player name != "Bob") {
			show dialog {
				PLAYER "Um.... it's not Bob."
				SELF "Sorry, can't unlock the door for ya. Bobs only."
			};
			return; // return early
		}
		show dialog {
			PLAYER "Why, what luck!\nMy name happens to be Bob!"
			SELF "Nice. Great name.\nI'll unlock the door."
		};
		entity "Bob" position -> geometry "%ENTITY_PATH%" origin over 666ms;
		entity "Bob" direction = west;
		wait 666ms;
		entity "Bob" direction = south;
		show dialog {
			SELF "There you go. It's open."
		};
		player position -> geometry "predoor" origin over 666ms;
		player position -> geometry "door" origin over 1333ms;
		wait 666ms;
		player direction = east;
		show dialog {
			PLAYER "Hey, what gives?\nI still can't get in."
		};
		entity "Bob" direction = west;
		show dialog {
			SELF "Oh, it's unlocked."
			PLAYER "Then why won't it open?"
			SELF "Oh. The door's not implemented yet."
			PLAYER "...."
			"You could've said that from the start!"
			SELF "Not my job. My only job is to keep everyone out who's not named Bob."
		};
		entity "Bob" direction = south;
		"demo-bob-notimplemented" = true;
	}
}

"show_dialog-timmy-demo_map" {
	copy!("interrupt-walk")
	show dialog {
		SELF "I'm practicing for my triathlon!"
		"Running is my weakest event, so I'm working hard to improve my time!"
		PLAYER "Don't you need legs to run?"
		SELF "...?"
		"No?"
	};
	copy!("resume-walk")
}

"show_dialog-kid-demo_map" {
	copy!("interrupt-walk")
	show dialog {
		SELF "I'm gonna be a Blitzball when I grow up!"
	};
	copy!("resume-walk")
}

"check_if_player_is_goat_high-demo_map" {
	if (player intersects geometry "high") {
		entity "goat1" on_tick = "move_goat1_to_low-demo_map";
		entity "goat2" on_tick = "move_goat2_to_low-demo_map";
		goto "check_if_player_is_goat_low-demo_map";
	}
}

"check_if_player_is_goat_low-demo_map" {
	if (player intersects geometry "low") {
		entity "goat1" on_tick = "move_goat1_to_high-demo_map";
		entity "goat2" on_tick = "move_goat2_to_high-demo_map";
		goto "check_if_player_is_goat_high-demo_map";
	}
}

"map_on_tick-doors" {
	if (player intersects geometry "door-main") {
		goto "load_map-main";
	}
	if (player intersects geometry "door-test") {
		goto "load_map-test";
	}
	if (player intersects geometry "door-town") {
		goto "load_map-town";
	}
	if (player intersects geometry "door-episode2") {
		goto "load_map-chapter2-start";
	}
	if (player intersects geometry "door-action_testing_01") {
		goto "load_map-action_testing_01";
	}
	if (player intersects geometry "door-action_testing_02") {
		goto "load_map-action_testing_02";
	}
	if (player intersects geometry "door-testbig") {
		goto "load_map-testbig";
	}
}

"on_load-east_west" {
	if (warp_state == "enter_from-east") {
		goto "enter_from-east";
	}
	if (warp_state == "enter_from-west") {
		goto "enter_from-west";
	}
}

"on_tick-town" {
	if (player intersects geometry "door_to-main-east") {
		goto "load_map-main-enter_from-east";
	}
	if (player intersects geometry "door_to-main-west") {
		goto "load_map-main-enter_from-west";
	}
}

"my_first_script" {
	wait 100ms;
	hex_editor = open;
	block 200ms;
	hex_editor = close;
}

"on_load-main_menu" {
	"current-chapter" = 0;
	copy!("register-colors")

	// todo: write commentary

	// copy!("register-commentary")
	// if (!ch1-commentary-notice) {
	// 	serial-commentary = true;
	// 	show serial dialog {
	// 		" "
	// 		"<c><bold>Serial commentary</> <c>is available for chapter 1!</> (This is on by default.) To enable or disable this commentary, type <c>COMMENTARY ON</> or <c>COMMENTARY OFF</> at the main menu."
	// 	}
	// 	ch1-commentary-notice = true;
	// }

	/* DEBUG QUICK STUFFS */
	if (debug_mode) {
		command debug = "debug";
		command hub = "debug-hub";
		command honk = "system_bell";
		command bob = "debug-bob";
		command bob2 = "debug-bob2";
		command bob3 = "debug-bob3";
		command simon = "debug-menu-simon";
		command king = "debug-king";
		command ch2 = "menu-chapter_select-2";
		command rtfm = "command-rtfm";
		command buffer + "test" = "debug-buffertest";
		command boot = "ch2-bootup";
		command post = "debug-post";
		// command cutbug = ch2-toot-step3-end2;
		command skip + "1" = "debug-jump-to-round1";
		command skip + "2" = "debug-jump-to-round2";
		command skip + "3" = "debug-jump-to-round3";
		command skip + "4" = "debug-jump-to-round4";
		copy!("register-warp")
		copy!("register-storyflag")
	}
}

"debug-post" {
	"ch2-wizard-backstory" = true;
	copy!("debug-set-flags-to-round4")
	"ch2-seen-room-99" = true;
	"ch2-map-mainframeos" = false;
	"ch2-carrying-mainframeos" = true;
	"ch2-cutseen-castle99" = true;
	"ch2-carrying-mainframeos" = false;
	copy!("ch2-install-mainframeos")
	"ch2-ring-zero-enabled-in-castle" = true;
	"ch2-storyflag-round" = 5;
	"credits-from-menu" = false;
	warp_state = "ch2-ending";
	load map "ch2-castle-outside";
}

"debug-menu-simon" {
	serial_control = true;
	"ch2-has-artifact" = true;
	hex_control = true;
	"current-chapter" = 2;
	copy!("debug-finish-toot")
	"ch2-storyflag-round" = 2;
	copy!("warp-ch2-31") // this has a load_map in it
}

"system_bell" {
	show serial_dialog {
		"Honk!"
	};
}

"debug-king" {
	copy!("debug-set-flags-to-round3")
	"ch2-cutseen-castle13" = true;
	"ch2-cutseen-castle14" = true;
	"ch2-king-rescued" = true;
	warp_state = "Ch2 King Returns";
	load map "ch2-castle-13";
}

"debug" {
	copy!("debug-set-flags-to-round0")
	copy!("ch2-load-castle-1-special")
}

"on_tick-button-to-skip" {
	if (button ANY pressed) {
		goto "handler-skip-splash";
	}
}

"on_tick-splash" {
	hex_control = false;
	if (warp_state == "from-game") {
		goto "main_menu-fade_in";
	}
	camera = geometry "dc801-center";
	camera fade in -> #000000 over 800ms;
	wait 2900ms;
	camera fade out -> #000000 over 800ms;
	player on_tick = "null_script";
	goto "main_menu-fade_in";
}

"main_menu" {
	player on_tick = null_script;
	show dialog {
		name " "
		border_tileset menu
		"CHOOSE YOUR FATE"
		> "Play Game" = "menu-play_game"
		> "Play Demo" = "load_map-demo_map"
		> "Bling Mode" = "menu-bling-mode"
		> "Credits" = "menu-credits-choice"
	};
}

"menu-credits-choice" {
	show dialog {
		name " "
		border_tileset menu
		"CREDITS"
		> "Chapter 1 credits" = "menu-credits"
		> "Chapter 2 credits" = "menu-credits2"
		> "Back" = "main_menu"
	};
}

"menu-bling-mode" {
	show dialog {
		name " "
		border_tileset menu
		"SAVE YOUR SCREEN"
		> "DC801 showcase" = "menu-bling-dc801-showcase"
		> "Flying \"Toasters\"" = "start_bling-flying-toasters"
		> "QR Codes" = "start_bling-qr"
		> "Back" = "main_menu"
	};
}

"menu-bling-dc801-showcase" {
	show dialog {
		name " "
		border_tileset menu
		"DC801 SHOWCASE"
		> "Auto mode" = "start_bling-rotate-auto"
		> "Manual mode" = "start_bling-rotate-manual"
		> "Back" = "menu-bling-mode"
	};
}

"menu-play_game" {
	show dialog {
		name " "
		border_tileset menu
		"PLAY GAME"
		> "Load Game" = "menu-load_game"
		> "New Game" = "menu-new_game"
		> "Erase Save" = "menu-erase_save"
		> "Back" = "main_menu"
	};
}

"menu-erase_save" {
	show dialog {
		name " "
		border_tileset menu
		"BOOM TIME!"
		> "Erase slot 0" = "menu-erase_save-0"
		> "Erase slot 1" = "menu-erase_save-1"
		> "Erase slot 2" = "menu-erase_save-2"
		> "Back" = "menu-play_game"
	};
}

"menu-load_game" {
	show dialog {
		name " "
		border_tileset menu
		"LOAD GAME"
		> "Slot 0" = "menu-load_game-0"
		> "Slot 1" = "menu-load_game-1"
		> "Slot 2" = "menu-load_game-2"
		> "Back" = "menu-play_game"
	};
}

"menu-new_game" {
	show dialog {
		name " "
		border_tileset menu
		"NEW GAME"
		> "Slot 0" = "menu-new_game-0"
		> "Slot 1" = "menu-new_game-1"
		> "Slot 2" = "menu-new_game-2"
		> "Back" = "menu-play_game"
	};
}

"menu-player-name-q" {
	show dialog {
		name " "
		border_tileset menu
		"NEW GAME: Pick your name."
		> "Red" = "menu-player-name-preset1"
		> "Bubbles" = "menu-player-name-preset2"
		> "Black Mage" = "menu-player-name-preset3"
		> "Gimme something random" = "menu-player-name-random"
	};
}

"menu-player-name-confirm" {
	show dialog {
		name " "
		border_tileset menu
		"Your name is %PLAYER%?"
		> "Yes" = "start-new-game-with-name"
		> "No" = "menu-player-name-reset"
	};
}

"menu-player-name-random" {
	rand!(
		player name = [
			"Chara",
			"Buster",
			"Tidus",
			"Frisk",
			"Farnsworth",
			"Cloud",
			"Ash",
			"Crono",
			"Terra",
			"Kremit",
			"Zidane",
			"Cecil",
			"Squall",
			"Roxas",
			"Steamed Hams",
			"Spy",
			"Tom Honks",
			"VeeVee",
			"XDDCC",
			"Bub"
		];
	)
	show dialog {
		name " "
		border_tileset menu
		"Your name is %PLAYER%?"
		> "Reroll random name" = "menu-player-name-random"
		> "Yes" = "start-new-game-with-name"
		> "No" = "menu-player-name-reset"
	};
}

"menu-chapter_select-q" {
	copy!("ch1-count-flags")
	copy!("ch2-count-flags")
	show dialog {
		name " "
		border_tileset menu
		"PLAY (slot $slot-number$: \"%PLAYER%\")"
		> "Chapter 1 ($ch1-storyflags-tally$/11)" = "menu-chapter_select-1"
		> "Chapter 2 ($ch2-storyflags-tally$/10)" = "menu-chapter_select-2-check"
		> "Back" = "menu-play_game"
	};
}

"menu-chapter_select-2-check" {
	if ("ch1_finished" || "warned_ch1_incomplete") {
		// passthrough
		goto "menu-chapter_select-2";
	} else {
		"warned_ch1_incomplete" = true;
		show dialog {
			name " "
			border_tileset menu
			"Chapter 1 is unfinished!"
			> "Play chapter 2 anyway" = "menu-chapter_select-2"
			> "Never mind" = "menu-chapter_select-q"
		};
	}
}

"menu-chapter_select-2" {
	"current-chapter" = 2;
	if (!"ch2-cutseen-birthday") {
		load map "ch2-magehouse-birthday";
	}
	warp_state = "raw_game_load-ch2";
	if ("playersave-room" == 1) {
		copy!("ch2-load-castle-1-special")
	} else {
		load map "ch2-town";
	}
}

"menu-save_game" {
	show dialog {
		name "Save Game"
		border_tileset codec
		portrait floppy
		"Would you like to save your progress?"
		> "Yes" = "menu-save_game-yes"
		> "No" = "menu-save_game-no"
		> "Return to Main Menu" = "menu-save_game-main_menu"
	};
}

"menu-save_game-yes" {
	copy!("capture_player_state")
	save slot;
	self on_interact = "menu-save_game";
}

"check_if_player_is_at_log" {
	if (player intersects geometry "log_ellipse") {
		goto "walk_self_to_path_and_loop";
	}
}

"check_save_flag-bobs_not_on_fire" {
	if ("No two Bobs are not on fire") {
		goto "show_dialog-thanks_for_setting_bob_on_fire";
	}
	show dialog {
		SELF "%Bob%, AKA \"Stone Cold %Bob% Austin\"\nis cold. Would you please warm him up?"
	};
}

"set_save_flag-bobs_not_on_fire" {
	if ("No two Bobs are not on fire") {
		goto "set_save_flag-bobs_on_fire";
	}
	"No two Bobs are not on fire" = true;
	show dialog {
		SELF "I AM %SELF%!\nI HAVE SET %Bob% ON FIRE!!"

		Bob "Oh yeah! I am so hot right now!"
	};
}

"on_load-woprhouse" {
	if ("tuesdayd") {
		command "rtfm" = "command-rtfm";
	}
	if ("current-chapter" == 2) {
		// entrance text
		show serial_dialog "spacer";
		show serial_dialog { "Entering <bold>WOPR ROOM</>..." };
		copy!("ch2-map-init")
	}
	if (!"wopr-backdoor-found") {
		player_control = off;
		"wopr-backdoor-found" = true;
		if (warp_state != "warped") {
			player position -> geometry "walk_from-north" length over 600ms;
		}
		wait 400ms;
		show dialog {
			PLAYER "Whoa! It looks like I found some kind of back door."
		};
		player_control = on;
	}
}

"on_tick-woprhouse" {
	if (player intersects geometry "north-hitbox") {
		goto "on_walk-woprhouse-north";
	}
}

"on_walk-woprhouse-north" {
	// triggered by map's on_tick
	if ("current-chapter" == 1) {
		warp_state = "exit_from-woprhouse";
		load map "main";
	} else if ("current-chapter" == 2) {
		warp_state = "walk_from-woprhouse";
		load map "ch2-town";
	} else {
		show serial_dialog "spacer";
		show serial_dialog {
			"<r>ERROR:</> You're in chapter '$current-chapter$'??"
			"Back to the main menu for you!"
		};
		load map "main_menu";
	}
}